"use strict";(self.webpackChunkCnosDB=self.webpackChunkCnosDB||[]).push([[4414],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2714:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(4137));const i={sidebar_position:3},o="Connector",l={unversionedId:"reference/connector",id:"reference/connector",title:"Connector",description:"Arrow Flight SQL",source:"@site/docs/reference/connector.md",sourceDirName:"reference",slug:"/reference/connector",permalink:"/docs/reference/connector",draft:!1,editUrl:"https://github.com/cnosdb/docs/docs/reference/connector.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"REST API",permalink:"/docs/reference/rest_api"},next:{title:"SQL Reference",permalink:"/docs/reference/sql"}},s={},c=[{value:"Arrow Flight SQL",id:"arrow-flight-sql",level:2},{value:"Arrow Flight SQL Introduction",id:"arrow-flight-sql-introduction",level:3},{value:"Benefits of Arrow Flight SQL",id:"benefits-of-arrow-flight-sql",level:3},{value:"Flow of Arrow Flight SQL Queries",id:"flow-of-arrow-flight-sql-queries",level:3},{value:"C++",id:"c",level:3},{value:"Go",id:"go",level:3},{value:"Operation flow",id:"operation-flow",level:4},{value:"Java",id:"java",level:3},{value:"Operation flow",id:"operation-flow-1",level:4},{value:"Overall Code",id:"overall-code-1",level:4},{value:"Rust",id:"rust",level:3},{value:"Operation Flow",id:"operation-flow-2",level:3},{value:"Overall Code",id:"overall-code-2",level:4},{value:"JDBC",id:"jdbc",level:2},{value:"Operation Flow",id:"operation-flow-3",level:3},{value:"ODBC",id:"odbc",level:2},{value:"Operation Flow",id:"operation-flow-4",level:3},{value:"Python",id:"python",level:2},{value:"Installation",id:"installation",level:3},{value:"Usage Examples",id:"usage-examples",level:3},{value:"Query example",id:"query-example",level:4},{value:"Writing example",id:"writing-example",level:4},{value:"Interface Documentation",id:"interface-documentation",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"connector"},"Connector"),(0,r.kt)("h2",{id:"arrow-flight-sql"},"Arrow Flight SQL"),(0,r.kt)("h3",{id:"arrow-flight-sql-introduction"},"Arrow Flight SQL Introduction"),(0,r.kt)("p",null,"Arrow Flight SQL is a protocol for interacting with SQL databases using the Arrow in-memory format and the Flight RPC framework."),(0,r.kt)("p",null,"Our current environments that support the Arrow Flight SQL client are"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#c"},"C++")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#go"},"Go")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#java"},"Java")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#rust"},"Rust")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#JDBC"},"JDBC")," based on Arrow Flight SQL"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ODBC"},"ODBC")," based on Arrow Flight SQL")),(0,r.kt)("h3",{id:"benefits-of-arrow-flight-sql"},"Benefits of Arrow Flight SQL"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Powerful functionality. Functionality similar to APIs such as JDBC and ODBC, including executing queries, creating prepared statements"),(0,r.kt)("li",{parentName:"ol"},"security. Flight, supporting features such as out-of-the-box encryption and authentication."),(0,r.kt)("li",{parentName:"ol"},"Performance. Communicates with client-side servers that implement Arrow Flight without data transformation, while allowing further optimizations such as parallel data access.")),(0,r.kt)("p",null,"While it can be used directly for database access, it is not a direct replacement for JDBC/ODBC. However, Flight SQL can be used as a specific wired protocol/driver implementation that supports JDBC/ODBC drivers and reduces the implementation burden on the database."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://github.com/cnosdb/docs/blob/main/docs/source/_static/img/cnosdb_arrow_flight.png?raw=true",alt:"cnosdb_arrow_flight.png"})),(0,r.kt)("h3",{id:"flow-of-arrow-flight-sql-queries"},"Flow of Arrow Flight SQL Queries"),(0,r.kt)("p",null,"The client uses arrow flight sql client to connect to the database, query data, and execute SQL in the following flow."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"create FlightSql client"),(0,r.kt)("li",{parentName:"ol"},"verify the user name and password"),(0,r.kt)("li",{parentName:"ol"},"Execute the SQL and get the FlightInfo structure"),(0,r.kt)("li",{parentName:"ol"},"Get the FlightData data stream through the FlightEndPoint in the FlightInfo structure.")),(0,r.kt)("p",null,"FlightInfo contains detailed information about the location of the data.\nThe client can get the data from the appropriate server.\nThe server information is encoded as a series of FlightEndpoint messages in FlightInfo.\nEach Endpoint represents a location that contains a subset of the response data."),(0,r.kt)("p",null,"A FlightEndpoint contains a list of server addresses.\na Ticket, a binary Token that the server uses to identify the requested data.\nFlightEndPoint has no defined order, and if the data set is sorted\nIf the data set is sorted, the data will be returned in only one FlightEndPoint."),(0,r.kt)("p",null,"The flow chart is as follows:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://github.com/cnosdb/docs/raw/main/docs/source/_static/img/arrow_flight_flow.png",alt:"\u6d41\u7a0b\u56fe"})),(0,r.kt)("h3",{id:"c"},"C++"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"installing-apache-arrow"},"Installing Apache Arrow"),(0,r.kt)("p",{parentName:"li"}," You can find a detailed installation tutorial in the ",(0,r.kt)("a",{parentName:"p",href:"arrow.apache.org/install/"},"official  documentation"),"\nOn Mac systems, it's easy to install with the brew command"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"brew install apache-arrow\nbrew install apache-arrow-glib\n")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"configuring-cmakeliststxt"},"Configuring CMakeLists.txt"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-CMake"},"cmake_minimum_required(VERSION 3.24)\nproject(arrow_flight_cpp)\n\nset(CMAKE_CXX_STANDARD 20)\n\nfind_package(Arrow REQUIRED)\nfind_package(ArrowFlight REQUIRED)\nfind_package(ArrowFlightSql REQUIRED)\n\ninclude_directories(${ARROW_INCLUDE_DIR})\nadd_executable(arrow_flight_cpp main.cpp)\ntarget_link_libraries(arrow_flight_cpp PRIVATE Arrow::arrow_shared)\ntarget_link_libraries(arrow_flight_cpp PRIVATE ArrowFlight::arrow_flight_shared)\ntarget_link_libraries(arrow_flight_cpp PRIVATE ArrowFlightSql::arrow_flight_sql_shared)\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"usage-of-c-arrow-library"},"Usage of C++ Arrow library"),(0,r.kt)("p",{parentName:"li"},"Most of arrow's functions return the ",(0,r.kt)("inlineCode",{parentName:"p"},"arrow::Result\\<T\\>")," type, so you need to write the code in a function that returns a value of the type ",(0,r.kt)("inlineCode",{parentName:"p"},"arrow::Result\\<T>"),", as follows:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-c++"},' arrow::Result <std::unique_ptr<FlightClient>> get_location() {\n     ARROW_ASSIGN_OR_RAISE(auto location, Location::ForGrpcTcp("localhost", 31004));\n     ARROW_ASSIGN_OR_RAISE(auto client, FlightClient::Connect(location))\n }\n')),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"ARROW_ASSIGN_OR_RAISE"),"The effect of the macro is to first evaluate the expression with a return value of type ",(0,r.kt)("inlineCode",{parentName:"p"},"arrow::Result\\<T\\>")," on the right, and then return it early if an exception occurs, assigning the corresponding Status value."),(0,r.kt)("p",{parentName:"li"},"For convenience, the sample code is written in the ",(0,r.kt)("inlineCode",{parentName:"p"},"lambda")," function."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"int main() {\n  auto fun = []() {\n  // code\n    }\n  fun();\n  return 0;\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"verify-identity-to-obtain-a-token-and-create-a-flightsqlclient"},"Verify identity to obtain a token and create a FlightSqlClient"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'ARROW_ASSIGN_OR_RAISE(auto location, Location::ForGrpcTcp("localhost", 31004))\nARROW_ASSIGN_OR_RAISE(auto client, FlightClient::Connect(location))\nauto user = "root";\nauto password = "";\n//Base64 Encrypted Authentication\nauto auth = client->AuthenticateBasicToken({}, user, password); \nARROW_RETURN_NOT_OK(auth); // If an exception occurs in result, return directly\nFlightCallOptions call_options;\ncall_options.headers.push_back(auth.ValueOrDie()); //Putting authentication in the call option\nauto sql_client = std::make_unique<FlightSqlClient>(std::move(client));\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"execute-sql-to-get-flightinfo"},"Execute sql to get FlightInfo"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'ARROW_ASSIGN_OR_RAISE(auto info, sql_client->Execute(call_options, "select now();"));\nconst auto endpoints = info->endpoints();\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"retrieve-data-via-flightendpoint"},"Retrieve data via FlightEndPoint"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'for (auto i = 0; i < endpoints.size(); i++) {\n  auto &ticket = endpoints[i].ticket; \n  // stream contains data\n  ARROW_ASSIGN_OR_RAISE(auto stream, sql_client->DoGet(call_options, ticket));\n  // Schema for obtaining data\n  auto schema = stream->GetSchema();\n  ARROW_RETURN_NOT_OK(schema);\n  std::cout << "Schema:" << schema->get()->ToString() << std::endl;\n // Obtain and print data\n  while(true) {\n    ARROW_ASSIGN_OR_RAISE(FlightStreamChunk chunk, stream->Next());\n    if (chunk.data == nullptr) {\n      break;\n    }\n    std::cout << chunk.data->ToString();\n  }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"overall-code"},"Overall Code"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#include <iostream>\n#include <arrow/flight/api.h>\n#include <arrow/flight/sql/api.h>\nusing namespace arrow::flight;\nusing namespace arrow::flight::sql;\nusing namespace arrow;\n\nint main() {\n\n    auto fun = []() {\n        ARROW_ASSIGN_OR_RAISE(auto location, Location::ForGrpcTcp("localhost", 31004))\n        ARROW_ASSIGN_OR_RAISE(auto client, FlightClient::Connect(location))\n\n        auto user = "root";\n        auto password = "";\n        auto auth = client->AuthenticateBasicToken({}, user, password);\n        auto sql_client = std::make_unique<FlightSqlClient>(std::move(client));\n        ARROW_RETURN_NOT_OK(auth);\n        FlightCallOptions call_options;\n        call_options.headers.push_back(auth.ValueOrDie());\n\n        ARROW_ASSIGN_OR_RAISE(auto info, sql_client->Execute(call_options, "select now();"));\n        const auto endpoints = info->endpoints();\n        for (auto i = 0; i < endpoints.size(); i++) {\n            auto &ticket = endpoints[i].ticket;\n\n            ARROW_ASSIGN_OR_RAISE(auto stream, sql_client->DoGet(call_options, ticket));\n\n            auto schema = stream->GetSchema();\n            ARROW_RETURN_NOT_OK(schema);\n\n            std::cout << "Schema:" << schema->get()->ToString() << std::endl;\n            while(true) {\n                ARROW_ASSIGN_OR_RAISE(FlightStreamChunk chunk, stream->Next());\n                if (chunk.data == nullptr) {\n                    break;\n                }\n                std::cout << chunk.data->ToString();\n            }\n        }\n        return Status::OK();\n    };\n\n    auto status = fun();\n\n    return 0;\n}\n')))),(0,r.kt)("h3",{id:"go"},"Go"),(0,r.kt)("h4",{id:"operation-flow"},"Operation flow"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"add-dependencies"},"Add dependencies"),(0,r.kt)("p",{parentName:"li"},"Add dependencies in ",(0,r.kt)("inlineCode",{parentName:"p"},"go.mod"),"."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-go"},"require (\n  github.com/apache/arrow/go/v10 v10.0.1\n  google.golang.org/grpc v1.51.0\n)\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"build-flight-sql-client"},"Build Flight SQL Client"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-go"},'addr := "127.0.0.1:31004"\nvar dialOpts = []grpc.DialOption{\n  grpc.WithTransportCredentials(insecure.NewCredentials()),\n}\ncl, err := flightsql.NewClient(addr, nil, nil, dialOpts...)\nif err != nil {\n  fmt.Print(err)\n  return\n}\n')),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"addr")," is the address in CnosDB configure ",(0,r.kt)("inlineCode",{parentName:"p"},"flight_rpc_listen_addr"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"set-connection-credentials-and-retrieve-the-authenticated-context"},"Set connection credentials and retrieve the authenticated context"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-go"},'ctx, err := cl.Client.AuthenticateBasicToken(context.Background(), "root", "")\nif err != nil {\n  fmt.Print(err)\n  return\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"execute-sql-in-the-authenticated-context-to-get-flightinfo"},"Execute SQL in the authenticated context to get FlightInfo"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-go"},'info, err := cl.Execute(ctx, "SELECT now();")\nif err != nil {\n  fmt.Print(err)\n  return\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"get-the-data-reader-from-flightinfo"},"Get the data Reader from FlightInfo"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// CnosDB only implements one EndPoint now.\nrdr, err := cl.DoGet(ctx, info.GetEndpoint()[0].Ticket)\nif err != nil {\n  fmt.Print(err)\n  fmt.Println(35)\n  return\n}\ndefer rdr.Release()\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"get-the-data-via-reader"},"Get the data via Reader"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-go"},'n := 0\nfor rdr.Next() {\n  record := rdr.Record()\n  for i, col := range record.Columns() {\n    fmt.Printf("rec[%d][%q]: %v\\n", n, record.ColumnName(i), col)\n  }\n  column := record.Column(0)\n  column.String()\n  n++\n}\n')))),(0,r.kt)("h3",{id:"java"},"Java"),(0,r.kt)("h4",{id:"operation-flow-1"},"Operation flow"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"add-dependencies-1"},"Add dependencies"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Add dependencies in ",(0,r.kt)("inlineCode",{parentName:"p"},"pom.xml"),", if you use maven."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<dependencies>\n  \x3c!-- https://mvnrepository.com/artifact/org.apache.arrow/arrow-flight --\x3e\n  <dependency>\n    <groupId>org.apache.arrow</groupId>\n    <artifactId>arrow-flight</artifactId>\n    <version>10.0.1</version>\n    <type>pom</type>\n  </dependency>\n\n  \x3c!-- https://mvnrepository.com/artifact/org.apache.arrow/flight-sql --\x3e\n  <dependency>\n    <groupId>org.apache.arrow</groupId>\n    <artifactId>flight-sql</artifactId>\n    <version>10.0.1</version>\n  </dependency>\n\n  \x3c!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-simple --\x3e\n  <dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-api</artifactId>\n    <version>2.0.5</version>\n  </dependency>\n\n  \x3c!-- https://mvnrepository.com/artifact/org.apache.arrow/flight-core --\x3e\n  <dependency>\n    <groupId>org.apache.arrow</groupId>\n    <artifactId>arrow-memory-netty</artifactId>\n    <version>10.0.1</version>\n  </dependency>\n\n  \x3c!-- https://mvnrepository.com/artifact/org.apache.arrow/flight-core --\x3e\n  <dependency>\n    <groupId>org.apache.arrow</groupId>\n    <artifactId>flight-core</artifactId>\n    <version>10.0.1</version>\n  </dependency>\n</dependencies>\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"write again"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<build>\n  <extensions>\n    <extension>\n      <groupId>kr.motd.maven</groupId>\n      <artifactId>os-maven-plugin</artifactId>\n      <version>1.7.1</version>\n    </extension>\n  </extensions>\n</build>\n")))))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"add-environment-variable"},"Add environment variable"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'_JAVA_OPTIONS="--add-opens=java.base/java.nio=ALL-UNNAMED"\n')),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'java --add-opens=java.base/java.nio=ALL-UNNAMED -jar ...\n# ro\nenv _JAVA_OPTIONS="--add-opens=java.base/java.nio=ALL-UNNAMED" java -jar ...\n\n\n# if maven used \n_JAVA_OPTIONS="--add-opens=java.base/java.nio=ALL-UNNAMED" mvn exec:java -Dexec.mainClass="YourMainCode"\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"build-flight-sql-client-1"},"Build Flight SQL Client"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'BufferAllocator allocator = new RootAllocator(Integer.MAX_VALUE);\nfinal Location clientLocation = Location.forGrpcInsecure("localhost", 31004);\n\nFlightClient client = FlightClient.builder(allocator, clientLocation).build();\nFlightSqlClient sqlClinet = new FlightSqlClient(client);\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"cofig-authentication"},"Cofig Authentication"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Optional<CredentialCallOption> credentialCallOption = client.authenticateBasicToken("root", "");\nfinal CallHeaders headers = new FlightCallHeaders();\nheaders.insert("tenant", "cnosdb");\nSet<CallOption> options = new HashSet<>();\n\ncredentialCallOption.ifPresent(options::add);\noptions.add(new HeaderCallOption(headers));\nCallOption[] callOptions = options.toArray(new CallOption[0]);\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"execute-sql-in-the-authenticated-context-to-get-flightinfo-1"},"Execute SQL in the authenticated context to get FlightInfo"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'try (final FlightSqlClient.PreparedStatement preparedStatement = sqlClinet.prepare("select now();", callOptions)) {\n  final FlightInfo info = preparedStatement.execute();\n  System.out.println(info.getSchema());\n  \n  //\u5269\u4f59\u4ee3\u7801\u5728\u4e0b\u4e00\u4e2a\u6b65\u9aa4\n} \n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"get-the-data"},"Get the data"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'final Ticket ticket = info.getEndpoints().get(0).getTicket();\ntry (FlightStream stream = sqlClinet.getStream(ticket)) {\n  int n = 0;\n  while (stream.next()) {\n    List<FieldVector> vectors = stream.getRoot().getFieldVectors();\n    for (int i = 0; i < vectors.size(); i++) {\n      System.out.printf("%d %d %s", n, i , vectors.get(i));\n    }\n    n++;\n  }\n} catch (Exception e) {\n  throw new RuntimeException(e);\n}\n')))),(0,r.kt)("h4",{id:"overall-code-1"},"Overall Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package org.example;\n\nimport org.apache.arrow.flight.*;\nimport org.apache.arrow.flight.grpc.CredentialCallOption;\nimport org.apache.arrow.flight.sql.FlightSqlClient;\nimport org.apache.arrow.memory.BufferAllocator;\nimport org.apache.arrow.memory.RootAllocator;\nimport org.apache.arrow.vector.FieldVector;\n\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.Set;\n\n\npublic class Main {\n  public static void main(String[] args) {\n    BufferAllocator allocator = new RootAllocator(Integer.MAX_VALUE);\n    final Location clientLocation = Location.forGrpcInsecure("localhost", 31004);\n\n    FlightClient client = FlightClient.builder(allocator, clientLocation).build();\n    FlightSqlClient sqlClinet = new FlightSqlClient(client);\n\n    Optional<CredentialCallOption> credentialCallOption = client.authenticateBasicToken("root", "");\n    final CallHeaders headers = new FlightCallHeaders();\n    headers.insert("tenant", "cnosdb");\n    Set<CallOption> options = new HashSet<>();\n\n    credentialCallOption.ifPresent(options::add);\n    options.add(new HeaderCallOption(headers));\n    CallOption[] callOptions = options.toArray(new CallOption[0]);\n\n    try (final FlightSqlClient.PreparedStatement preparedStatement = sqlClinet.prepare("select now();", callOptions)) {\n      final FlightInfo info = preparedStatement.execute();\n      System.out.println(info.getSchema());\n      final Ticket ticket = info.getEndpoints().get(0).getTicket();\n      try (FlightStream stream = sqlClinet.getStream(ticket)) {\n        int n = 0;\n        while (stream.next()) {\n          List<FieldVector> vectors = stream.getRoot().getFieldVectors();\n          for (int i = 0; i < vectors.size(); i++) {\n            System.out.printf("%d %d %s", n, i , vectors.get(i));\n          }\n          n++;\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n}\n')),(0,r.kt)("h3",{id:"rust"},"Rust"),(0,r.kt)("p",null,"The code runs in an asynchronous environment."),(0,r.kt)("h3",{id:"operation-flow-2"},"Operation Flow"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"add-dependencies-2"},"Add dependencies"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'arrow = {version = "28.0.0", features = ["prettyprint"] }\narrow-flight = {version = "28.0.0", features = ["flight-sql-experimental"]}\ntokio = "1.23.0"\nfutures = "0.3.25"\nprost-types = "0.11.2"\ntonic = "0.8.3"\nprost = "0.11.3"\nhttp-auth-basic = "0.3.3"\nbase64 = "0.13.1"\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"creative-flight-serverclient"},"Creative Flight ServerClient"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let mut client = FlightServiceClient::connect("http://localhost:31004")\n.await\n.expect("connect faile");\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"verify"},"Verify"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let mut req = Request::new(futures::stream::iter(iter::once(\n  HandshakeRequest::default(),\n)));\n\nreq.metadata_mut().insert(\n  AUTHORIZATION.as_str(),\n  AsciiMetadataValue::try_from(format!(\n    "Basic {}",\n    base64::encode(format!("{}:{}", "root", ""))\n  ))\n  .expect("metadata construct fail"),\n);\n\nlet resp = client.handshake(req).await.expect("handshake");\n\nprintln!("handshake resp: {:?}", resp.metadata());\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"execute-sql"},"Execute SQL"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let cmd = CommandStatementQuery {\n  query: "select 1;".to_string(),\n};\nlet pack = prost_types::Any::pack(&cmd).expect("pack");\nlet fd = FlightDescriptor::new_cmd(pack.encode_to_vec());\n\nlet mut req = Request::new(fd);\nreq.metadata_mut().insert(\n  AUTHORIZATION.as_str(),\n  resp.metadata().get(AUTHORIZATION.as_str()).unwrap().clone(),\n);\nlet resp = client.get_flight_info(req).await.expect("get_flight_info");\n\nlet flight_info = resp.into_inner();\nlet schema_ref =\nArc::new(Schema::try_from(IpcMessage(flight_info.schema)).expect("Schema::try_from"));\nprintln!("{}", schema_ref);\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"get-the-data-and-print-it"},"Get the data and print it"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'for ep in flight_info.endpoint {\n  if let Some(ticket) = ep.ticket {\n    let resp = client.do_get(ticket).await.expect("do_get");\n    let mut stream = resp.into_inner();\n    let mut dictionaries_by_id = HashMap::new();\n\n    let mut record_batches = Vec::new();\n    while let Some(Ok(flight_data)) = stream.next().await {\n      let message =\n      root_as_message(&flight_data.data_header[..]).expect("root as message");\n      match message.header_type() {\n        ipc::MessageHeader::Schema => {\n          println!("a schema when messages are read",);\n        }\n\n        ipc::MessageHeader::RecordBatch => {\n          let record_batch = flight_data_to_arrow_batch(\n            &flight_data,\n            schema_ref.clone(),\n            &dictionaries_by_id,\n          )\n          .expect("record_batch_from_message");\n          record_batches.push(record_batch);\n        }\n        ipc::MessageHeader::DictionaryBatch => {\n          let ipc_batch = message.header_as_dictionary_batch().unwrap();\n\n          reader::read_dictionary(\n            &Buffer::from(flight_data.data_body),\n            ipc_batch,\n            &schema_ref,\n            &mut dictionaries_by_id,\n            &message.version(),\n          )\n          .unwrap();\n        }\n        _ => {\n          panic!("Reading types other than record batches not yet supported");\n        }\n      }\n    }\n\n    println!(\n      "{}",\n      arrow::util::pretty::pretty_format_batches(&record_batches).expect("print")\n    );\n  }\n}\n')))),(0,r.kt)("h4",{id:"overall-code-2"},"Overall Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use std::collections::HashMap;\nuse std::iter;\nuse std::sync::Arc;\n\nuse arrow::buffer::Buffer;\nuse arrow::datatypes::Schema;\nuse arrow::ipc;\nuse arrow::ipc::{reader, root_as_message};\nuse arrow_flight::flight_service_client::FlightServiceClient;\nuse arrow_flight::sql::{CommandStatementQuery, ProstAnyExt};\nuse arrow_flight::utils::flight_data_to_arrow_batch;\nuse arrow_flight::{FlightDescriptor, HandshakeRequest, IpcMessage};\nuse futures::StreamExt;\n\nuse prost::Message;\nuse tonic::codegen::http::header::AUTHORIZATION;\nuse tonic::metadata::AsciiMetadataValue;\nuse tonic::Request;\n\n#[tokio::main]\nasync fn main() {\n\n  let mut client = FlightServiceClient::connect("http://localhost:31004")\n  .await\n  .expect("connect");\n\n  let mut req = Request::new(futures::stream::iter(iter::once(\n    HandshakeRequest::default(),\n  )));\n\n  req.metadata_mut().insert(\n    AUTHORIZATION.as_str(),\n    AsciiMetadataValue::try_from(format!(\n      "Basic {}",\n      base64::encode(format!("{}:{}", "root", ""))\n    ))\n    .expect("metadata construct fail"),\n  );\n\n  let resp = client.handshake(req).await.expect("handshake");\n\n  println!("handshake resp: {:?}", resp.metadata());\n\n  let cmd = CommandStatementQuery {\n    query: "select 1;".to_string(),\n  };\n  let pack = prost_types::Any::pack(&cmd).expect("pack");\n  let fd = FlightDescriptor::new_cmd(pack.encode_to_vec());\n\n  let mut req = Request::new(fd);\n  req.metadata_mut().insert(\n    AUTHORIZATION.as_str(),\n    resp.metadata().get(AUTHORIZATION.as_str()).unwrap().clone(),\n  );\n  let resp = client.get_flight_info(req).await.expect("get_flight_info");\n\n  let flight_info = resp.into_inner();\n  let schema_ref =\n  Arc::new(Schema::try_from(IpcMessage(flight_info.schema)).expect("Schema::try_from"));\n  println!("{}", schema_ref);\n\n  for ep in flight_info.endpoint {\n    if let Some(ticket) = ep.ticket {\n      let resp = client.do_get(ticket).await.expect("do_get");\n      let mut stream = resp.into_inner();\n      let mut dictionaries_by_id = HashMap::new();\n\n      let mut record_batches = Vec::new();\n      while let Some(Ok(flight_data)) = stream.next().await {\n        let message =\n        root_as_message(&flight_data.data_header[..]).expect("root as message");\n        match message.header_type() {\n          ipc::MessageHeader::Schema => {\n            println!("a schema when messages are read",);\n          }\n\n          ipc::MessageHeader::RecordBatch => {\n            let record_batch = flight_data_to_arrow_batch(\n              &flight_data,\n              schema_ref.clone(),\n              &dictionaries_by_id,\n            )\n            .expect("record_batch_from_message");\n            record_batches.push(record_batch);\n          }\n          ipc::MessageHeader::DictionaryBatch => {\n            let ipc_batch = message.header_as_dictionary_batch().unwrap();\n\n            reader::read_dictionary(\n              &Buffer::from(flight_data.data_body),\n              ipc_batch,\n              &schema_ref,\n              &mut dictionaries_by_id,\n              &message.version(),\n            )\n            .unwrap();\n          }\n          _ => {\n            panic!("Reading types other than record batches not yet supported");\n          }\n        }\n      }\n\n      println!(\n        "{}",\n        arrow::util::pretty::pretty_format_batches(&record_batches).expect("print")\n      );\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"jdbc"},"JDBC"),(0,r.kt)("h3",{id:"operation-flow-3"},"Operation Flow"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"add-dependencies-3"},"Add dependencies"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"<dependencies>\n  <dependency>\n    <groupId>org.apache.arrow</groupId>\n    <artifactId>arrow-jdbc</artifactId>\n    <version>10.0.1</version>\n  </dependency>\n  \x3c!-- https://mvnrepository.com/artifact/org.apache.arrow/flight-sql-jdbc-driver --\x3e\n  <dependency>\n    <groupId>org.apache.arrow</groupId>\n    <artifactId>flight-sql-jdbc-driver</artifactId>\n    <version>10.0.1</version>\n  </dependency>\n</dependencies>\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"add-environment-variables"},"Add environment variables"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'_JAVA_OPTIONS="--add-opens=java.base/java.nio=ALL-UNNAMED"\n')),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'java --add-opens=java.base/java.nio=ALL-UNNAMED -jar ...\n# or\nenv _JAVA_OPTIONS="--add-opens=java.base/java.nio=ALL-UNNAMED" java -jar ...\n\n\n# if you use maven\n_JAVA_OPTIONS="--add-opens=java.base/java.nio=ALL-UNNAMED" mvn exec:java -Dexec.mainClass="YourMainCode"\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"set-properties-and-query"},"Set properties and query"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package org.example;\n\nimport java.sql.*;\nimport java.util.Properties;\n\npublic class Main {\n  public static void main(String[] args) {\n    final Properties properties = new Properties();\n    properties.put("user", "root"); // username\n    properties.put("password", "");  // password\n    properties.put("tenant", "cnosdb");// tenant\n    properties.put("useEncryption", false);\n    try (\n      Connection connection = DriverManager.getConnection(\n        "jdbc:arrow-flight-sql://localhost:31004", properties\n      );\n      Statement statement = connection.createStatement())\n    {\n      ResultSet resultSet = statement.executeQuery("SELECT 1, 2, 3;");\n\n      while (resultSet.next()) {\n        int column1 = resultSet.getInt(1);\n        int column2 = resultSet.getInt(2);\n        int column3 = resultSet.getInt(3);\n        System.out.printf("%d %d %d", column1, column2, column3);\n      }\n    } catch (SQLException e) {\n      throw new RuntimeException(e);\n    }\n  }\n}\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"set-properties-and-execute-sql"},"Set properties and execute SQL"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package org.example;\n\nimport java.sql.*;\nimport java.util.Properties;\n\npublic class Main {\n  public static void main(String[] args) {\n    final Properties properties = new Properties();\n    properties.put("user", "root");\n    properties.put("password", "");\n    properties.put("tenant", "cnosdb");\n    properties.put("useEncryption", false);\n    try (\n      Connection connection = DriverManager.getConnection(\n        "jdbc:arrow-flight-sql://localhost:31004", properties\n      );\n      Statement statement = connection.createStatement())\n    {\n      statement.execute("CREATE TABLE IF NOT EXISTS air\\n" +\n                        "(\\n" +\n                        "    visibility  DOUBLE,\\n" +\n                        "    temperature DOUBLE,\\n" +\n                        "    pressure    DOUBLE,\\n" +\n                        "    TAGS(station)\\n" +\n                        ");");\n      statement.executeUpdate("INSERT INTO air (TIME, station, visibility, temperature, pressure) VALUES\\n" +\n                              "    (1666165200290401000, \'XiaoMaiDao\', 56, 69, 77);");\n      ResultSet resultSet = statement.executeQuery("select * from air limit 1;");\n\n      while (resultSet.next()) {\n        Timestamp column1 = resultSet.getTimestamp(1);\n        String column2 = resultSet.getString(2);\n        Double column3 = resultSet.getDouble(3);\n        Double column4 = resultSet.getDouble(4);\n        Double column5 = resultSet.getDouble(5);\n\n        System.out.printf("%s %s %f %f %f", column1, column2, column3, column4, column5);\n      }\n    } catch (SQLException e) {\n      throw new RuntimeException(e);\n    }\n  }\n}\n\n')))),(0,r.kt)("h2",{id:"odbc"},"ODBC"),(0,r.kt)("p",null,"Currently only x86_64 architecture systems are supported, linux only supports centos and redhat series distributions"),(0,r.kt)("p",null,"For more on Arrow Flight SQL ODBC, see the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.dremio.com/software/drivers/arrow-flight-sql-odbc-driver/"},"Dremio documentation"),"."),(0,r.kt)("p",null,"The following steps are based on Centos7."),(0,r.kt)("h3",{id:"operation-flow-4"},"Operation Flow"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"install-odbc-manager"},"Install ODBC Manager"),(0,r.kt)("p",{parentName:"li"},"   Install unixODBC under Linux"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"yum install unixODBC-devel\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"install-arrow-flight-odbc-driver"},"Install arrow-flight-odbc driver"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"wget https://download.dremio.com/arrow-flight-sql-odbc-driver/arrow-flight-sql-odbc-driver-LATEST.x86_64.rpm \nyum localinstall arrow-flight-sql-odbc-driver-LATEST.x86_64.rpm \n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"modify-the-configuration-file"},"Modify the configuration file"),(0,r.kt)("p",{parentName:"li"}," Modify the configuration file located in ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/odbc.ini"),"."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"[ODBC Data Sources]\nCNOSDB=Arrow Flight SQL ODBC Driver\n\n[CNOSDB]\nDescription=ODBC Driver DSN for Arrow Flight SQL developed by Dremio\nDriver=Arrow Flight SQL ODBC Driver\nHost=localhost\nPort=31004  \nUID=root\nPWD=\nDatabase=public\nTenant=cnosdb\nuseEncryption=false\nTrustedCerts=/opt/arrow-flight-sql-odbc-driver/lib64/cacerts.pem\nUseSystemTrustStore=true\n")),(0,r.kt)("p",{parentName:"li"}," where UID is the user name and PWD is the password.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"test-whether-the-connection"},"test whether the connection"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"isql -v CNOSDB\n")),(0,r.kt)("p",{parentName:"li"}," If the following appears, the connection is successful."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"+---------------------------------------+\n| Connected!                            |\n|                                       |\n| sql-statement                         |\n| help [tablename]                      |\n| quit                                  |\n|                                       |\n+---------------------------------------+\nSQL>\n")),(0,r.kt)("p",{parentName:"li"}," Go to the code test below.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"writing-cmake"},"Writing cmake"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cmake"},"cmake_minimum_required(VERSION 3.24)\nproject(arrow_flight_odbc C)\n\nset(CMAKE_C_STANDARD 11)\nfind_package(ODBC)\ninclude_directories(${ODBC_INCLUDE_DIR})\nlink_directories(/opt/arrow-flight-sql-odbc-driver/lib64)\nadd_executable(arrow_flight_odbc main.c)\ntarget_link_libraries(arrow_flight_odbc ${ODBC_LIBRARY})\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"write-c-code-mainc"},"Write c code main.c"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n#include <sql.h>\n#include <sqlext.h>\n\nint main() {\n  SQLHENV henv;\n  SQLHDBC hdbc;\n  SQLHSTMT hsmt;\n  SQLRETURN ret;\n  \n  \n  // Allocate environment memory\n  ret = SQLAllocEnv(&henv);\n  if (ret != SQL_SUCCESS) {\n    fprintf(stderr, "Unable to allocate an environment handle");\n    return -1;\n  }\n  // Setting environmental properties\n  ret = SQLSetEnvAttr(henv,  SQL_ATTR_ODBC_VERSION, (void *) SQL_OV_ODBC3, 0);\n  if (ret != SQL_SUCCESS) {\n    fprintf(stderr, "Unable to set env attr");\n    return -1;\n  }\n  // Allocate connection memory\n  ret = SQLAllocConnect(henv, &hdbc);\n  if (ret != SQL_SUCCESS) {\n    fprintf(stderr, "Unable to allocate connection");\n  }\n  //Connect to driver\n  ret = SQLDriverConnect(hdbc, NULL, (SQLCHAR*) "DSN=CNOSDB;UID=root;PWD=", SQL_NTS,\n                         NULL, 0, NULL, SQL_DRIVER_NOPROMPT);\n  if (ret != SQL_SUCCESS) {\n    fprintf(stderr, "connect fail");\n  }\n  // Allocate statement space\n  SQLAllocStmt(hdbc, &hsmt);\n\n  SQLCHAR *sql = "CREATE TABLE IF NOT EXISTS air (\\n"\n    " visibility  DOUBLE,\\n"\n    " temperature DOUBLE,\\n"\n    " pressure    DOUBLE,\\n"\n    " TAGS(station));";\n  // Execute Create table\n  ret = SQLExecDirect(hsmt, sql, SQL_NTS);\n  if (ret != SQL_SUCCESS) {\n    fprintf(stderr, "Execute create fail");\n  }\n\n \n  sql = "INSERT INTO air (TIME, station, visibility, temperature, pressure) VALUES\\n"\n    "    (1666165200290401000, \'XiaoMaiDao\', 56, 69, 77);";\n  // Execute insert\n  ret = SQLExecDirect(hsmt, sql, SQL_NTS);\n  if (ret != SQL_SUCCESS) {\n    fprintf(stderr, "Execute insert fail");\n  }\n\n  sql = "SELECT * FROM air LIMIT 1";\n  //Execution of queries\n  ret = SQLExecDirect(hsmt, sql ,SQL_NTS);\n  if (ret != SQL_SUCCESS) {\n    fprintf(stderr, "Execute query fail");\n  }\n  SQL_TIMESTAMP_STRUCT time;\n  SQLCHAR station[50];\n  SQLDOUBLE visibility, temperature, pressure;\n  long time_len, station_len;\n  \n  // Get result set\n  while (1) {\n    ret = SQLFetch(hsmt);\n    if (ret == SQL_ERROR || ret == SQL_SUCCESS_WITH_INFO) {\n      printf("error SQLFetch");\n    }\n    // Get the data of a column\n    if (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO) {\n      SQLGetData(hsmt, 1, SQL_C_TIMESTAMP, &time, 0, NULL);\n      SQLGetData(hsmt, 2, SQL_C_CHAR, station, 50, &station_len);\n      SQLGetData(hsmt, 3, SQL_C_DOUBLE, &visibility, 0, NULL);\n      SQLGetData(hsmt, 4, SQL_C_DOUBLE, &temperature, 0, NULL);\n      SQLGetData(hsmt, 5, SQL_C_DOUBLE, &pressure, 0, NULL);\n      printf("%d-%02d-%02dT%02d:%02d:%02d, %s, %.2lf, %.2lf, %.2lf\\n", time.year, time.month, time.day, time.hour, time.minute, time.second, station, visibility, temperature, pressure);\n    } else {\n     break;\n    }\n  }\n\n  return 0;\n}\n')))),(0,r.kt)("h2",{id:"python"},"Python"),(0,r.kt)("p",null,"With the release of the new version of the distribution, attentive friends will have noticed that CnosDB 2.0 has fully supported Python. cnos-connector enables the connection between CnosDB 2.0 and Python by calling the connector cnos-connector. cnos-connector encapsulates the requests to CnosDB, making it simpler and easier to use CnosDB in Python. It makes using CnosDB in Python environment more concise and easy to use. At the same time, cnos-connector provides a ",(0,r.kt)("a",{parentName:"p",href:"https://peps.python.org/pep-0249/"},"PEP 249")," compliant programming interface, which makes it easier to interact with SQLAlchemy and pandas."),(0,r.kt)("p",null,"cnos-connector is fully open source and the source code is located on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cnosdb/cnosdb-client-python"},"GitHub")),(0,r.kt)("h3",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Download and install cnos-connector using pip, which requires Python version greater than or equal to 3.6"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pip install cnos-connector\n")),(0,r.kt)("h3",{id:"usage-examples"},"Usage Examples"),(0,r.kt)("h4",{id:"query-example"},"Query example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"query-by-sql"},"Query by SQL"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from cnosdb_connector import connect\n\nconn = connect(url="http://127.0.0.1:31001/", user="root", password="")\nresp = conn.execute("SHOW DATABASES")\nprint(resp)\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"query-by-function-defined-by-the-interface"},"Query by function defined by the interface"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from cnosdb_connector import connect\n\nconn = connect(url="http://127.0.0.1:31001/", user="root", password="")\nconn.create_database("air")\nresp = conn.list_database()\nprint(resp)\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"search-through-pep-249-for-more-information-please-refer-to-pep-249"},"Search through PEP-249, for more information, please refer to ",(0,r.kt)("a",{parentName:"h4",href:"https://peps.python.org/pep-0249/"},"PEP-249"),"."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from cnosdb_connector import connect\n\nconn = connect(url="http://127.0.0.1:31001/", user="root", password="")\ncursor = conn.cursor()\n\ncursor.execute("SHOW DATABASES")\nresp = cursor.fetchall()\nprint(resp)\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"querying-via-pandas-which-supports-the-pep-249-specification"},"Querying via pandas, which supports the PEP-249 specification"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import pandas as pd\nfrom cnosdb_connector import connect\n\nconn = connect(url="http://127.0.0.1:31001/", user="root", password="")\n\nresp = pd.read_sql("SHOW DATABASES", conn)\nprint(resp)\n')))),(0,r.kt)("h4",{id:"writing-example"},"Writing example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"supports-the-line-protocol-method-for-writing-data"},"supports the Line Protocol method for writing data."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from cnosdb_connector import connect\n\nline0 = "air,station=XiaoMaiDao temperature=56,pressure=77 1666165200290401000"\nline1 = "air,station=XiaoMaiDao temperature=72,pressure=71 1666165300290401000"\nline2 = "air,station=XiaoMaiDao temperature=46,pressure=67 1666165400290401000"\n\nconn = connect(url="http://127.0.0.1:31001/", user="root", password="")\n\nconn.create_database_with_ttl("ocean")\nconn.switch_database("ocean")\n\nconn.write_lines([line0, line1, line2])\n\nresp = conn.execute("SELECT * FROM ocean;")\nprint(resp)\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"support-sql-for-writing"},"Support SQL for writing"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from cnosdb_connector import connect\n\nconn = connect(url="http://127.0.0.1:31001/", user="root", password="")\n\nquery = "INSERT INTO air (TIME, station, visibility, temperature, pressure) VALUES\n                (1666165200290401000, \'XiaoMaiDao\', 56, 69, 77); "\n\nconn.execute(query)\n\nresp = conn.execute("SELECT * FROM ocean;")\nprint(resp)\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h4",{parentName:"li",id:"support-for-writing-in-csv-format"},"Support for writing in CSV format"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from cnosdb_connector import connect\nimport os\n\nquery = "CREATE TABLE air (\\\n             visibility DOUBLE,\\\n             temperature DOUBLE,\\\n             pressure DOUBLE,\\\n             TAGS(station));"\n\nconn = connect(url="http://127.0.0.1:31001/", user="root", password="")\n# table schema must same with csv file\nconn.execute(query)\n\npath = os.path.abspath("test.csv")\nconn.write_csv("air", path)\n\nresp = conn.execute("SELECT * FROM air;")\nprint(resp)\n')))),(0,r.kt)("h3",{id:"interface-documentation"},"Interface Documentation"),(0,r.kt)("p",null,"In order to make it easier for users to connect to CnosDB, cnosdb_connector provides a simple wrapper for some common SQL."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# CREATE DATABASE database_name;\ndef create_database(self, database_name)\n\n# CREATE DATABASE database_name WITH TTL ttl;\ndef create_database_with_ttl(self, database_name, ttl)\n\n# CREATE USER user WITH PASSWORD = password;\ndef create_user(self, user, password)\n\n# DROP DATABASE database_name;\ndef drop_database(self, database_name)\n    \n# DROP TABLE table_name;\ndef drop_table(self, table_name)\n\n# DROP USER user;\ndef drop_user(self, user)\n\n# SHOW DATABASES;\ndef list_database(self)\n\n# SHOW TABLES;\ndef list_table(self)\n")),(0,r.kt)("p",null,"If you have a better idea for an interface wrapper, feel free to submit a PR to our Python Connector ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/cnosdb/cnosdb-client-python"},"source code repository"),"."))}u.isMDXComponent=!0}}]);