"use strict";(self.webpackChunkCnosDB=self.webpackChunkCnosDB||[]).push([[4065],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},N=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=s(n),N=r,d=m["".concat(o,".").concat(N)]||m[N]||k[N]||l;return n?a.createElement(d,p(p({ref:t},u),{},{components:n})):a.createElement(d,p({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,p=new Array(l);p[0]=N;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[m]="string"==typeof e?e:r,p[1]=i;for(var s=2;s<l;s++)p[s]=n[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}N.displayName="MDXCreateElement"},7377:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>p,default:()=>k,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var a=n(7462),r=(n(7294),n(4137));const l={sidebar_position:4},p="SQL Reference",i={unversionedId:"reference/sql",id:"reference/sql",title:"SQL Reference",description:"Database",source:"@site/docs/reference/sql.md",sourceDirName:"reference",slug:"/reference/sql",permalink:"/docs/reference/sql",draft:!1,editUrl:"https://github.com/cnosdb/docs/docs/reference/sql.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Connector",permalink:"/docs/reference/connector"},next:{title:"CnosDB Tools",permalink:"/docs/reference/tools"}},o={},s=[{value:"Database",id:"database",level:2},{value:"Data Types",id:"data-types",level:3},{value:"Other Data Types",id:"other-data-types",level:4},{value:"Constant",id:"constant",level:4},{value:"TIMESTAMP constant syntax",id:"timestamp-constant-syntax",level:4},{value:"INTERVAL Constant Syntax",id:"interval-constant-syntax",level:4},{value:"Create Database",id:"create-database",level:3},{value:"Parameters Description",id:"parameters-description",level:4},{value:"Show All Databases",id:"show-all-databases",level:3},{value:"<strong>Use Database</strong>",id:"use-database",level:3},{value:"Drop Database",id:"drop-database",level:3},{value:"<strong>Alter Database Parameters</strong>",id:"alter-database-parameters",level:3},{value:"<strong>Describe Database Parameters</strong>",id:"describe-database-parameters",level:3},{value:"Table",id:"table",level:2},{value:"Create Table",id:"create-table",level:3},{value:"Create Common Table",id:"create-common-table",level:3},{value:"Instructions",id:"instructions",level:4},{value:"<strong>Create External Table</strong>",id:"create-external-table",level:3},{value:"Instruction",id:"instruction",level:4},{value:"Parameter Description",id:"parameter-description",level:4},{value:"<strong>Drop Table</strong>",id:"drop-table",level:3},{value:"<strong>Show Tables of Current Database</strong>",id:"show-tables-of-current-database",level:3},{value:"Describe Table",id:"describe-table",level:3},{value:"<strong>Alter Table</strong>",id:"alter-table",level:3},{value:"INSERT",id:"insert",level:2},{value:"Insert One Record",id:"insert-one-record",level:3},{value:"Insert Multiple Records",id:"insert-multiple-records",level:3},{value:"Insert Query Results (INSERT SELECT)",id:"insert-query-results-insert-select",level:3},{value:"Data Query",id:"data-query",level:2},{value:"Sample Data",id:"sample-data",level:3},{value:"Download Data",id:"download-data",level:3},{value:"Import Data",id:"import-data",level:3},{value:"<strong>SQL Syntax</strong>",id:"sql-syntax",level:2},{value:"<strong>SELECT Clause</strong>",id:"select-clause",level:3},{value:"SELECT *",id:"select-",level:3},{value:"ALL/DISTINCT",id:"alldistinct",level:3},{value:"Alias",id:"alias",level:3},{value:"Alias Column Expression",id:"alias-column-expression",level:3},{value:"Alias Table",id:"alias-table",level:3},{value:"SELECT Limitation",id:"select-limitation",level:3},{value:"LIMIT Clause",id:"limit-clause",level:3},{value:"<strong>OFFSET Clause</strong>",id:"offset-clause",level:3},{value:"<strong>WITH Clause</strong>",id:"with-clause",level:3},{value:"<strong>UNION Clause</strong>",id:"union-clause",level:3},{value:"ORDER BY Clause",id:"order-by-clause",level:3},{value:"<strong>IN</strong>",id:"in",level:3},{value:"<strong>SHOW</strong>",id:"show",level:3},{value:"<strong>EXPLAIN</strong>",id:"explain",level:3},{value:"<strong>DESCRIBE</strong>",id:"describe",level:3},{value:"<strong>Join Clause</strong>",id:"join-clause",level:3},{value:"Join Operation",id:"join-operation",level:3},{value:"INNER JOIN",id:"inner-join",level:3},{value:"LEFT JOIN",id:"left-join",level:3},{value:"RIGHT JOIN",id:"right-join",level:3},{value:"FULL JOIN",id:"full-join",level:3},{value:"GROUP BY Clause",id:"group-by-clause",level:3},{value:"HAVING Clause",id:"having-clause",level:3},{value:"<strong>Complex Grouping Operation</strong>",id:"complex-grouping-operation",level:2},{value:"<strong>ROLLUP</strong>",id:"rollup",level:3},{value:"<strong>CUBE</strong>",id:"cube",level:3},{value:"Aggregate Function",id:"aggregate-function",level:2},{value:"<strong>Common Aggregate Functions</strong>",id:"common-aggregate-functions",level:3},{value:"<strong>COUNT</strong>",id:"count",level:3},{value:"<strong>SUM</strong>",id:"sum",level:3},{value:"<strong>MIN</strong>",id:"min",level:3},{value:"<strong>MAX</strong>",id:"max",level:3},{value:"<strong>AVG</strong>",id:"avg",level:3},{value:"<strong>ARRAY_AGG</strong>",id:"array_agg",level:3},{value:"<strong>Statistical Aggregate Functions</strong>",id:"statistical-aggregate-functions",level:3},{value:"<strong>VAR | VAR_SAMP</strong>",id:"var--var_samp",level:3},{value:"<strong>VAR_POP</strong>",id:"var_pop",level:3},{value:"<strong>STDDEV | STDDEV_SAMP</strong>",id:"stddev--stddev_samp",level:3},{value:"<strong>STDDEV_POP</strong>",id:"stddev_pop",level:3},{value:"<strong>COVAR | COVAR_SAMP</strong>",id:"covar--covar_samp",level:3},{value:"<strong>COVAR_POP</strong>",id:"covar_pop",level:3},{value:"<strong>CORR</strong>",id:"corr",level:3},{value:"<strong>Approximate Aggregate Functions</strong>",id:"approximate-aggregate-functions",level:2},{value:"<strong>APPROX_DISTINCT</strong>",id:"approx_distinct",level:3},{value:"<strong>APPROX_PERCENTILE_CONT</strong>",id:"approx_percentile_cont",level:3},{value:"<strong>APPROX_PERCENTILE_CONT_WITH_WEIGHT</strong>",id:"approx_percentile_cont_with_weight",level:3},{value:"<strong>APPROX_MEDIAN</strong>(NUMERICS)",id:"approx_mediannumerics",level:3},{value:"Functions",id:"functions",level:2},{value:"<strong>Mathematical Functions</strong>",id:"mathematical-functions",level:3},{value:"<strong>abs(x)</strong>",id:"absx",level:3},{value:"<strong>acos(x)</strong>",id:"acosx",level:3},{value:"<strong>asin(x)</strong>",id:"asinx",level:3},{value:"<strong>atan(x)</strong>",id:"atanx",level:3},{value:"<strong>atan2(y,x)</strong>",id:"atan2yx",level:3},{value:"<strong>ceil(x)</strong>",id:"ceilx",level:3},{value:"<strong>floor(x)</strong>",id:"floorx",level:3},{value:"<strong>cos(x)</strong>",id:"cosx",level:3},{value:"<strong>sin(x)</strong>",id:"sinx",level:3},{value:"<strong>exp(x)</strong>",id:"expx",level:3},{value:"<strong>ln(x)</strong>",id:"lnx",level:3},{value:"<strong>log(x) | log10(x)</strong>",id:"logx--log10x",level:3},{value:"<strong>log2(x)</strong>",id:"log2x",level:3},{value:"<strong>power(x,y) | pow(x,y)</strong>",id:"powerxy--powxy",level:3},{value:"<strong>round(x)</strong>",id:"roundx",level:3},{value:"<strong>signum(x)</strong>",id:"signumx",level:3},{value:"<strong>sqrt(x)</strong>",id:"sqrtx",level:3},{value:"<strong>tan(x)</strong>",id:"tanx",level:3},{value:"<strong>trunc(x)</strong>",id:"truncx",level:3},{value:"<strong>struct</strong>",id:"struct",level:3},{value:"<strong>Conditional Functions</strong>",id:"conditional-functions",level:3},{value:"<strong>coalesce</strong>",id:"coalesce",level:3},{value:"<strong>nullif</strong>",id:"nullif",level:3},{value:"<strong>String Functions</strong>",id:"string-functions",level:3},{value:"<strong>ascii</strong>",id:"ascii",level:3},{value:"<strong>bit_length</strong>",id:"bit_length",level:3},{value:"<strong>btrim</strong>",id:"btrim",level:3},{value:"<strong>trim</strong>",id:"trim",level:3},{value:"<strong>char_length | character_length</strong>",id:"char_length--character_length",level:3},{value:"<strong>chr</strong>",id:"chr",level:3},{value:"<strong>con``cat</strong>",id:"concat",level:3},{value:"<strong>concat_ws</strong>",id:"concat_ws",level:3},{value:"<strong>initcap</strong>",id:"initcap",level:3},{value:"<strong>left</strong>",id:"left",level:3},{value:"<strong>lpad</strong>",id:"lpad",level:3},{value:"<strong>rpad</strong>",id:"rpad",level:3},{value:"<strong>lower</strong>",id:"lower",level:3},{value:"<strong>upper</strong>",id:"upper",level:3},{value:"<strong>ltrim</strong>",id:"ltrim",level:3},{value:"<strong>md5</strong>",id:"md5",level:3},{value:"<strong>octet_length</strong>",id:"octet_length",level:3},{value:"<strong>random</strong>",id:"random",level:3},{value:"<strong>repeat</strong>",id:"repeat",level:3},{value:"<strong>replace</strong>",id:"replace",level:3},{value:"<strong>reverse</strong>",id:"reverse",level:3},{value:"<strong>right</strong>",id:"right",level:3},{value:"<strong>digest</strong>",id:"digest",level:3},{value:"<strong>rtrim</strong>",id:"rtrim",level:3},{value:"<strong>sha224</strong>",id:"sha224",level:3},{value:"<strong>sha256</strong>",id:"sha256",level:3},{value:"<strong>sha384</strong>",id:"sha384",level:3},{value:"<strong>sha512</strong>",id:"sha512",level:3},{value:"<strong>split_part</strong>",id:"split_part",level:3},{value:"<strong>starts_with</strong>",id:"starts_with",level:3},{value:"<strong>strpos</strong>",id:"strpos",level:3},{value:"<strong>substr</strong>",id:"substr",level:3},{value:"<strong>to_hex</strong>",id:"to_hex",level:3},{value:"<strong>translate</strong>",id:"translate",level:3},{value:"Time Functions",id:"time-functions",level:3},{value:"<strong>date_part</strong>",id:"date_part",level:3},{value:"<strong>date_trunc</strong>",id:"date_trunc",level:3},{value:"<strong>date_bin</strong>",id:"date_bin",level:3},{value:"<strong>to_timestamp</strong>",id:"to_timestamp",level:3},{value:"<strong>to_timestamp_millis</strong>",id:"to_timestamp_millis",level:3},{value:"<strong>to_timestamp_micros</strong>",id:"to_timestamp_micros",level:3},{value:"<strong>to_timestamp_seconds</strong>",id:"to_timestamp_seconds",level:3},{value:"<strong>from_unixtime</strong>",id:"from_unixtime",level:3},{value:"<strong>now</strong>",id:"now",level:3},{value:"Window Functions",id:"window-functions",level:3},{value:"Syntax",id:"syntax",level:3},{value:"Function Types",id:"function-types",level:3},{value:"Rank Functions",id:"rank-functions",level:4},{value:"Aggregate Function",id:"aggregate-function-1",level:4},{value:"Analysis Window Functions",id:"analysis-window-functions",level:4},{value:"PARTITION BY Clause",id:"partition-by-clause",level:3},{value:"ORDER BY Clause",id:"order-by-clause-1",level:3},{value:"Window_frame Clause",id:"window_frame-clause",level:3},{value:"Restrictions on Usage",id:"restrictions-on-usage",level:3},{value:"Window Function List",id:"window-function-list",level:2},{value:"<strong>ROW_NUMBER</strong>",id:"row_number",level:3},{value:"<strong>RANK</strong>",id:"rank",level:3},{value:"<strong>DENSE_RANK</strong>",id:"dense_rank",level:3},{value:"<strong>PERCENT_RANK</strong>",id:"percent_rank",level:3},{value:"<strong>CUME_DIST</strong>",id:"cume_dist",level:3},{value:"<strong>LAG</strong>",id:"lag",level:3},{value:"<strong>LEAD</strong>",id:"lead",level:3},{value:"<strong>FIRST_VALUE</strong>",id:"first_value",level:3},{value:"<strong>LAST_VALUE</strong>",id:"last_value",level:3},{value:"<strong>NTH_VALUE</strong>",id:"nth_value",level:3},{value:"System Schema",id:"system-schema",level:2},{value:"CLUSTER_SCHEMA",id:"cluster_schema",level:3},{value:"TENANTS",id:"tenants",level:3},{value:"Schema Definition",id:"schema-definition",level:4},{value:"USERS",id:"users",level:3},{value:"Schema Definition",id:"schema-definition-1",level:4},{value:"INFORMATION_SCHEMA",id:"information_schema",level:3},{value:"DATABASES",id:"databases",level:3},{value:"Schema Definition",id:"schema-definition-2",level:4},{value:"TABLES",id:"tables",level:3},{value:"Schema Definition",id:"schema-definition-3",level:4},{value:"COLUMNS",id:"columns",level:3},{value:"Schema Definition",id:"schema-definition-4",level:4},{value:"ENABLED_ROLES",id:"enabled_roles",level:3},{value:"Schema Definition",id:"schema-definition-5",level:4},{value:"Example",id:"example",level:4},{value:"ROLES",id:"roles",level:3},{value:"Schema Definition",id:"schema-definition-6",level:4},{value:"DATABASE_PRIVILEGES",id:"database_privileges",level:3},{value:"Schema Definition",id:"schema-definition-7",level:4},{value:"MEMBERS",id:"members",level:3},{value:"Schema Definition",id:"schema-definition-8",level:4},{value:"QUERIES(INFORMATION_SCHEMA)",id:"queriesinformation_schema",level:3},{value:"Schema Definition",id:"schema-definition-9",level:4},{value:"SHOW QUERIES",id:"show-queries",level:4},{value:"USAGE_SCHEMA",id:"usage_schema",level:2},{value:"DISK_STORAGE",id:"disk_storage",level:3},{value:"Schema Definition",id:"schema-definition-10",level:4},{value:"Example",id:"example-1",level:4},{value:"DATA_IN",id:"data_in",level:3},{value:"Schema definition",id:"schema-definition-11",level:4},{value:"Example",id:"example-2",level:4},{value:"DATA_OUT",id:"data_out",level:3},{value:"Schema definition",id:"schema-definition-12",level:4},{value:"Example",id:"example-3",level:4},{value:"QUERIES (USAGE_SCHEMA)",id:"queries-usage_schema",level:3},{value:"Schema definition",id:"schema-definition-13",level:4},{value:"Example",id:"example-4",level:4},{value:"WRITES",id:"writes",level:3},{value:"Schema definition",id:"schema-definition-14",level:4},{value:"Example",id:"example-5",level:4},{value:"KILL QUERY",id:"kill-query",level:2},{value:"Syntax",id:"syntax-1",level:4},{value:"Examples",id:"examples",level:4}],u={toc:s},m="wrapper";function k(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sql-reference"},"SQL Reference"),(0,r.kt)("h2",{id:"database"},"Database"),(0,r.kt)("h3",{id:"data-types"},"Data Types"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Size"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BIGINT"),(0,r.kt)("td",{parentName:"tr",align:null},"Integer"),(0,r.kt)("td",{parentName:"tr",align:null},"8 Bytes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BIGINT UNSIGNED"),(0,r.kt)("td",{parentName:"tr",align:null},"Unsigned Integer"),(0,r.kt)("td",{parentName:"tr",align:null},"8 Bytes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BOOLEAN"),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean Type"),(0,r.kt)("td",{parentName:"tr",align:null},"1 Byte")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TIMESTAMP"),(0,r.kt)("td",{parentName:"tr",align:null},"Time Stamp"),(0,r.kt)("td",{parentName:"tr",align:null},"8 Bytes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"UTF-8 Encoded String"),(0,r.kt)("td",{parentName:"tr",align:null},"-----")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"Double Precision Floating Point"),(0,r.kt)("td",{parentName:"tr",align:null},"8 Bytes")))),(0,r.kt)("h4",{id:"other-data-types"},"Other Data Types"),(0,r.kt)("p",null,"The following data types can't be stored directly, but can appear in SQL expressions."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Remarks"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BINARY"),(0,r.kt)("td",{parentName:"tr",align:null},"Binary data,can be converted to STRING using Cast clause."),(0,r.kt)("td",{parentName:"tr",align:null},"The return values of functions sha224, sha256, sha384, sha512 belong to this type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"INTERVAL"),(0,r.kt)("td",{parentName:"tr",align:null},"Time Interval"),(0,r.kt)("td",{parentName:"tr",align:null},"Required by time addition or subtraction and function data_bin's parameters.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ARRAY"),(0,r.kt)("td",{parentName:"tr",align:null},"Array Type"),(0,r.kt)("td",{parentName:"tr",align:null},"Aggregate function array_agg's return type .")))),(0,r.kt)("h4",{id:"constant"},"Constant"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BIGINT"),(0,r.kt)("td",{parentName:"tr",align:null},"[","{+","-","}","]","123"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BIGINT UNSIGNED"),(0,r.kt)("td",{parentName:"tr",align:null},"[","+]123"),(0,r.kt)("td",{parentName:"tr",align:null},"Numeric type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"123.45"),(0,r.kt)("td",{parentName:"tr",align:null},"Numerical type, scientific notation is not supported at present.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BOOLEAN"),(0,r.kt)("td",{parentName:"tr",align:null},"{true ","|"," false ","|"," t ","|"," f}"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"'abc'"),(0,r.kt)("td",{parentName:"tr",align:null},"The double quotation mark format is not supported. Two consecutive '' in")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TIMESTAMP"),(0,r.kt)("td",{parentName:"tr",align:null},"TIMESTAMP '1900-01-01T12:00:00Z'"),(0,r.kt)("td",{parentName:"tr",align:null},"Timestamp, the keyword TIMESTAMP indicates that the following string constant need to be interpreted as TIMESTAMP type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"--"),(0,r.kt)("td",{parentName:"tr",align:null},"NULL"),(0,r.kt)("td",{parentName:"tr",align:null},"Null Value")))),(0,r.kt)("h4",{id:"timestamp-constant-syntax"},"TIMESTAMP constant syntax"),(0,r.kt)("p",null,"The time stamp is based on RCF3339 standard."),(0,r.kt)("p",null,"T represents interval, which can only be replaced by space"),(0,r.kt)("p",null,"Z represents zero time zone"),(0,r.kt)("p",null,"+08:00 represents the East 8th District"),(0,r.kt)("p",null,"as follows\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1997-01-31T09:26:56.123Z")," # Standard RCF3339, UTC time zone"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1997-01-31T09:26:56.123+08:00")," # Standard RCF3339, East 8th District"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1997-01-31 09:26:56.123+08:00")," # Close to RCF3339, just replace T by space"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1997-01-31T09:26:56.123")," # Close to RCF3339, no time zone is specified, defaults to UTC"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1997-01-31 09:26:56.123")," # Close to RCF3339, replace T by space, and no time zone is specified"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1997-01-31 09:26:56"),"     # Close to RCF3339, replace T by space, and no time zone is specified")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),"\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},"CAST (BIGINT AS TIMESTAMP)"),"is a timestamp converted to nanosecond, as follows"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT CAST (1 AS TIMESTAMP);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------------------------+\n| Int64(1)                      |\n+-------------------------------+\n| 1970-01-01T00:00:00.000000001 |\n+-------------------------------+\n")),(0,r.kt)("h4",{id:"interval-constant-syntax"},"INTERVAL Constant Syntax"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"INTERVAL '1' DAY")," One day"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"INTERVAL '1' MONTH")," One month"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"INTERVAL '1' HOUR")," One hour"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"INTERVAL '1' MINS")," One minute"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"INTERVAL '1' YEAR")," One year"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"INTERVAL '1' SECS")," One second")),(0,r.kt)("h3",{id:"create-database"},"Create Database"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DATABASE [IF NOT EXISTS] db_name [WITH db_options];\n\ndb_options:\n    db_option ...\n\ndb_option: {\n      TTL value\n    | SHARD value\n    | VNODE_DURATION value\n    | REPLICA value\n    | PRECISION {'ms' | 'us' | 'ns'}\n}\n")),(0,r.kt)("h4",{id:"parameters-description"},"Parameters Description"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"TTL\uff1a represents the saving time of the data file, defaults to 365 days, expressed in data with units. It supports day\uff08d\uff09\uff0chour\uff08h\uff09\uff0cminute\uff08m\uff09\uff0csuch as TTL 10d\uff0cTTL 50h\uff0cTTL 100m.When no unit, the default is day, such as TTL 30."),(0,r.kt)("li",{parentName:"ol"},"SHARD\uff1arepresents the number of data partitions\uff0cdefaults to 1."),(0,r.kt)("li",{parentName:"ol"},"VNODE_DURATION\uff1arepresents the time range of data in the shard\uff0cdefaults to 365 days\uff0cand also expressed by data with units.Its data meaning is consistent with the value of TTL."),(0,r.kt)("li",{parentName:"ol"},"REPLICA\uff1arepresents the number of replicas of data in the cluster\uff0cdefaults to 1"),(0,r.kt)("li",{parentName:"ol"},"PRECISION\uff1aThe timestamp accuracy of the database. ms represents milliseconds, us represents microseconds, ns represents nanoseconds,defaults to ns.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"> CREATE DATABASE oceanic_station;\nQuery took 0.062 seconds.\n")),(0,r.kt)("h3",{id:"show-all-databases"},"Show All Databases"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SHOW DATABASES;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-----------------+\n| Database        |\n+-----------------+\n| oceanic_station |\n| public          |\n+-----------------+\n")),(0,r.kt)("h3",{id:"use-database"},(0,r.kt)("strong",{parentName:"h3"},"Use Database")),(0,r.kt)("p",null,"If you use the database through ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/rest_api"},"HTTP API"),", you can specify the parameter db=database_ name in the url to use the database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"\\c dbname\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"public \u276f \\c oceanic_station\noceanic_station \u276f\n")),(0,r.kt)("h3",{id:"drop-database"},"Drop Database"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DROP DATABASE [IF EXISTS] db_name;\n")),(0,r.kt)("p",null,"If dropping database, all table data and metadata of the specified database will be removed."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DROP DATABASE oceanic_station;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Query took 0.030 seconds.\n")),(0,r.kt)("h3",{id:"alter-database-parameters"},(0,r.kt)("strong",{parentName:"h3"},"Alter Database Parameters")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER DATABASE db_name [alter_db_options]\n\nalter_db_options:\n    SET db_option\n\ndb_option: {\n      TTL value\n    | SHARD value\n    | VNODE_DURATION value\n    | REPLICA value\n    | PRECISION {'ms' | 'us' | 'ns'}\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER DATABASE oceanic_station SET TTL '30d';\n")),(0,r.kt)("h3",{id:"describe-database-parameters"},(0,r.kt)("strong",{parentName:"h3"},"Describe Database Parameters")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DESCRIBE DATABASE dbname;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DESCRIBE DATABASE oceanic_station;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------+-------+----------------+---------+-----------+\n| TTL      | SHARD | VNODE_DURATION | REPLICA | PRECISION |\n+----------+-------+----------------+---------+-----------+\n| 365 Days | 1     | 365 Days       | 1       | NS        |\n+----------+-------+----------------+---------+-----------+\n")),(0,r.kt)("h2",{id:"table"},"Table"),(0,r.kt)("h3",{id:"create-table"},"Create Table"),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"CREATE TABLE"),"  to create tables"),(0,r.kt)("p",null,"CnosDB supports the creation of common tables and external tables"),(0,r.kt)("h3",{id:"create-common-table"},"Create Common Table"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE [IF NOT EXISTS] tb_name\n(field_definition [, field_definition] ...TAGS(tg_name [, tg_name] ...));\n\nfield_definition:\n    column_name data_type [field_codec_type]\n    \nfield_codec_type:\n    CODEC(code_type)\n")),(0,r.kt)("h4",{id:"instructions"},"Instructions"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},'There is no need to create a timestamp column when creating a table. The system automatically adds a timestamp column named "time".'),(0,r.kt)("li",{parentName:"ol"},"The names of the columns need to be different."),(0,r.kt)("li",{parentName:"ol"},"If the compression algorithm is not specified when creating a table, the system default compression algorithm is used."),(0,r.kt)("li",{parentName:"ol"},"At present, the compression algorithms supported by various types are as follows. The first one of each type is the default specified algorithm. NULL means no compression algorithm is used.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"BIGINT/BIGINT UNSIGNED\uff1aDELTA\uff0cQUANTILE\uff0cNULL"),(0,r.kt)("li",{parentName:"ul"},"DOUBLE\uff1aGORILLA\uff0cQUANTILE\uff0cNULL"),(0,r.kt)("li",{parentName:"ul"},"STRING\uff1aSNAPPY\uff0cZSTD\uff0cGZIP\uff0cBZIP\uff0cZLIB\uff0cNULL"),(0,r.kt)("li",{parentName:"ul"},"BOOLEAN\uff1aBIPACK\uff0cNULL")),(0,r.kt)("p",null,"For more information about the compression algorithm, see the details of the ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/design#compression-algorithm"},"compression algorithm"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE air (\n   visibility DOUBLE,\n   temperature DOUBLE,\n   presssure DOUBLE,\n   TAGS(station)\n);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Query took 0.033 seconds.\n")),(0,r.kt)("h3",{id:"create-external-table"},(0,r.kt)("strong",{parentName:"h3"},"Create External Table")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- Column definitions can not be specified for PARQUET files\n\nCREATE EXTERNAL TABLE [ IF NOT EXISTS ] tb_name \n    ( field_definition [, field_definition] ... ) tb_option;\n\nfield_definition:\n    column_name data_type [ NULL ]\n\ntb_option: {\n      STORED AS { PARQUET | NDJSON | CSV | AVRO }\n    | [ WITH HEADER ROW ]\n    | [ DELIMITER 'a_single_char' ]\n    | [ PARTITIONED BY ( column_name, [, ... ] ) ]\n    | LOCATION '/path/to/file'\n}\n")),(0,r.kt)("h4",{id:"instruction"},"Instruction"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"External tables do not exist in the database, but an operating system file is accessed as a common database table."),(0,r.kt)("li",{parentName:"ol"},"The data is read-only and cannot be DML operated or indexed.")),(0,r.kt)("h4",{id:"parameter-description"},"Parameter Description"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"STORE AS\uff1arepresents the format in which the file is stored. Currently, PARQUET, NDJSON, CSV and AVRO formats are supported."),(0,r.kt)("li",{parentName:"ol"},"WITH HEADER ROW\uff1aEffective only in csv file format, representing with csv header."),(0,r.kt)("li",{parentName:"ol"},"DELIMITER\uff1aonly effective in csv format, representing the delimiter of column data."),(0,r.kt)("li",{parentName:"ol"},"PARTITIONED BY\uff1ause the column specified when creating the table to partition."),(0,r.kt)("li",{parentName:"ol"},"LOCATION\uff1arepresents the location of the associated file")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE EXTERNAL TABLE cpu (\n     cpu_hz  DECIMAL(10,6) NOT NULL,\n     temp  DOUBLE NOT NULL,\n     version_num  BIGINT NOT NULL,\n     is_old  BOOLEAN NOT NULL,\n     weight  DECIMAL(12,7) NOT NULL\n)\nSTORED AS CSV\nWITH HEADER ROW\nLOCATION 'tests/data/csv/cpu.csv';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Query took 0.031 seconds.\n")),(0,r.kt)("h3",{id:"drop-table"},(0,r.kt)("strong",{parentName:"h3"},"Drop Table")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DROP TABLE [ IF EXISTS ] tb_name;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DROP TABLE IF EXISTS air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Query took 0.033 seconds.\n")),(0,r.kt)("h3",{id:"show-tables-of-current-database"},(0,r.kt)("strong",{parentName:"h3"},"Show Tables of Current Database")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SHOW TABLES;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------+\n| Table |\n+-------+\n| sea   |\n| air   |\n| wind  |\n+-------+\n")),(0,r.kt)("h3",{id:"describe-table"},"Describe Table"),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"DESCRIBE TABLE")," to view the table structure."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DESCRIBE DATABASE table_name;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DESCRIBE TABLE air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+-----------+-------+-------------+\n| FIELDNAME   | TYPE      | ISTAG | COMPRESSION |\n+-------------+-----------+-------+-------------+\n| time        | TIMESTAMP | false | Default     |\n| station     | STRING    | true  | Default     |\n| visibility  | DOUBLE    | false | Default     |\n| temperature | DOUBLE    | false | Default     |\n| pressure    | DOUBLE    | false | Default     |\n+-------------+-----------+-------+-------------+\n")),(0,r.kt)("h3",{id:"alter-table"},(0,r.kt)("strong",{parentName:"h3"},"Alter Table")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Explanation"),"\nAt present, we support altering common tables."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Add Column: add field and tag columns."),(0,r.kt)("li",{parentName:"ol"},"Drop Column: drop the field column. When dropping a column results in dropping the last field value of a row, we think that this row has no value, and this row will not be showed in SELECT."),(0,r.kt)("li",{parentName:"ol"},"Alter Column: alter the column definition. Currently, the compression algorithm for altering columns is supported.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE tb_name alter_table_option;\n\nalter_table_option: {\n      ADD TAG col_name\n    | ADD FIELD col_name [CODEC(code_type)]\n    | ALTER col_name SET CODEC(code_type)\n    | DROP col_name\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE air ADD TAG height;\nALTER TABLE air ADD FIELD humidity DOUBLE CODEC(DEFAULT);\nALTER TABLE air ALTER humidity SET CODEC(QUANTILE);\nALTER TABLE air DROP humidity;\n")),(0,r.kt)("h2",{id:"insert"},"INSERT"),(0,r.kt)("p",null,"CnosDB supports two data inserting methods: one is to use the",(0,r.kt)("inlineCode",{parentName:"p"},"INSERT INTO"),"statement, and the other is to use the HTTP API ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/rest_api"},"write")," interface to insert Line Protocol format data."),(0,r.kt)("p",null,"This page only shows",(0,r.kt)("inlineCode",{parentName:"p"},"INSERT"),"related syntax"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT [INTO] tb_name [ ( column_name [, ...] ) ] VALUES (  const [, ...] ) [, ...] | query; \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Explanation")),(0,r.kt)("p",null,"CnosDB requires that the inserted data column must have a timestamp, and the VALUES list must be a ",(0,r.kt)("a",{parentName:"p",href:"#constant"},"constant"),".\nIf a column is not selected, the value is",(0,r.kt)("inlineCode",{parentName:"p"},"NULL"),"\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note")),(0,r.kt)("p",null,"The time column cannot be",(0,r.kt)("inlineCode",{parentName:"p"},"NULL"),"\uff0cand the Tag column and Field Namecolumn can be ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL"),"\u3002"),(0,r.kt)("p",null,"Example",(0,r.kt)("inlineCode",{parentName:"p"},"INSERT INTO air (TIME, station, visibility) VALUES(1666132800000000000, NULL, NULL)")),(0,r.kt)("p",null,"If the VALUES list requires an expression, please use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/sql#insert-query-results--insert-select-"},"INSERT SELECT")," syntax."),(0,r.kt)("h3",{id:"insert-one-record"},"Insert One Record"),(0,r.kt)("p",null,"Please note that data in the TIME column can be represented by either a time string or a numeric timestamp."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE air (\n    visibility DOUBLE,\n    temperature DOUBLE,\n    pressure DOUBLE,\n    TAGS(station)\n);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Query took 0.027 seconds.\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO air (TIME, station, visibility, temperature, pressure) VALUES\n                (1666165200290401000, 'XiaoMaiDao', 56, 69, 77);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+------+\n| rows |\n+------+\n| 1    |\n+------+\nQuery took 0.044 seconds.\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO air (TIME, station, visibility, temperature, pressure) VALUES\n                ('2022-10-19 06:40:00', 'XiaoMaiDao', 55, 68, 76);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+------+\n| rows |\n+------+\n| 1    |\n+------+\nQuery took 0.032 seconds.\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------------+------------+------------+-------------+-----------+\n| time                       | station    | visibility | temperature | pressure |\n+----------------------------+------------+------------+-------------+-----------+\n| 2022-10-18 22:40:00        | XiaoMaiDao | 55         | 68          | 76        |\n| 2022-10-19 07:40:00.290401 | XiaoMaiDao | 56         | 69          | 77        |\n+----------------------------+------------+------------+-------------+-----------+\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note\uff1a")),(0,r.kt)("p",null,"The time represented by the string is considered as the local time zone and will be converted to the timestamp of UTC time zone."),(0,r.kt)("p",null,"The time of UTC time zone will be output when outputting."),(0,r.kt)("h3",{id:"insert-multiple-records"},"Insert Multiple Records"),(0,r.kt)("p",null,"The keyword VALUES can be followed by multiple lists separated by \u2019,\u2019."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO air (TIME, station, visibility, temperature, pressure) VALUES\n                ('2022-10-19 05:40:00', 'XiaoMaiDao', 55, 68, 76), \n                ('2022-10-19 04:40:00', 'XiaoMaiDao', 55, 68, 76);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+------+\n| rows |\n+------+\n| 2    |\n+------+\nQuery took 0.037 seconds.\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------------+------------+------------+-------------+-----------+\n| time                       | station    | visibility | temperature | pressure |\n+----------------------------+------------+------------+-------------+-----------+\n| 2022-10-18 20:40:00        | XiaoMaiDao | 55         | 68          | 76        |\n| 2022-10-18 21:40:00        | XiaoMaiDao | 55         | 68          | 76        |\n| 2022-10-18 22:40:00        | XiaoMaiDao | 55         | 68          | 76        |\n| 2022-10-19 07:40:00.290401 | XiaoMaiDao | 56         | 69          | 77        |\n+----------------------------+------------+------------+-------------+-----------+\n")),(0,r.kt)("h3",{id:"insert-query-results-insert-select"},"Insert Query Results (INSERT SELECT)"),(0,r.kt)("p",null,"You can also use INSERT SELECT to insert query data into the table."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE air_visibility (\n                              visibility DOUBLE,\n                              TAGS(station)\n);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Query took 0.027 seconds.\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT air_visibility (TIME, station, visibility)\nSELECT TIME, station, visibility FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+------+\n| rows |\n+------+\n| 4    |\n+------+\nQuery took 0.045 seconds.\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM air_visibility;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------------+------------+------------+\n| time                       | station    | visibility |\n+----------------------------+------------+------------+\n| 2022-10-18 20:40:00        | XiaoMaiDao | 55         |\n| 2022-10-18 21:40:00        | XiaoMaiDao | 55         |\n| 2022-10-18 22:40:00        | XiaoMaiDao | 55         |\n| 2022-10-19 07:40:00.290401 | XiaoMaiDao | 56         |\n+----------------------------+------------+------------+\n")),(0,r.kt)("h2",{id:"data-query"},"Data Query"),(0,r.kt)("p",null,"CnosDBSQL is inspired by ",(0,r.kt)("a",{parentName:"p",href:"https://arrow.apache.org/datafusion/user-guide/introduction.html"},"DataFusion"),"\uff0cWe support most of the SQL syntax of DataFusion."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),"\uff1aIn order to query more efficiently, the order of each row may not be the same for queries without specified sorting"),(0,r.kt)("h3",{id:"sample-data"},"Sample Data"),(0,r.kt)("p",null,"To further study CnosDB, this section will provide sample data for you to download and teach you how to import data into the database. The data sources referenced in the following chapters are all from this sample data."),(0,r.kt)("h3",{id:"download-data"},"Download Data"),(0,r.kt)("p",null,"If in cnosdb cli, enter",(0,r.kt)("inlineCode",{parentName:"p"},"\\q"),"to exit."),(0,r.kt)("p",null,"Executing the following command in the shell will generate a local data file named oceanic_station in Line Protocol format."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"wget https://fastdl.cnosdb.com/cpizkpfk/oceanic_station.txt\n")),(0,r.kt)("h3",{id:"import-data"},"Import Data"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Start the CLI"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cnosdb-cli\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Create the database")),(0,r.kt)("li",{parentName:"ul"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"create database oceanic_station;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Switch to the specified database")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"\\c oceanic_station\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Import data")),(0,r.kt)("p",{parentName:"li"},"Execute the \\w command, followed by the absolute path of the data file or the working path relative to cnosdb-cli."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"\\w oceanic_station.txt\n")))),(0,r.kt)("h2",{id:"sql-syntax"},(0,r.kt)("strong",{parentName:"h2"},"SQL Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"[ WITH with_query [, ...] ]\nSELECT [ ALL | DISTINCT ] select_expression [, ...]\n    [ FROM from_item [, ...] ]\n    [ WHERE condition ]\n    [ GROUP BY [ ALL | DISTINCT ] grouping_element [, ...] ]\n    [ HAVING condition ]\n    [ { UNION | INTERSECT | EXCEPT } [ ALL | DISTINCT ] select ]\n    [ ORDER BY expression [ ASC | DESC ] [, ...] ]\n    [ OFFSET count ]\n    [ LIMIT { count | ALL } ];\n\n-- from_item\n-- 1.\n    tb_name [ [ AS ] alias [ ( column_alias [, ...] ) ] ]\n-- 2.\n    from_item join_type from_item\n    { ON join_condition | USING ( join_column [, ...] ) }\n\n-- join_type\n    [ INNER ] JOIN\n    LEFT [ OUTER ] JOIN\n    RIGHT [ OUTER ] JOIN\n    FULL [ OUTER ] JOIN\n    CROSS JOIN\n\n-- grouping_element\n    ()\n")),(0,r.kt)("h3",{id:"select-clause"},(0,r.kt)("strong",{parentName:"h3"},"SELECT Clause")),(0,r.kt)("h3",{id:"select-"},"SELECT ","*"),(0,r.kt)("p",null,"The wildcard * can be used to refer to all columns."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------+-------------+------------+-------------+----------+\n| time                | station     | visibility | temperature | pressure |\n+---------------------+-------------+------------+-------------+----------+\n| 2022-01-28 13:21:00 | XiaoMaiDao  | 56         | 69          | 77       |\n| 2022-01-28 13:24:00 | XiaoMaiDao  | 50         | 78          | 66       |\n| 2022-01-28 13:27:00 | XiaoMaiDao  | 67         | 62          | 59       |\n| 2022-01-28 13:30:00 | XiaoMaiDao  | 65         | 79          | 77       |\n| 2022-01-28 13:33:00 | XiaoMaiDao  | 53         | 53          | 68       |\n| 2022-01-28 13:36:00 | XiaoMaiDao  | 74         | 72          | 68       |\n| 2022-01-28 13:39:00 | XiaoMaiDao  | 71         | 71          | 80       |\n| 2022-01-28 13:21:00 | LianYunGang | 78         | 69          | 71       |\n| 2022-01-28 13:24:00 | LianYunGang | 79         | 80          | 51       |\n| 2022-01-28 13:27:00 | LianYunGang | 59         | 74          | 59       |\n| 2022-01-28 13:30:00 | LianYunGang | 67         | 70          | 72       |\n| 2022-01-28 13:33:00 | LianYunGang | 80         | 70          | 68       |\n| 2022-01-28 13:36:00 | LianYunGang | 59         | 70          | 54       |\n+---------------------+-------------+------------+-------------+----------+\n")),(0,r.kt)("h3",{id:"alldistinct"},"ALL/DISTINCT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT [ ALL | DISTINCT ] select_expression [, ...];\n")),(0,r.kt)("p",null,"After the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT"),", you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"DISTINCT"),"to remove duplicate fields and return only the values after duplicate removal. Using ALL returns all duplicate values in the field. When this option is not specified, the default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"ALL"),"\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DISTINCT station, visibility FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+------------+\n| station     | visibility |\n+-------------+------------+\n| XiaoMaiDao  | 56         |\n| XiaoMaiDao  | 50         |\n| XiaoMaiDao  | 67         |\n| XiaoMaiDao  | 65         |\n| XiaoMaiDao  | 53         |\n| XiaoMaiDao  | 74         |\n| XiaoMaiDao  | 71         |\n| LianYunGang | 78         |\n| LianYunGang | 79         |\n| LianYunGang | 59         |\n| LianYunGang | 67         |\n| LianYunGang | 80         |\n+-------------+------------+\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station, visibility FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+------------+\n| station     | visibility |\n+-------------+------------+\n| XiaoMaiDao  | 56         |\n| XiaoMaiDao  | 50         |\n| XiaoMaiDao  | 67         |\n| XiaoMaiDao  | 65         |\n| XiaoMaiDao  | 53         |\n| XiaoMaiDao  | 74         |\n| XiaoMaiDao  | 71         |\n| LianYunGang | 78         |\n| LianYunGang | 79         |\n| LianYunGang | 59         |\n| LianYunGang | 67         |\n| LianYunGang | 80         |\n| LianYunGang | 59         |\n+-------------+------------+\n")),(0,r.kt)("h3",{id:"alias"},"Alias"),(0,r.kt)("p",null,"You can use the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"AS")," to alias a column expression or table."),(0,r.kt)("h3",{id:"alias-column-expression"},"Alias Column Expression"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"expression [ [ AS ] column_alias ]\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station s, visibility AS v FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+----+\n| s           | v  |\n+-------------+----+\n| XiaoMaiDao  | 56 |\n| XiaoMaiDao  | 50 |\n| XiaoMaiDao  | 67 |\n| XiaoMaiDao  | 65 |\n| XiaoMaiDao  | 53 |\n| XiaoMaiDao  | 74 |\n| XiaoMaiDao  | 71 |\n| LianYunGang | 78 |\n| LianYunGang | 79 |\n| LianYunGang | 59 |\n| LianYunGang | 67 |\n| LianYunGang | 80 |\n| LianYunGang | 59 |\n+-------------+----+\n")),(0,r.kt)("h3",{id:"alias-table"},"Alias Table"),(0,r.kt)("p",null,"You can also use the keyword AS to alias the table."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"FROM tb_name [AS] alias_name\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT a.visibility, s.temperature\nFROM air AS a JOIN sea s ON a.temperature = s.temperature;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+------------+-------------+\n| visibility | temperature |\n+------------+-------------+\n| 67         | 62          |\n| 50         | 78          |\n| 50         | 78          |\n| 65         | 79          |\n+------------+-------------+\n")),(0,r.kt)("h3",{id:"select-limitation"},"SELECT Limitation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If the SELECT clause contains a Time column, it must contain at least one Field Namecolumn."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- Only the time column cannot be queried\nSELECT time FROM air;\n")),(0,r.kt)("p",{parentName:"li"},"ERROR\uff1a"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'"{\\"error_code\\":\\"0100000\\",\\"error_message\\":\\"Error executiong query: Failed to do execute statement, err:Failed to do physical plan. err: External error: Invalid schema: If the projection contains the time column, it must contain the field column.\\"}"\n')))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- temperature is a field column\uff0ctime column accompanied by at least one field can be queried.\nSELECT time, temperature FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"  +---------------------+-------------+\n  | time                | temperature |\n  +---------------------+-------------+\n  | 2022-01-28T13:21:00 | 69          |\n  | 2022-01-28T13:24:00 | 78          |\n  | 2022-01-28T13:27:00 | 62          |\n  | 2022-01-28T13:30:00 | 79          |\n  | 2022-01-28T13:33:00 | 53          |\n  | 2022-01-28T13:36:00 | 72          |\n  | 2022-01-28T13:39:00 | 71          |\n  | 2022-01-28T13:21:00 | 69          |\n  | 2022-01-28T13:24:00 | 80          |\n  | 2022-01-28T13:27:00 | 74          |\n  | 2022-01-28T13:30:00 | 70          |\n  | 2022-01-28T13:33:00 | 70          |\n  | 2022-01-28T13:36:00 | 70          |\n  +---------------------+-------------+\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If the SELECT clause contains only the Tag column, it is equivalent to the SELECT DISTINCT Tag column."),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- station is a Tag column\uff0ctemperature is a Field Namecolumn.\nSELECT station, temperature FROM air;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"+-------------+-------------+\n| station     | temperature |\n+-------------+-------------+\n| XiaoMaiDao  | 69          |\n| XiaoMaiDao  | 78          |\n| XiaoMaiDao  | 62          |\n| XiaoMaiDao  | 79          |\n| XiaoMaiDao  | 53          |\n| XiaoMaiDao  | 72          |\n| XiaoMaiDao  | 71          |\n| LianYunGang | 69          |\n| LianYunGang | 80          |\n| LianYunGang | 74          |\n| LianYunGang | 70          |\n| LianYunGang | 70          |\n| LianYunGang | 70          |\n+-------------+-------------+\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- station is a Tag column\nSELECT station FROM air;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"+-------------+\n| station     |\n+-------------+\n| XiaoMaiDao  |\n| LianYunGang |\n+-------------+ \n")))),(0,r.kt)("h3",{id:"limit-clause"},"LIMIT Clause"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"LIMIT n\n")),(0,r.kt)("p",null,"Limit the number of rows returned from the result set to n, and n must be non-negative."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM air LIMIT 10;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------+-------------+------------+-------------+----------+\n| time                | station     | visibility | temperature | pressure |\n+---------------------+-------------+------------+-------------+----------+\n| 2022-01-28 13:21:00 | XiaoMaiDao  | 56         | 69          | 77       |\n| 2022-01-28 13:24:00 | XiaoMaiDao  | 50         | 78          | 66       |\n| 2022-01-28 13:27:00 | XiaoMaiDao  | 67         | 62          | 59       |\n| 2022-01-28 13:30:00 | XiaoMaiDao  | 65         | 79          | 77       |\n| 2022-01-28 13:33:00 | XiaoMaiDao  | 53         | 53          | 68       |\n| 2022-01-28 13:36:00 | XiaoMaiDao  | 74         | 72          | 68       |\n| 2022-01-28 13:39:00 | XiaoMaiDao  | 71         | 71          | 80       |\n| 2022-01-28 13:21:00 | LianYunGang | 78         | 69          | 71       |\n| 2022-01-28 13:24:00 | LianYunGang | 79         | 80          | 51       |\n| 2022-01-28 13:27:00 | LianYunGang | 59         | 74          | 59       |\n+---------------------+-------------+------------+-------------+----------+\n")),(0,r.kt)("h3",{id:"offset-clause"},(0,r.kt)("strong",{parentName:"h3"},"OFFSET Clause")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"OFFSET m\n")),(0,r.kt)("p",null,"The returned result set skips m records. default m=0."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM air OFFSET 10;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------+-------------+------------+-------------+----------+\n| time                | station     | visibility | temperature | pressure |\n+---------------------+-------------+------------+-------------+----------+\n| 2022-01-28 13:30:00 | LianYunGang | 67         | 70          | 72       |\n| 2022-01-28 13:33:00 | LianYunGang | 80         | 70          | 68       |\n| 2022-01-28 13:36:00 | LianYunGang | 59         | 70          | 54       |\n+---------------------+-------------+------------+-------------+----------+\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"OFFSET"),"can be used with the",(0,r.kt)("inlineCode",{parentName:"p"},"LIMIT"),"statement to specify the number of lines to skip.The format is ",(0,r.kt)("inlineCode",{parentName:"p"},"LIMIT n OFFSET m"),"\uff0cor it can be abbreviated as LIMIT n, m. LIMIT n controls the output of n rows of data, and OFFSET m indicates the number of rows skipped before starting to return data. OFFSET 0 has the same effect as omitting the OFFSET clause."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM air LIMIT 3 OFFSET 3;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------+------------+------------+-------------+----------+\n| time                | station    | visibility | temperature | pressure |\n+---------------------+------------+------------+-------------+----------+\n| 2022-01-28 13:30:00 | XiaoMaiDao | 65         | 79          | 77       |\n| 2022-01-28 13:33:00 | XiaoMaiDao | 53         | 53          | 68       |\n| 2022-01-28 13:36:00 | XiaoMaiDao | 74         | 72          | 68       |\n+---------------------+------------+------------+-------------+----------+\n")),(0,r.kt)("h3",{id:"with-clause"},(0,r.kt)("strong",{parentName:"h3"},"WITH Clause")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"WITH cte AS cte_query_definiton [, ...] query\n")),(0,r.kt)("p",null,"Optional. The WITH clause contains one or more commonly used expressions CTE (Common Table Expression). CTE acts as a temporary table in the current running environment, which you can refer to in subsequent queries.The rules for using CTE are as follows\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"CTE in the same WITH clause must have a unique name."),(0,r.kt)("li",{parentName:"ul"},"The CTE defined in the WITH clause can only be used for other CTEs in the same WITH clause defined later. Suppose A is the first CTE in the clause and B is the second CTE in the clause\uff1a")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station, avg \nFROM (  SELECT station, AVG(visibility) AS avg \n        FROM air \n        GROUP BY station) AS x;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+--------------------+\n| station     | avg                |\n+-------------+--------------------+\n| XiaoMaiDao  | 62.285714285714285 |\n| LianYunGang | 70.33333333333333  |\n+-------------+--------------------+\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"WITH x AS \n    (SELECT station, AVG(visibility) AS avg FROM air GROUP BY station)\nSELECT station, avg\nFROM x;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+--------------------+\n| station     | avg                |\n+-------------+--------------------+\n| XiaoMaiDao  | 62.285714285714285 |\n| LianYunGang | 70.33333333333333  |\n+-------------+--------------------+\n")),(0,r.kt)("h3",{id:"union-clause"},(0,r.kt)("strong",{parentName:"h3"},"UNION Clause")),(0,r.kt)("p",null,"The UNION clause is used to combine the analysis results of multiple SELECT statements."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select_clause_set_left\n[ UNION | UNION ALL| EXCEPT | INTERSECT]\nselect_clause_set_right\n[sort_list_columns] [limit_clause]\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"UNION"),"will de-duplicate the merged result set.\n",(0,r.kt)("inlineCode",{parentName:"p"},"UNION ALL"),"will retain the same data in the merged result set.\n",(0,r.kt)("inlineCode",{parentName:"p"},"EXCEPT")," will make the difference between the two result sets, return all non-duplicate values not found in the right query from the left query.\n",(0,r.kt)("inlineCode",{parentName:"p"},"INTERSECT")," returns the intersection of the two result sets (that means, all non-duplicate values are returned by both queries)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note")),(0,r.kt)("p",null,"Each SELECT clause in the UNION must have the same number of columns, and the corresponding columns have the same data type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Examples")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"UNION ALL")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT visibility FROM air WHERE temperature < 60\nUNION ALL\nSELECT visibility FROM air WHERE temperature > 50 LIMIT 10;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"+------------+\n| visibility |\n+------------+\n| 53         |\n| 56         |\n| 50         |\n| 67         |\n| 65         |\n| 53         |\n| 74         |\n| 71         |\n| 78         |\n| 79         |\n+------------+\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"UNION")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT visibility FROM air WHERE temperature < 60\nUNION\nSELECT visibility FROM air WHERE temperature > 50 LIMIT 10;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"+------------+\n| visibility |\n+------------+\n| 53         |\n| 56         |\n| 50         |\n| 67         |\n| 65         |\n| 74         |\n| 71         |\n| 78         |\n| 79         |\n| 59         |\n+------------+\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"EXCEPT")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT visibility FROM air\nEXCEPT\nSELECT visibility FROM air WHERE temperature < 50 LIMIT 10;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"+------------+\n| visibility |\n+------------+\n| 56         |\n| 50         |\n| 67         |\n| 65         |\n| 53         |\n| 74         |\n| 71         |\n| 78         |\n| 79         |\n| 59         |\n+------------+\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"INTERSECT")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT visibility FROM air\nINTERSECT\nSELECT visibility FROM air WHERE temperature > 50 LIMIT 10;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"+------------+\n| visibility |\n+------------+\n| 56         |\n| 50         |\n| 67         |\n| 65         |\n| 53         |\n| 74         |\n| 71         |\n| 78         |\n| 79         |\n| 59         |\n+------------+\n")))),(0,r.kt)("h3",{id:"order-by-clause"},"ORDER BY Clause"),(0,r.kt)("p",null,"Sort the results by the referenced expression. Ascending (ASC) is used by default. Sort in descending order by adding DESC after the expression of ORDER BY."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM air ORDER BY temperature;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------+-------------+------------+-------------+----------+\n| time                | station     | visibility | temperature | pressure |\n+---------------------+-------------+------------+-------------+----------+\n| 2022-01-28 13:33:00 | XiaoMaiDao  | 53         | 53          | 68       |\n| 2022-01-28 13:27:00 | XiaoMaiDao  | 67         | 62          | 59       |\n| 2022-01-28 13:21:00 | XiaoMaiDao  | 56         | 69          | 77       |\n| 2022-01-28 13:21:00 | LianYunGang | 78         | 69          | 71       |\n| 2022-01-28 13:30:00 | LianYunGang | 67         | 70          | 72       |\n| 2022-01-28 13:33:00 | LianYunGang | 80         | 70          | 68       |\n| 2022-01-28 13:36:00 | LianYunGang | 59         | 70          | 54       |\n| 2022-01-28 13:39:00 | XiaoMaiDao  | 71         | 71          | 80       |\n| 2022-01-28 13:36:00 | XiaoMaiDao  | 74         | 72          | 68       |\n| 2022-01-28 13:27:00 | LianYunGang | 59         | 74          | 59       |\n| 2022-01-28 13:24:00 | XiaoMaiDao  | 50         | 78          | 66       |\n| 2022-01-28 13:30:00 | XiaoMaiDao  | 65         | 79          | 77       |\n| 2022-01-28 13:24:00 | LianYunGang | 79         | 80          | 51       |\n+---------------------+-------------+------------+-------------+----------+\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM air ORDER BY temperature DESC;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------+-------------+------------+-------------+----------+\n| time                | station     | visibility | temperature | pressure |\n+---------------------+-------------+------------+-------------+----------+\n| 2022-01-28 13:24:00 | LianYunGang | 79         | 80          | 51       |\n| 2022-01-28 13:30:00 | XiaoMaiDao  | 65         | 79          | 77       |\n| 2022-01-28 13:24:00 | XiaoMaiDao  | 50         | 78          | 66       |\n| 2022-01-28 13:27:00 | LianYunGang | 59         | 74          | 59       |\n| 2022-01-28 13:36:00 | XiaoMaiDao  | 74         | 72          | 68       |\n| 2022-01-28 13:39:00 | XiaoMaiDao  | 71         | 71          | 80       |\n| 2022-01-28 13:30:00 | LianYunGang | 67         | 70          | 72       |\n| 2022-01-28 13:33:00 | LianYunGang | 80         | 70          | 68       |\n| 2022-01-28 13:36:00 | LianYunGang | 59         | 70          | 54       |\n| 2022-01-28 13:21:00 | XiaoMaiDao  | 56         | 69          | 77       |\n| 2022-01-28 13:21:00 | LianYunGang | 78         | 69          | 71       |\n| 2022-01-28 13:27:00 | XiaoMaiDao  | 67         | 62          | 59       |\n| 2022-01-28 13:33:00 | XiaoMaiDao  | 53         | 53          | 68       |\n+---------------------+-------------+------------+-------------+----------+\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM air ORDER BY station, temperature;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------+-------------+------------+-------------+----------+\n| time                | station     | visibility | temperature | pressure |\n+---------------------+-------------+------------+-------------+----------+\n| 2022-01-28 13:21:00 | LianYunGang | 78         | 69          | 71       |\n| 2022-01-28 13:30:00 | LianYunGang | 67         | 70          | 72       |\n| 2022-01-28 13:33:00 | LianYunGang | 80         | 70          | 68       |\n| 2022-01-28 13:36:00 | LianYunGang | 59         | 70          | 54       |\n| 2022-01-28 13:27:00 | LianYunGang | 59         | 74          | 59       |\n| 2022-01-28 13:24:00 | LianYunGang | 79         | 80          | 51       |\n| 2022-01-28 13:33:00 | XiaoMaiDao  | 53         | 53          | 68       |\n| 2022-01-28 13:27:00 | XiaoMaiDao  | 67         | 62          | 59       |\n| 2022-01-28 13:21:00 | XiaoMaiDao  | 56         | 69          | 77       |\n| 2022-01-28 13:39:00 | XiaoMaiDao  | 71         | 71          | 80       |\n| 2022-01-28 13:36:00 | XiaoMaiDao  | 74         | 72          | 68       |\n| 2022-01-28 13:24:00 | XiaoMaiDao  | 50         | 78          | 66       |\n| 2022-01-28 13:30:00 | XiaoMaiDao  | 65         | 79          | 77       |\n+---------------------+-------------+------------+-------------+----------+\n")),(0,r.kt)("h3",{id:"in"},(0,r.kt)("strong",{parentName:"h3"},"IN")),(0,r.kt)("p",null,"The IN operator allows you to specify multiple values in the WHERE clause."),(0,r.kt)("p",null,"*",(0,r.kt)("em",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station, temperature, visibility FROM air WHERE temperature  IN (68, 69);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+-------------+------------+\n| station     | temperature | visibility |\n+-------------+-------------+------------+\n| XiaoMaiDao  | 69          | 56         |\n| LianYunGang | 69          | 78         |\n+-------------+-------------+------------+\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note")),(0,r.kt)("p",null,"The IN list does not support expressions currently, but only constants."),(0,r.kt)("h3",{id:"show"},(0,r.kt)("strong",{parentName:"h3"},"SHOW")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SHOW {DATABASES | TABLES}\n")),(0,r.kt)("p",null,"Show all databases or all tables."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SHOW DATABASES;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------+\n| Database |\n+----------+\n| public   |\n+----------+\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SHOW TABLES;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------+\n| Table |\n+-------+\n| sea   |\n| air   |\n| wind  |\n+-------+\n")),(0,r.kt)("h3",{id:"explain"},(0,r.kt)("strong",{parentName:"h3"},"EXPLAIN")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"EXPLAIN [ ANALYZE ] [ VERBOSE ] <statement>;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Explanation")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"EXPLAIN")," is only used to display the execution plan of a query, and does not execute the query."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"EXPLAIN ANALYZE")," executes the query and displays the execution plan of the query."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"EXPLAIN ANALYZE VERBOSE")," executes the query and displays a more detailed execution plan, including the number of rows read."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"EXPLAIN SELECT station, temperature, visibility FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------+-----------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                        |\n+---------------+-----------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: #air.station, #air.temperature, #air.visibility                                                                 |\n|               |   TableScan: air projection=[station, visibility, temperature]                                                              |\n| physical_plan | ProjectionExec: expr=[station@0 as station, temperature@2 as temperature, visibility@1 as visibility]                       |\n|               |   TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({}) }, projection=[station,visibility,temperature] |\n|               |                                                                                                                             |\n+---------------+-----------------------------------------------------------------------------------------------------------------------------+\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"EXPLAIN ANALYZE SELECT station, temperature, visibility FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type         | plan                                                                                                                                                                                                                                                                                                                                    |\n+-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Plan with Metrics | ProjectionExec: expr=[station@0 as station, temperature@2 as temperature, visibility@1 as visibility], metrics=[output_rows=13, elapsed_compute=20.375\xb5s, spill_count=0, spilled_bytes=0, mem_used=0]                                                                                                                                   |\n|                   |   TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({}) }, projection=[station,visibility,temperature], metrics=[output_rows=13, elapsed_compute=15.929624ms, spill_count=0, spilled_bytes=0, mem_used=0, elapsed_series_scan=1.698791ms, elapsed_point_to_record_batch=4.572954ms, elapsed_field_scan=5.119076ms] |\n|                   |                                                                                                                                                                                                                                                                                                                                         |\n+-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"EXPLAIN ANALYZE SELECT station, temperature, visibility FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type         | plan                                                                                                                                                                                                                                                                                                                                    |\n+-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Plan with Metrics | ProjectionExec: expr=[station@0 as station, temperature@2 as temperature, visibility@1 as visibility], metrics=[output_rows=13, elapsed_compute=20.375\xb5s, spill_count=0, spilled_bytes=0, mem_used=0]                                                                                                                                   |\n|                   |   TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({}) }, projection=[station,visibility,temperature], metrics=[output_rows=13, elapsed_compute=15.929624ms, spill_count=0, spilled_bytes=0, mem_used=0, elapsed_series_scan=1.698791ms, elapsed_point_to_record_batch=4.572954ms, elapsed_field_scan=5.119076ms] |\n|                   |                                                                                                                                                                                                                                                                                                                                         |\n+-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"EXPLAIN ANALYZE VERBOSE SELECT station, temperature, visibility FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type              | plan|\nn| Plan with Metrics      | ProjectionExec: expr=[station@0 as station, temperature@2 as temperature, visibility@1 as visibility], metrics=[output_rows=13, elapsed_compute=26.75\xb5s, spill_count=0, spilled_bytes=0, mem_used=0]                                                                                                                                                                                                                                                                                                                                                                    |\n|                        |   TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({}) }, projection=[station,visibility,temperature], metrics=[output_rows=13, elapsed_compute=13.225875ms, spill_count=0, spilled_bytes=0, mem_used=0, elapsed_point_to_record_batch=3.918163ms, elapsed_field_scan=3.992161ms, elapsed_series_scan=1.657416ms]                                                                                                                                                                                                                                 |\n|                        ||\n| Plan with Full Metrics | ProjectionExec: expr=[station@0 as station, temperature@2 as temperature, visibility@1 as visibility], metrics=[start_timestamp{partition=0}=2022-10-25 03:00:14.865034 UTC, end_timestamp{partition=0}=2022-10-25 03:00:14.879596 UTC, elapsed_compute{partition=0}=26.75\xb5s, spill_count{partition=0}=0, spilled_bytes{partition=0}=0, mem_used{partition=0}=0, output_rows{partition=0}=13]                                                                                                                                                                           |\n|                        |   TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({}) }, projection=[station,visibility,temperature], metrics=[start_timestamp{partition=0}=2022-10-25 03:00:14.864225 UTC, end_timestamp{partition=0}=2022-10-25 03:00:14.879596 UTC, elapsed_compute{partition=0}=13.225875ms, spill_count{partition=0}=0, spilled_bytes{partition=0}=0, mem_used{partition=0}=0, output_rows{partition=0}=13, elapsed_point_to_record_batch{partition=0}=3.918163ms, elapsed_field_scan{partition=0}=3.992161ms, elapsed_series_scan{partition=0}=1.657416ms] |\n|                        ||\n| Output Rows            ||\n| Duration               | 13.307708ms|\nn")),(0,r.kt)("h3",{id:"describe"},(0,r.kt)("strong",{parentName:"h3"},"DESCRIBE")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DESCRIBE {DATABASE db_name | TABLE tb_name};\n")),(0,r.kt)("p",null,"Describe the parameters of the database and the pattern of the table."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DESCRIBE TABLE air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+-----------+-------+-------------+\n| FIELDNAME   | TYPE      | ISTAG | COMPRESSION |\n+-------------+-----------+-------+-------------+\n| time        | TIMESTAMP | false | Default     |\n| station     | STRING    | true  | Default     |\n| visibility  | DOUBLE    | false | Default     |\n| temperature | DOUBLE    | false | Default     |\n| pressure    | DOUBLE    | false | Default     |\n+-------------+-----------+-------+-------------+\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DESCRIBE DATABASE public;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------+-------+----------------+---------+-----------+\n| TTL      | SHARD | VNODE_DURATION | REPLICA | PRECISION |\n+----------+-------+----------------+---------+-----------+\n| 365 Days | 1     | 365 Days       | 1       | NS        |\n+----------+-------+----------------+---------+-----------+\n")),(0,r.kt)("h3",{id:"join-clause"},(0,r.kt)("strong",{parentName:"h3"},"Join Clause")),(0,r.kt)("h3",{id:"join-operation"},"Join Operation"),(0,r.kt)("p",null,"CnosDB supports",(0,r.kt)("inlineCode",{parentName:"p"},"INNER JOIN"),"\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"LEFT OUTER JOIN"),"\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"RIGHT OUTER JOIN"),"\u3001",(0,r.kt)("inlineCode",{parentName:"p"},"FULL OUTER JOIN"),"\u3002"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CROSS JOIN"),"is not supported currently."),(0,r.kt)("h3",{id:"inner-join"},"INNER JOIN"),(0,r.kt)("p",null,"The keyword",(0,r.kt)("inlineCode",{parentName:"p"},"JOIN"),"or",(0,r.kt)("inlineCode",{parentName:"p"},"INNER JOIN"),"defines a join that only displays matching rows in two tables."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM air INNER JOIN sea ON air.temperature = sea.temperature;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------+------------+------------+-------------+----------+---------------------+-------------+-------------+\n| time                | station    | visibility | temperature | pressure | time                | station     | temperature |\n+---------------------+------------+------------+-------------+----------+---------------------+-------------+-------------+\n| 2022-01-28 13:27:00 | XiaoMaiDao | 67         | 62          | 59       | 2022-01-28 13:18:00 | LianYunGang | 62          |\n| 2022-01-28 13:24:00 | XiaoMaiDao | 50         | 78          | 66       | 2022-01-28 13:30:00 | XiaoMaiDao  | 78          |\n| 2022-01-28 13:24:00 | XiaoMaiDao | 50         | 78          | 66       | 2022-01-28 13:33:00 | XiaoMaiDao  | 78          |\n| 2022-01-28 13:30:00 | XiaoMaiDao | 65         | 79          | 77       | 2022-01-28 13:39:00 | XiaoMaiDao  | 79          |\n+---------------------+------------+------------+-------------+----------+---------------------+-------------+-------------+\n")),(0,r.kt)("h3",{id:"left-join"},"LEFT JOIN"),(0,r.kt)("p",null,"Define a left join with the keyword",(0,r.kt)("inlineCode",{parentName:"p"},"LEFT JOIN"),"or",(0,r.kt)("inlineCode",{parentName:"p"},"LEFT OUTER JOIN"),".This join includes all the rows in the left table. If there are no matching rows in the right table, the right side of the join is null."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM air LEFT JOIN sea ON air.temperature = sea.temperature;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------+-------------+------------+-------------+----------+---------------------+-------------+-------------+\n| time                | station     | visibility | temperature | pressure | time                | station     | temperature |\n+---------------------+-------------+------------+-------------+----------+---------------------+-------------+-------------+\n| 2022-01-28 13:27:00 | XiaoMaiDao  | 67         | 62          | 59       | 2022-01-28 13:18:00 | LianYunGang | 62          |\n| 2022-01-28 13:24:00 | XiaoMaiDao  | 50         | 78          | 66       | 2022-01-28 13:30:00 | XiaoMaiDao  | 78          |\n| 2022-01-28 13:24:00 | XiaoMaiDao  | 50         | 78          | 66       | 2022-01-28 13:33:00 | XiaoMaiDao  | 78          |\n| 2022-01-28 13:30:00 | XiaoMaiDao  | 65         | 79          | 77       | 2022-01-28 13:39:00 | XiaoMaiDao  | 79          |\n| 2022-01-28 13:21:00 | XiaoMaiDao  | 56         | 69          | 77       |                     |             |             |\n| 2022-01-28 13:33:00 | XiaoMaiDao  | 53         | 53          | 68       |                     |             |             |\n| 2022-01-28 13:36:00 | XiaoMaiDao  | 74         | 72          | 68       |                     |             |             |\n| 2022-01-28 13:39:00 | XiaoMaiDao  | 71         | 71          | 80       |                     |             |             |\n| 2022-01-28 13:21:00 | LianYunGang | 78         | 69          | 71       |                     |             |             |\n| 2022-01-28 13:24:00 | LianYunGang | 79         | 80          | 51       |                     |             |             |\n| 2022-01-28 13:27:00 | LianYunGang | 59         | 74          | 59       |                     |             |             |\n| 2022-01-28 13:30:00 | LianYunGang | 67         | 70          | 72       |                     |             |             |\n| 2022-01-28 13:33:00 | LianYunGang | 80         | 70          | 68       |                     |             |             |\n| 2022-01-28 13:36:00 | LianYunGang | 59         | 70          | 54       |                     |             |             |\n+---------------------+-------------+------------+-------------+----------+---------------------+-------------+-------------+\n")),(0,r.kt)("h3",{id:"right-join"},"RIGHT JOIN"),(0,r.kt)("p",null,"Define a right join with the keyword ",(0,r.kt)("inlineCode",{parentName:"p"},"RIGHT JOIN"),"or",(0,r.kt)("inlineCode",{parentName:"p"},"RIGHT OUTER JOIN"),". This join includes all the rows in the right table. If there are no matching rows in the left table, the left side of the join is null."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM air RIGHT JOIN sea ON air.temperature = sea.temperature;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------+------------+------------+-------------+----------+---------------------+-------------+-------------+\n| time                | station    | visibility | temperature | pressure | time                | station     | temperature |\n+---------------------+------------+------------+-------------+----------+---------------------+-------------+-------------+\n| 2022-01-28 13:27:00 | XiaoMaiDao | 67         | 62          | 59       | 2022-01-28 13:18:00 | LianYunGang | 62          |\n|                     |            |            |             |          | 2022-01-28 13:21:00 | LianYunGang | 63          |\n|                     |            |            |             |          | 2022-01-28 13:24:00 | LianYunGang | 77          |\n|                     |            |            |             |          | 2022-01-28 13:27:00 | LianYunGang | 54          |\n|                     |            |            |             |          | 2022-01-28 13:30:00 | LianYunGang | 55          |\n|                     |            |            |             |          | 2022-01-28 13:33:00 | LianYunGang | 64          |\n|                     |            |            |             |          | 2022-01-28 13:36:00 | LianYunGang | 56          |\n|                     |            |            |             |          | 2022-01-28 13:21:00 | XiaoMaiDao  | 57          |\n|                     |            |            |             |          | 2022-01-28 13:24:00 | XiaoMaiDao  | 64          |\n|                     |            |            |             |          | 2022-01-28 13:27:00 | XiaoMaiDao  | 51          |\n| 2022-01-28 13:24:00 | XiaoMaiDao | 50         | 78          | 66       | 2022-01-28 13:30:00 | XiaoMaiDao  | 78          |\n| 2022-01-28 13:24:00 | XiaoMaiDao | 50         | 78          | 66       | 2022-01-28 13:33:00 | XiaoMaiDao  | 78          |\n|                     |            |            |             |          | 2022-01-28 13:36:00 | XiaoMaiDao  | 57          |\n| 2022-01-28 13:30:00 | XiaoMaiDao | 65         | 79          | 77       | 2022-01-28 13:39:00 | XiaoMaiDao  | 79          |\n+---------------------+------------+------------+-------------+----------+---------------------+-------------+-------------+\n")),(0,r.kt)("h3",{id:"full-join"},"FULL JOIN"),(0,r.kt)("p",null,"The keyword",(0,r.kt)("inlineCode",{parentName:"p"},"FULL JOIN"),"or",(0,r.kt)("inlineCode",{parentName:"p"},"FULL OUTER JOIN"),"defines a full connection, which is actually the union of LEFT OUTER JOIN and RIGHT OUTER JOIN. It will display all the rows on the left and right of the join, and will generate null values where either side of the join does not match."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM air FULL JOIN sea ON air.temperature = sea.temperature;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------+-------------+------------+-------------+----------+---------------------+-------------+-------------+\n| time                | station     | visibility | temperature | pressure | time                | station     | temperature |\n+---------------------+-------------+------------+-------------+----------+---------------------+-------------+-------------+\n| 2022-01-28 13:27:00 | XiaoMaiDao  | 67         | 62          | 59       | 2022-01-28 13:18:00 | LianYunGang | 62          |\n|                     |             |            |             |          | 2022-01-28 13:21:00 | LianYunGang | 63          |\n|                     |             |            |             |          | 2022-01-28 13:24:00 | LianYunGang | 77          |\n|                     |             |            |             |          | 2022-01-28 13:27:00 | LianYunGang | 54          |\n|                     |             |            |             |          | 2022-01-28 13:30:00 | LianYunGang | 55          |\n|                     |             |            |             |          | 2022-01-28 13:33:00 | LianYunGang | 64          |\n|                     |             |            |             |          | 2022-01-28 13:36:00 | LianYunGang | 56          |\n|                     |             |            |             |          | 2022-01-28 13:21:00 | XiaoMaiDao  | 57          |\n|                     |             |            |             |          | 2022-01-28 13:24:00 | XiaoMaiDao  | 64          |\n|                     |             |            |             |          | 2022-01-28 13:27:00 | XiaoMaiDao  | 51          |\n| 2022-01-28 13:24:00 | XiaoMaiDao  | 50         | 78          | 66       | 2022-01-28 13:30:00 | XiaoMaiDao  | 78          |\n| 2022-01-28 13:24:00 | XiaoMaiDao  | 50         | 78          | 66       | 2022-01-28 13:33:00 | XiaoMaiDao  | 78          |\n|                     |             |            |             |          | 2022-01-28 13:36:00 | XiaoMaiDao  | 57          |\n| 2022-01-28 13:30:00 | XiaoMaiDao  | 65         | 79          | 77       | 2022-01-28 13:39:00 | XiaoMaiDao  | 79          |\n| 2022-01-28 13:21:00 | XiaoMaiDao  | 56         | 69          | 77       |                     |             |             |\n| 2022-01-28 13:33:00 | XiaoMaiDao  | 53         | 53          | 68       |                     |             |             |\n| 2022-01-28 13:36:00 | XiaoMaiDao  | 74         | 72          | 68       |                     |             |             |\n| 2022-01-28 13:39:00 | XiaoMaiDao  | 71         | 71          | 80       |                     |             |             |\n| 2022-01-28 13:21:00 | LianYunGang | 78         | 69          | 71       |                     |             |             |\n| 2022-01-28 13:24:00 | LianYunGang | 79         | 80          | 51       |                     |             |             |\n| 2022-01-28 13:27:00 | LianYunGang | 59         | 74          | 59       |                     |             |             |\n| 2022-01-28 13:30:00 | LianYunGang | 67         | 70          | 72       |                     |             |             |\n| 2022-01-28 13:33:00 | LianYunGang | 80         | 70          | 68       |                     |             |             |\n| 2022-01-28 13:36:00 | LianYunGang | 59         | 70          | 54       |                     |             |             |\n+---------------------+-------------+------------+-------------+----------+---------------------+-------------+-------------+\n")),(0,r.kt)("h3",{id:"group-by-clause"},"GROUP BY Clause"),(0,r.kt)("p",null,"The GROUP BY clause must be after the condition of the WHERE clause and before the ORDER BY clause (if any)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station, AVG(temperature) \nFROM air \nGROUP BY station;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+----------------------+\n| station     | AVG(air.temperature) |\n+-------------+----------------------+\n| XiaoMaiDao  | 69.14285714285714    |\n| LianYunGang | 72.16666666666667    |\n+-------------+----------------------+\n")),(0,r.kt)("h3",{id:"having-clause"},"HAVING Clause"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"group_by_clause \n[ HAVING condition ];\n")),(0,r.kt)("p",null,"In the SELECT query, the HAVING clause must follow the GROUP BY clause and appear before the ORDER BY clause (if any)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Differences between HAVING and WHERE"),"\uff1a"),(0,r.kt)("p",null,"HAVING enables you to specify filter conditions after the GROUP BY clause, so as to control which groups in the query results can appear in the final results."),(0,r.kt)("p",null,"WHERE sets conditions on the selected column before the GROUP BY clause, while HAVING clause sets conditions on the group generated by the GROUP BY clause."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station, AVG(temperature)  AS avg_t \nFROM air \nGROUP BY station \nHAVING avg_t > 70;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+-------------------+\n| station     | avg_t             |\n+-------------+-------------------+\n| LianYunGang | 72.16666666666667 |\n+-------------+-------------------+\n")),(0,r.kt)("h2",{id:"complex-grouping-operation"},(0,r.kt)("strong",{parentName:"h2"},"Complex Grouping Operation")),(0,r.kt)("p",null,"CnosDB provides ",(0,r.kt)("inlineCode",{parentName:"p"},"ROLLUP"),"\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"CUBE"),"and other complex grouping operations, enabling you to operate query results in different ways."),(0,r.kt)("h3",{id:"rollup"},(0,r.kt)("strong",{parentName:"h3"},"ROLLUP")),(0,r.kt)("p",null,"You can use the ROLLUP option in a single query to generate multiple group sets."),(0,r.kt)("p",null,"ROLLUP assumes a hierarchy between input columns."),(0,r.kt)("p",null,"If you GRUOP BY Clause is as follows,"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ...\nFROM ...\nGROUP BY ROLLUP(column_1,column_2);\n")),(0,r.kt)("p",null,"t is equivalent to the following statement."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ...\nFROM ...\n\n\nUNION ALL\n\nSELECT ...\nFROM ...\nGROUP BY\ncolumn_1\n\nUNION ALL\n\nSELECT ...\nFROM ...\nGROUP BY\ncolumn_1, column2;\n")),(0,r.kt)("p",null,"ROLLUP generates all grouping sets that are meaningful in this hierarchy. Whenever the value of column_1 changes\uff0cit will generate a subtotal line\uff1b"),(0,r.kt)("p",null,"Therefore, we often use ROLLUP in reports to generate subtotals and totals. The order of columns in ROLLUP is very important."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station, visibility, avg(temperature) \nFROM air \nGROUP BY ROLLUP (station, visibility);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+------------+----------------------+\n| station     | visibility | AVG(air.temperature) |\n+-------------+------------+----------------------+\n|             |            | 70.53846153846153    |\n| XiaoMaiDao  |            | 69.14285714285714    |\n| LianYunGang |            | 72.16666666666667    |\n| XiaoMaiDao  | 56         | 69                   |\n| XiaoMaiDao  | 50         | 78                   |\n| XiaoMaiDao  | 67         | 62                   |\n| XiaoMaiDao  | 65         | 79                   |\n| XiaoMaiDao  | 53         | 53                   |\n| XiaoMaiDao  | 74         | 72                   |\n| XiaoMaiDao  | 71         | 71                   |\n| LianYunGang | 78         | 69                   |\n| LianYunGang | 79         | 80                   |\n| LianYunGang | 59         | 72                   |\n| LianYunGang | 67         | 70                   |\n| LianYunGang | 80         | 70                   |\n+-------------+------------+----------------------+\n")),(0,r.kt)("h3",{id:"cube"},(0,r.kt)("strong",{parentName:"h3"},"CUBE")),(0,r.kt)("p",null,"Similar to ROLLUP, CUBE is an extension of the GROUP BY clause. It allows you to generate subtotals for all combinations of grouping columns specified in the GROUP BY clause."),(0,r.kt)("p",null,"CUBE creates a grouping set for each possible combination of the specified expression set. First, GROUP BY (A, B, C), then (A, B), (A, C), (A), (B, C), (B), (C), and finally GROUP BY the entire table."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ... \nFROM ...\nGROUP BY CUBE (column1, column2);\n")),(0,r.kt)("p",null,"Equivalent to"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ...\nFROM ...\nGROUP BY column1\n\nUNION ALL\n\nSELECT ...\nFROM ...\nGROUP BY column2\n\nUNION ALL\n\nSELECT ...\nFROM ...\nGROUP BY column1, column2\n\nUNION ALL\n\nSELECT ...\nFROM ...\n;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station, visibility, avg(temperature) \nFROM air \nGROUP BY CUBE (station, visibility);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+------------+----------------------+\n| station     | visibility | AVG(air.temperature) |\n+-------------+------------+----------------------+\n| XiaoMaiDao  | 56         | 69                   |\n| XiaoMaiDao  | 50         | 78                   |\n| XiaoMaiDao  | 67         | 62                   |\n| XiaoMaiDao  | 65         | 79                   |\n| XiaoMaiDao  | 53         | 53                   |\n| XiaoMaiDao  | 74         | 72                   |\n| XiaoMaiDao  | 71         | 71                   |\n| LianYunGang | 78         | 69                   |\n| LianYunGang | 79         | 80                   |\n| LianYunGang | 59         | 72                   |\n| LianYunGang | 67         | 70                   |\n| LianYunGang | 80         | 70                   |\n|             | 56         | 69                   |\n|             | 50         | 78                   |\n|             | 67         | 66                   |\n|             | 65         | 79                   |\n|             | 53         | 53                   |\n|             | 74         | 72                   |\n|             | 71         | 71                   |\n|             | 78         | 69                   |\n|             | 79         | 80                   |\n|             | 59         | 72                   |\n|             | 80         | 70                   |\n| XiaoMaiDao  |            | 69.14285714285714    |\n| LianYunGang |            | 72.16666666666667    |\n|             |            | 70.53846153846153    |\n+-------------+------------+----------------------+\n")),(0,r.kt)("h2",{id:"aggregate-function"},"Aggregate Function"),(0,r.kt)("h3",{id:"common-aggregate-functions"},(0,r.kt)("strong",{parentName:"h3"},"Common Aggregate Functions")),(0,r.kt)("h3",{id:"count"},(0,r.kt)("strong",{parentName:"h3"},"COUNT")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"COUNT(x)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Return the number of rows retrieved in the selected element."),(0,r.kt)("p",null,"Contain the DISTINCT keyword, which counts the results after deduplication."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aany type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT COUNT(*) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-----------------+\n| COUNT(UInt8(1)) |\n+-----------------+\n| 13              |\n+-----------------+\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT COUNT(temperature) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+------------------------+\n| COUNT(air.temperature) |\n+------------------------+\n| 13                     |\n+------------------------+\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT COUNT(DISTINCT temperature) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------------------+\n| COUNT(DISTINCT air.temperature) |\n+---------------------------------+\n| 10                              |\n+---------------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"sum"},(0,r.kt)("strong",{parentName:"h3"},"SUM")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SUM(NUMERICS)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Return the sum calculated from the selected element"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aConsistent with parameter type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT SUM(temperature) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------+\n| SUM(air.temperature) |\n+----------------------+\n| 917                  |\n+----------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"min"},(0,r.kt)("strong",{parentName:"h3"},"MIN")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MIN(STRING | NUMERICS | TIMESTAMP)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Return the minimum value of the selected element."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type or STRING or TIMESTAMP"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aConsistent with parameter type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"}," SELECT MIN(time), MIN(station), MIN(temperature) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------+------------------+----------------------+\n| MIN(air.time)       | MIN(air.station) | MIN(air.temperature) |\n+---------------------+------------------+----------------------+\n| 2022-01-28T13:21:00 | LianYunGang      | 53                   |\n+---------------------+------------------+----------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"max"},(0,r.kt)("strong",{parentName:"h3"},"MAX")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"MAX(STRINGS | NUMERICS | TIMESTAMPS)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Return the maximum value in the selected element."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type or STRING or TIMESTAMP."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aConsistent with parameter type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT MAX(time), MAX(station), MAX(temperature) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------+------------------+----------------------+\n| MAX(air.time)       | MAX(air.station) | MAX(air.temperature) |\n+---------------------+------------------+----------------------+\n| 2022-01-28T13:39:00 | XiaoMaiDao       | 80                   |\n+---------------------+------------------+----------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"avg"},(0,r.kt)("strong",{parentName:"h3"},"AVG")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"AVG(NUMERICS)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Return the average value of the selected element."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type\uff1a"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT AVG(temperature) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------+\n| AVG(air.temperature) |\n+----------------------+\n| 70.53846153846153    |\n+----------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"array_agg"},(0,r.kt)("strong",{parentName:"h3"},"ARRAY_AGG")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ARRAY_AGG(expr)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Return an array consisting of all the values of the selected element. The element types must be the same."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aany type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aArray of parameter type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ARRAY_AGG(temperature) from air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+------------------------------------------------------+\n| ARRAYAGG(air.temperature)                            |\n+------------------------------------------------------+\n| [69, 78, 62, 79, 53, 72, 71, 69, 80, 74, 70, 70, 70] |\n+------------------------------------------------------+\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),"\uff1aThe aggregate function result cannot be returned in CSV format"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"statistical-aggregate-functions"},(0,r.kt)("strong",{parentName:"h3"},"Statistical Aggregate Functions")),(0,r.kt)("h3",{id:"var--var_samp"},(0,r.kt)("strong",{parentName:"h3"},"VAR | VAR_SAMP")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"VAR(NUMERICS)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Calculate the variance of a given sample"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT VAR(temperature) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------------+\n| VARIANCE(air.temperature) |\n+---------------------------+\n| 51.43589743589741         |\n+---------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"var_pop"},(0,r.kt)("strong",{parentName:"h3"},"VAR_POP")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"VAR_POP(NUMERICS)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Calculate the variance of population."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT VAR_POP(temperature) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+------------------------------+\n| VARIANCEPOP(air.temperature) |\n+------------------------------+\n| 47.47928994082838            |\n+------------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"stddev--stddev_samp"},(0,r.kt)("strong",{parentName:"h3"},"STDDEV | STDDEV_SAMP")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"STDDEV(NUMERICS)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Calculate the standard deviation of the sample."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT STDDEV(temperature) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------------------+\n| STDDEV(air.temperature) |\n+-------------------------+\n| 7.1718824192744135      |\n+-------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"stddev_pop"},(0,r.kt)("strong",{parentName:"h3"},"STDDEV_POP")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"STDDEV_POP(NUMERICS)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Calculate the standard deviation of population."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT STDDEV_POP(temperature) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------------+\n| STDDEVPOP(air.temperature) |\n+----------------------------+\n| 6.890521746633442          |\n+----------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"covar--covar_samp"},(0,r.kt)("strong",{parentName:"h3"},"COVAR | COVAR_SAMP")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"COVAR(NUMERICS, NUMERICS)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Return the covariance of the sample."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Numeric type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT COVAR(temperature, pressure) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+------------------------------------------+\n| COVARIANCE(air.temperature,air.pressure) |\n+------------------------------------------+\n| -5.121794871794841                       |\n+------------------------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"covar_pop"},(0,r.kt)("strong",{parentName:"h3"},"COVAR_POP")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"COVAR_POP(NUMERICS, NUMERICS)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Return the overall covariance of number pairs in a group."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT COVAR_POP(temperature, pressure) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------------------------------+\n| COVARIANCEPOP(air.temperature,air.pressure) |\n+---------------------------------------------+\n| -4.727810650887546                          |\n+---------------------------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"corr"},(0,r.kt)("strong",{parentName:"h3"},"CORR")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CORR**(NUMERICS, NUMERICS)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Return the Pearson coefficient representing the association between a set of number pairs."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT CORR(temperature, pressure) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------------------------------------+\n| CORRELATION(air.temperature,air.pressure) |\n+-------------------------------------------+\n| -0.07955796767766017                      |\n+-------------------------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"approximate-aggregate-functions"},(0,r.kt)("strong",{parentName:"h2"},"Approximate Aggregate Functions")),(0,r.kt)("h3",{id:"approx_distinct"},(0,r.kt)("strong",{parentName:"h3"},"APPROX_DISTINCT")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"APPROX_DISTINCT(x)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Return approximations of different input values (HyperLogLog)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT APPROX_DISTINCT(station) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-----------------------------+\n| APPROXDISTINCT(air.station) |\n+-----------------------------+\n| 2                           |\n+-----------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"approx_percentile_cont"},(0,r.kt)("strong",{parentName:"h3"},"APPROX_PERCENTILE_CONT")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"APPROX_PERCENTILE_CONT(x, p)  \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Returns the approximate percentile (TDigest) of the input value x, where p is the percentile and is a 64 bit floating point number between 0 and 1 (including 1)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1ax is numeric type, p is DOUBLE type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT APPROX_PERCENTILE_CONT(temperature, 0.1) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------------------------------------+\n| APPROXPERCENTILECONT(air.temperature,Float64(0.1)) |\n+----------------------------------------------------+\n| 60.4                                               |\n+----------------------------------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"approx_percentile_cont_with_weight"},(0,r.kt)("strong",{parentName:"h3"},"APPROX_PERCENTILE_CONT_WITH_WEIGHT")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"APPROX_PERCENTILE_CONT_WITH_WEIGHT(x, w, p)  \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a x returns the approximate percentage (TDigest) of the weighted input value, where w is the weight column expression and p is a floating point 64 between 0 and 1 inclusive."),(0,r.kt)("p",null,"APPROX_PERCENTILE_CONT(x, p) is equivalent to APPROX_PERCENTILE_CONT_WITH_WEIGHT(x, 1, p)\n",(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1ax. w is numeric type, p is DOUBLE type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT APPROX_PERCENTILE_CONT_WITH_WEIGHT(temperature,2, 0.1) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-----------------------------------------------------------------------+\n| APPROXPERCENTILECONTWITHWEIGHT(air.temperature,Int64(2),Float64(0.1)) |\n+-----------------------------------------------------------------------+\n| 54.35                                                                 |\n+-----------------------------------------------------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"approx_mediannumerics"},(0,r.kt)("strong",{parentName:"h3"},"APPROX_MEDIAN"),"(NUMERICS)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"APPROX_MEDIAN(NUMERICS)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Return the approximate median of the input value."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT APPROX_MEDIAN(temperature) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------------------------+\n| APPROXMEDIAN(air.temperature) |\n+-------------------------------+\n| 70                            |\n+-------------------------------+\n")),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"mathematical-functions"},(0,r.kt)("strong",{parentName:"h3"},"Mathematical Functions")),(0,r.kt)("h3",{id:"absx"},(0,r.kt)("strong",{parentName:"h3"},"abs(x)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn the absolute value of x."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aConsistent with function parameter type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT abs(-1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------+\n| abs(Int64(-1)) |\n+----------------+\n| 1              |\n+----------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"acosx"},(0,r.kt)("strong",{parentName:"h3"},"acos(x)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn the arccosine of x."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT acos(3);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------+\n| acos(Int64(3)) |\n+----------------+\n| NaN            |\n+----------------+\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT acos(0.5);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+--------------------+\n| acos(Float64(0.5)) |\n+--------------------+\n| 1.0471975511965976 |\n+--------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"asinx"},(0,r.kt)("strong",{parentName:"h3"},"asin(x)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),":  Return the arcsine of x."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT asin(0.5);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+--------------------+\n| asin(Float64(0.5)) |\n+--------------------+\n| 0.5235987755982988 |\n+--------------------+\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT asin(5);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------+\n| asin(Int64(5)) |\n+----------------+\n| NaN            |\n+----------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"atanx"},(0,r.kt)("strong",{parentName:"h3"},"atan(x)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn the arctangent of x."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT atan(5);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------------+\n| atan(Int64(5))    |\n+-------------------+\n| 1.373400766945016 |\n+-------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"atan2yx"},(0,r.kt)("strong",{parentName:"h3"},"atan2(y,x)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn the arctangent of y/x."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT atan2(10, 2);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------------+\n| atan2(Int64(10),Int64(2)) |\n+---------------------------+\n| 1.3734008                 |\n+---------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"ceilx"},(0,r.kt)("strong",{parentName:"h3"},"ceil(x)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Round up."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ceil(1.6);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+--------------------+\n| ceil(Float64(1.6)) |\n+--------------------+\n| 2                  |\n+--------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"floorx"},(0,r.kt)("strong",{parentName:"h3"},"floor(x)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),": Round down."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT floor(-3.1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------+\n| floor(Float64(-3.1)) |\n+----------------------+\n| -4                   |\n+----------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"cosx"},(0,r.kt)("strong",{parentName:"h3"},"cos(x)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),":  Return the cosine of x."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT cos(1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+--------------------+\n| cos(Int64(1))      |\n+--------------------+\n| 0.5403023058681398 |\n+--------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"sinx"},(0,r.kt)("strong",{parentName:"h3"},"sin(x)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),":  Return the sine of x."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT sin(5);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------+\n| sin(Int64(5))       |\n+---------------------+\n| -0.9589242746631385 |\n+---------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"expx"},(0,r.kt)("strong",{parentName:"h3"},"exp(x)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),": Return e to the x power."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT exp(1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------------+\n| exp(Int64(1))     |\n+-------------------+\n| 2.718281828459045 |\n+-------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"lnx"},(0,r.kt)("strong",{parentName:"h3"},"ln(x)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),":  Natural logarithm."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ln(2.718281828459045);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+--------------------------------+\n| ln(Float64(2.718281828459045)) |\n+--------------------------------+\n| 1                              |\n+--------------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"logx--log10x"},(0,r.kt)("strong",{parentName:"h3"},"log(x) | log10(x)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),": Base 10 logarithm."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT log(10);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------+\n| log(Int64(10)) |\n+----------------+\n| 1              |\n+----------------+\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT log10(10);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------+\n| log(Int64(10)) |\n+----------------+\n| 1              |\n+----------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"log2x"},(0,r.kt)("strong",{parentName:"h3"},"log2(x)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),": Base 2 logarithm."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT log2(4);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------+\n| log2(Int64(4)) |\n+----------------+\n| 2              |\n+----------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"powerxy--powxy"},(0,r.kt)("strong",{parentName:"h3"},"power(x,y) | pow(x,y)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),": x to the y power."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT power(2, 3);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+--------------------------+\n| power(Int64(2),Int64(3)) |\n+--------------------------+\n| 8                        |\n+--------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"roundx"},(0,r.kt)("strong",{parentName:"h3"},"round(x)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),":  Rounded to the nearest whole number."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT round(3.5);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------+\n| round(Float64(3.5)) |\n+---------------------+\n| 4                   |\n+---------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"signumx"},(0,r.kt)("strong",{parentName:"h3"},"signum(x)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),":  Signs of parameter (-1,0,+1)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT signum(-3);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------------+\n| signum(Int64(-3)) |\n+-------------------+\n| -1                |\n+-------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"sqrtx"},(0,r.kt)("strong",{parentName:"h3"},"sqrt(x)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),":  Square root of x."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aConsistent with function parameter type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT sqrt(4);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------+\n| sqrt(Int64(4)) |\n+----------------+\n| 2              |\n+----------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"tanx"},(0,r.kt)("strong",{parentName:"h3"},"tan(x)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),":   Tangent value of x."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1a DOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT tan(1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------------+\n| tan(Int64(1))     |\n+-------------------+\n| 1.557407724654902 |\n+-------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"truncx"},(0,r.kt)("strong",{parentName:"h3"},"trunc(x)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aRound to zero."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT trunc(-3.9);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------+\n| trunc(Float64(-3.9)) |\n+----------------------+\n| -3                   |\n+----------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"struct"},(0,r.kt)("strong",{parentName:"h3"},"struct")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"struct(expr1 [, ...] ) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aCreate a STRUCT with the specified field value."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNumeric type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),"\uff1aFunction struct is not perfect at present."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"conditional-functions"},(0,r.kt)("strong",{parentName:"h3"},"Conditional Functions")),(0,r.kt)("h3",{id:"coalesce"},(0,r.kt)("strong",{parentName:"h3"},"coalesce")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"coalesce(expr[,...exp])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn its first non null parameter. Null is returned only when all parameters are null. When retrieving data for display, it is often used to replace the default value with a null value."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aAny type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aFirst non null parameter type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT coalesce(temperature, null, station) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+--------------------------------------------+\n| coalesce(air.temperature,NULL,air.station) |\n+--------------------------------------------+\n| 69.0                                       |\n| 78.0                                       |\n| 62.0                                       |\n| 79.0                                       |\n| 53.0                                       |\n| 72.0                                       |\n| 71.0                                       |\n| 69.0                                       |\n| 80.0                                       |\n| 74.0                                       |\n| 70.0                                       |\n| 70.0                                       |\n| 70.0                                       |\n+--------------------------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"nullif"},(0,r.kt)("strong",{parentName:"h3"},"nullif")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"nullif(expr1, expr2) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aIf expr1 is equal to expr2, NULL is returned; Otherwise, expr1 is returned."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aexpr1 and expr2 are numeric expressions with column values"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aThe type of expr1 or NULL"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT nullif(temperature, 70) FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-----------------------------------+\n| nullif(air.temperature,Int64(70)) |\n+-----------------------------------+\n| 69                                |\n| 78                                |\n| 62                                |\n| 79                                |\n| 53                                |\n| 72                                |\n| 71                                |\n| 69                                |\n| 80                                |\n| 74                                |\n|                                   |\n|                                   |\n|                                   |\n+-----------------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"string-functions"},(0,r.kt)("strong",{parentName:"h3"},"String Functions")),(0,r.kt)("h3",{id:"ascii"},(0,r.kt)("strong",{parentName:"h3"},"ascii")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ascii(str) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),":  Convert the first character in str to its ASCII code and return it."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ascii('abc');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+------------------+\n| ascii(Utf8("a")) |\n+------------------+\n| 97               |\n+------------------+\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ascii('a');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+------------------+\n| ascii(Utf8("a")) |\n+------------------+\n| 97               |\n+------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"bit_length"},(0,r.kt)("strong",{parentName:"h3"},"bit_length")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"bit_length(str) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturns the bit length of string data or the bit size of binary data."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT bit_length('abc');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+------------------------+\n| bitlength(Utf8("abc")) |\n+------------------------+\n| 24                     |\n+------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"btrim"},(0,r.kt)("strong",{parentName:"h3"},"btrim")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"btrim(string [, matching_string ] ) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aThe function trims a string by removing leading and trailing spaces or by removing characters that match an optional specified string."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),": STRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT btrim('     abc                  ');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+-------------------------------------------+\n| btrim(Utf8("     abc                  ")) |\n+-------------------------------------------+\n| abc                                       |\n+-------------------------------------------+\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT btrim('111abc111','1');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+------------------------------------+\n| btrim(Utf8("111abc111"),Utf8("1")) |\n+------------------------------------+\n| abc                                |\n+------------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"trim"},(0,r.kt)("strong",{parentName:"h3"},"trim")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"trim(str) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aRemove blank characters at the begin and end of str."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aSTRING"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"char_length--character_length"},(0,r.kt)("strong",{parentName:"h3"},"char_length | character_length")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"char_length(expr) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn the length of the specified string in characters."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT char_length('\u4f60\u597d');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+-------------------------------+\n| characterlength(Utf8("\u4f60\u597d"))  |\n+-------------------------------+\n| 2                             |\n+-------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"chr"},(0,r.kt)("strong",{parentName:"h3"},"chr")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"chr(expr) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn the character at the provided UTF-16 code."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),": BIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),": STRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT chr(20005);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------------+\n| chr(Int64(20005)) |\n+-------------------+\n| \u4e25                |\n+-------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"concat"},(0,r.kt)("strong",{parentName:"h3"},"con``cat")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"concat(expr1, expr2 [, ...exp] ) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aJoins two or more expressions and returns the generated expression."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),": STRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT concat('a', 'b', 'c');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+---------------------------------------+\n| concat(Utf8("a"),Utf8("b"),Utf8("c")) |\n+---------------------------------------+\n| abc                                   |\n+---------------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"concat_ws"},(0,r.kt)("strong",{parentName:"h3"},"concat_ws")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"concat_ws(sep , expr1 [, ...] ) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn a concatenated string separated by sep."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT concat_ws(' ', 'a', 'b', 'c');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+--------------------------------------------------------------+\n| concatwithseparator(Utf8(" "),Utf8("a"),Utf8("b"),Utf8("c")) |\n+--------------------------------------------------------------+\n| a b c                                                        |\n+--------------------------------------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"initcap"},(0,r.kt)("strong",{parentName:"h3"},"initcap")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"initcap(expr) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aCapitalize the first letter of each word in the parameter."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT initcap('hello world');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+------------------------------+\n| initcap(Utf8("hello world")) |\n+------------------------------+\n| Hello World                  |\n+------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"left"},(0,r.kt)("strong",{parentName:"h3"},"left")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"left(str, len) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn the leftmost len characters in str."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1astr is STRING type, len is BIGINT type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT left('abcde', 3);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+------------------------------+\n| left(Utf8("abcde"),Int64(3)) |\n+------------------------------+\n| abc                          |\n+------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"lpad"},(0,r.kt)("strong",{parentName:"h3"},"lpad")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"lpad(expr, len [, pad] ) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn expr filled with pad on the left. After filling, the length of the whole string is len."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aexpr, pad type is STRING, len type is BIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,"When len is a negative number, len represents 0. When len is too large, function execution fails."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT lpad('abc', 10, '1');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+---------------------------------------+\n| lpad(Utf8("abc"),Int64(10),Utf8("1")) |\n+---------------------------------------+\n| 1111111abc                            |\n+---------------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"rpad"},(0,r.kt)("strong",{parentName:"h3"},"rpad")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"rpad(expr, len [, pad] ) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn expr filled with pad on the right. After filling, the length of the whole string is len."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aexpr, pad is STRING type, len is BIGINT type."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT rpad('aaa', 10, 'b');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+---------------------------------------+\n| rpad(Utf8("aaa"),Int64(10),Utf8("b")) |\n+---------------------------------------+\n| aaabbbbbbb                            |\n+---------------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"lower"},(0,r.kt)("strong",{parentName:"h3"},"lower")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"lower(expr) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn lowercase string."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT lower('ABC');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+--------------------+\n| lower(Utf8("ABC")) |\n+--------------------+\n| abc                |\n+--------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"upper"},(0,r.kt)("strong",{parentName:"h3"},"upper")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"upper(expr)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn uppercase string."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aSTRING"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"ltrim"},(0,r.kt)("strong",{parentName:"h3"},"ltrim")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ltrim(str[, trimstr] ) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturns str, in which the leading characters in trimstr are deleted. The default trimestr is blank character."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ltrim('   abc');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+-----------------------+\n| ltrim(Utf8("   abc")) |\n+-----------------------+\n| abc                   |\n+-----------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"md5"},(0,r.kt)("strong",{parentName:"h3"},"md5")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"md5(expr) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn the MD5 128 bit checksum of expr as a hexadecimal string."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT md5('abc');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+----------------------------------+\n| md5(Utf8("abc"))                 |\n+----------------------------------+\n| 900150983cd24fb0d6963f7d28e17f72 |\n+----------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"octet_length"},(0,r.kt)("strong",{parentName:"h3"},"octet_length")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"octet_length(expr) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn the byte length of string data."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT octet_length('\u4f60\u597d');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+---------------------------+\n| octetlength(Utf8("\u4f60\u597d")) |\n+---------------------------+\n| 6                         |\n+---------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"random"},(0,r.kt)("strong",{parentName:"h3"},"random")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"random( [seed] ) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn a random value between 0 and 1."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNone"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT random();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+---------------------+\n| random()            |\n+---------------------+\n| 0.37577771377596325 |\n+---------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"repeat"},(0,r.kt)("strong",{parentName:"h3"},"repeat")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"repeat(expr, n) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn a string that repeats expr n times."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aExpr type is STRING, n type is BIGINT."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT repeat('a', 5);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+----------------------------+\n| repeat(Utf8("a"),Int64(5)) |\n+----------------------------+\n| aaaaa                      |\n+----------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"replace"},(0,r.kt)("strong",{parentName:"h3"},"replace")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"replace(str, search, replace ) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReplace all search items with replace."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT replace('aaa', 'a', 'b');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+------------------------------------------+\n| replace(Utf8("aaa"),Utf8("a"),Utf8("b")) |\n+------------------------------------------+\n| bbb                                      |\n+------------------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"reverse"},(0,r.kt)("strong",{parentName:"h3"},"reverse")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"reverse(expr) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn an inverted string or an array containing elements in reverse order."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT reverse('\u4f60\u597d');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+-----------------------+\n| reverse(Utf8("\u4f60\u597d")) |\n+-----------------------+\n| \u597d\u4f60                  |\n+-----------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"right"},(0,r.kt)("strong",{parentName:"h3"},"right")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"right(str, len) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn the rightmost len characters in the string str."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"}," SELECT right('aaabbb', 3);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+--------------------------------+\n| right(Utf8("aaabbb"),Int64(3)) |\n+--------------------------------+\n| bbb                            |\n+--------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"digest"},(0,r.kt)("strong",{parentName:"h3"},"digest")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"digest(expr, algorithm)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn the rightmost len characters in the string str."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aexpr and algorithm are both STRING"),(0,r.kt)("p",null,"algorithm specifies the algorithm for computing hash. Only md5, sha224, sha256, sha384, sha512, blake2s, blake2b, blake3 are supported."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBINARY"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT digest('abc', 'md5');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+----------------------------------+\n| digest(Utf8("abc"),Utf8("md5"))  |\n+----------------------------------+\n| 900150983cd24fb0d6963f7d28e17f72 |\n+----------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"rtrim"},(0,r.kt)("strong",{parentName:"h3"},"rtrim")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"rtrim( str [, trimstr] ) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn the str with the trailing character trimstr deleted. trimstr is a blank character by default."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT rtrim('aaabbb', 'b');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+---------------------------------+\n| rtrim(Utf8("aaabbb"),Utf8("b")) |\n+---------------------------------+\n| aaa                             |\n+---------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"sha224"},(0,r.kt)("strong",{parentName:"h3"},"sha224")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sha224(str)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aCalculate sha224 hash value of the string str."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBINARY"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"}," SELECT sha224('abc');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+----------------------------------------------------------+\n| sha224(Utf8("abc"))                                      |\n+----------------------------------------------------------+\n| 23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7 |\n+----------------------------------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"sha256"},(0,r.kt)("strong",{parentName:"h3"},"sha256")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sha256(str)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),":   Calculate sha256 hash value of the string str."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBINARY"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT sha256('abc');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+------------------------------------------------------------------+\n| sha256(Utf8("abc"))                                              |\n+------------------------------------------------------------------+\n| ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad |\n+------------------------------------------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"sha384"},(0,r.kt)("strong",{parentName:"h3"},"sha384")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sha384(str)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),":  Calculate sha384 hash value of the string str."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBINARY"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT sha384('abc');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+--------------------------------------------------------------------------------------------------+\n| sha384(Utf8("abc"))                                                                              |\n+--------------------------------------------------------------------------------------------------+\n| cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed8086072ba1e7cc2358baeca134c825a7 |\n+--------------------------------------------------------------------------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"sha512"},(0,r.kt)("strong",{parentName:"h3"},"sha512")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sha512(str)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Calculate sha384 hash value of the string str."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBINARY"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"split_part"},(0,r.kt)("strong",{parentName:"h3"},"split_part")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"split_part(str, delim, n) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Split str according to delim, and return the nth part."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1astr, delim type is STRING, partNum type is BIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT split_part('abc|def|ghi', '|', 2);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+---------------------------------------------------+\n| splitpart(Utf8("abc|def|ghi"),Utf8("|"),Int64(2)) |\n+---------------------------------------------------+\n| def                                               |\n+---------------------------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"starts_with"},(0,r.kt)("strong",{parentName:"h3"},"starts_with")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"starts_with(expr, startExpr) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a If expr starts with startExpr, it returns true."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBOOLEAN"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT starts_with('abcdefg', 'abc');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+-----------------------------------------+\n| startswith(Utf8("abcdefg"),Utf8("abc")) |\n+-----------------------------------------+\n| true                                    |\n+-----------------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"strpos"},(0,r.kt)("strong",{parentName:"h3"},"strpos")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"strpos(str, substr ) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn the position of a substring in a specified string."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT strpos('abcdef', 'def');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+------------------------------------+\n| strpos(Utf8("abcdef"),Utf8("def")) |\n+------------------------------------+\n| 4                                  |\n+------------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"substr"},(0,r.kt)("strong",{parentName:"h3"},"substr")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"substr(expr, pos [, len] ) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Return the substring of expr (starting from pos, length len)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aexpr type is STRING, pos, len type is BIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT substr('abcdef', 4, 3);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+------------------------------------------+\n| substr(Utf8("abcdef"),Int64(4),Int64(3)) |\n+------------------------------------------+\n| def                                      |\n+------------------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"to_hex"},(0,r.kt)("strong",{parentName:"h3"},"to_hex")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"to_hex(value)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Convert a decimal number to a hexadecimal representation."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT to_hex(100);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------------+\n| tohex(Int64(100)) |\n+-------------------+\n| 64                |\n+-------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"translate"},(0,r.kt)("strong",{parentName:"h3"},"translate")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"translate(expr, from, to) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Return an expr, where all characters in from are replaced by characters in to."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aSTRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT translate('aaabbb', 'bbb', 'ccc');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+---------------------------------------------------+\n| translate(Utf8("aaabbb"),Utf8("bbb"),Utf8("ccc")) |\n+---------------------------------------------------+\n| aaaccc                                            |\n+---------------------------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"time-functions"},"Time Functions"),(0,r.kt)("h3",{id:"date_part"},(0,r.kt)("strong",{parentName:"h3"},"date_part")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"date_part(field, expr) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aExtract partial dates from timestamps or intervals."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1a"),(0,r.kt)("p",null,"field type is STRING, only one of \uff08'year', 'quarter', 'month', 'week', 'day', 'doy', 'dow', 'hour', 'minute', 'second'\uff09"),(0,r.kt)("p",null,"expr type is TIMESTAMP"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT date_part('hour', TIMESTAMP '2022-11-21T09:18:17');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+----------------------------------------------------+\n| datepart(Utf8("hour"),Utf8("2022-11-21T09:18:17")) |\n+----------------------------------------------------+\n| 9                                                  |\n+----------------------------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"date_trunc"},(0,r.kt)("strong",{parentName:"h3"},"date_trunc")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"date_trunc(field, expr) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn a value truncated to the unit specified in field."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1afield type is STRING, only one of \uff08'year', 'quarter', 'month', 'week', 'day', 'doy', 'dow', 'hour', 'minute', 'second'\uff09"),(0,r.kt)("p",null,"expr type is TIMESTAMP."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT date_trunc('month', TIMESTAMP '2022-11-21T09:18:17');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+------------------------------------------------------+\n| datetrunc(Utf8("month"),Utf8("2022-11-21T09:18:17")) |\n+------------------------------------------------------+\n| 2022-11-01T00:00:00                                  |\n+------------------------------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"date_bin"},(0,r.kt)("strong",{parentName:"h3"},"date_bin")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"date_bin(interval, source, origin)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Starting from the origin, the bucket is split by interval, and the bucket timestamp of the source is returned."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1a"),(0,r.kt)("p",null,"Interval type is STRING, which will be resolved to time interval."),(0,r.kt)("p",null,"source and origin type are TIMESTAMP."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aTIMESTAMP"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT date_bin(INTERVAL '1' DAY, TIMESTAMP '2022-11-21T09:10:24', TIMESTAMP '2022-11-01T00:00:00');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+------------------------------------------------------------------------------------------------+\n| datebin(IntervalDayTime("4294967296"),Utf8("2022-11-21T09:10:24"),Utf8("2022-11-01T00:00:00")) |\n+------------------------------------------------------------------------------------------------+\n| 2022-11-21T00:00:00                                                                            |\n+------------------------------------------------------------------------------------------------+\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"to_timestamp"},(0,r.kt)("strong",{parentName:"h3"},"to_timestamp")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"to_timestamp(expr) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn expr cast to a timestamp in a optional format."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aSTRING or BIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aTIMESTAMP. The precision depends on the parameter. If parameter type is BIGINT, it returns a nanosecond TIMESTAMP."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT to_timestamp('1970-01-01T00:00:00');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+------------------------------------------+\n| totimestamp(Utf8("1970-01-01T00:00:00")) |\n+------------------------------------------+\n| 1970-01-01T00:00:00                      |\n+------------------------------------------+\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT to_timestamp(1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------------------------+\n| totimestamp(Int64(1))         |\n+-------------------------------+\n| 1970-01-01T00:00:00.000000001 |\n+-------------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"to_timestamp_millis"},(0,r.kt)("strong",{parentName:"h3"},"to_timestamp_millis")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"to_timestamp_millis(expr) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aConvert to a millisecond-level timestamp."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aBIGINT or STRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aMillisecond-level TIMESTAMP"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT to_timestamp_millis('1970-01-01T00:00:00.00301');\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+------------------------------------------------------+\n| totimestampmillis(Utf8("1970-01-01T00:00:00.00301")) |\n+------------------------------------------------------+\n| 1970-01-01T00:00:00.003                              |\n+------------------------------------------------------+\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT to_timestamp_millis(1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-----------------------------+\n| totimestampmillis(Int64(1)) |\n+-----------------------------+\n| 1970-01-01T00:00:00.001     |\n+-----------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"to_timestamp_micros"},(0,r.kt)("strong",{parentName:"h3"},"to_timestamp_micros")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"to_timestamp_micros(expr) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aConvert to a microsecond-level timestamp."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter"),"\uff1aBIGINT or STRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1a Microsecond-level TIMESTAMP"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT to_timestamp_micros(1)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-----------------------------+\n| totimestampmicros(Int64(1)) |\n+-----------------------------+\n| 1970-01-01T00:00:00.000001  |\n+-----------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"to_timestamp_seconds"},(0,r.kt)("strong",{parentName:"h3"},"to_timestamp_seconds")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"to_timestamp_seconds(expr) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aConvert to a second-level timestamp."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aBIGINT or STRING"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aSecond-level TIMESTAMP"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT to_timestamp_seconds(1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+------------------------------+\n| totimestampseconds(Int64(1)) |\n+------------------------------+\n| 1970-01-01T00:00:01          |\n+------------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"from_unixtime"},(0,r.kt)("strong",{parentName:"h3"},"from_unixtime")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"from_unixtime(unixTime) \n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn unixTime."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1a BIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1a Unix time in second-level."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT from_unixtime(1);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+------------------------+\n| fromunixtime(Int64(1)) |\n+------------------------+\n| 1970-01-01T00:00:01    |\n+------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"now"},(0,r.kt)("strong",{parentName:"h3"},"now")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"now()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturn the current timestamp."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aTIMESTAMP"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT now();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------------------+\n| now()                            |\n+----------------------------------+\n| 2022-11-21T04:44:19.742107+00:00 |\n+----------------------------------+\n")),(0,r.kt)("h3",{id:"window-functions"},"Window Functions"),(0,r.kt)("p",null,"You can use window functions (analysis functions) in CnosDB to flexibly analyze and process data of specified window columns. The command formats, parameter descriptions and examples of window functions supported by CnosDB are shown below to guide you to use window functions to complete development."),(0,r.kt)("h3",{id:"syntax"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"function([...expr] ) OVER ([PARTITION BY expr] [ORDER BY expr] [window_frame]);\n\nfunction: {aggregate_function | analytic_function| aggregate_function}\n\nwindow_frame: { frame_mode frame_start |\n                frame_mode BETWEEN frame_start AND frame_end } }\nframe_mode: {RANGE | ROWS}\n\nframe_start: {UNBOUNDED PRECEDING | offset_start PRECEDING | CURRENT ROW | offset_start FOLLOWING }\n\nframe_end: {offset_stop PRECEDING | CURRENT ROW | offset_stop FOLLOWING | UNBOUNDED FOLLOWING}\n\n")),(0,r.kt)("h3",{id:"function-types"},"Function Types"),(0,r.kt)("h4",{id:"rank-functions"},"Rank Functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Function Names"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DENSE_RANK")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PERCENT_RANK")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"RANK")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ROW_NUMBER")))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DENSE_RANK")," | ",(0,r.kt)("inlineCode",{parentName:"p"},"RANK")," | ",(0,r.kt)("inlineCode",{parentName:"p"},"PERCENT_RANK")," need ORDER BY Clause."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"RANK"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"DENSE_RANK"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ROW_NUMBER")," need ORDER BY Clause."),(0,r.kt)("h4",{id:"aggregate-function-1"},"Aggregate Function"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"#aggregate-function"},"Aggregate Function"),"."),(0,r.kt)("h4",{id:"analysis-window-functions"},"Analysis Window Functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Function Names"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CUME_DIST")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"LAG")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"LEAD")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NTH_VALUE")))),(0,r.kt)("h3",{id:"partition-by-clause"},"PARTITION BY Clause"),(0,r.kt)("p",null,"One or more expressions used to specify a row partition. If there is no such clause, the partition is composed of all rows."),(0,r.kt)("h3",{id:"order-by-clause-1"},"ORDER BY Clause"),(0,r.kt)("p",null,"Specify the order of rows in the partition."),(0,r.kt)("h3",{id:"window_frame-clause"},"Window_frame Clause"),(0,r.kt)("p",null,"Frame is a subset of the current partition, which further subdivides windows in the partition."),(0,r.kt)("p",null,"If ROWS is specified, the window will calculate the offset in row units."),(0,r.kt)("p",null,"If RANGE is specified, the ORDER BY clause must be specified. The window calculates the offset in the unit of the value of the ORDER BY expression."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The first row of the partition in ",(0,r.kt)("inlineCode",{parentName:"li"},"UNBOUND PRECEDING"),"ROWS mode. The first value of the partition ORDER BY expression in RANGE mode."),(0,r.kt)("li",{parentName:"ul"},"The first offset line of the current line in the offset",(0,r.kt)("inlineCode",{parentName:"li"},"offset PRECEDING")," ROWS mode. The first offset value of the current value in the RANGE mode."),(0,r.kt)("li",{parentName:"ul"},"Current row in",(0,r.kt)("inlineCode",{parentName:"li"},"CURRENT ROW")," ROWS  mode.Current value in RANGE mode."),(0,r.kt)("li",{parentName:"ul"},"The next offset line of the current line in the",(0,r.kt)("inlineCode",{parentName:"li"},"offset FOLLOWING")," ROWS mode. The next offset value of the current value in the RANGE mode."),(0,r.kt)("li",{parentName:"ul"},"The last row of partition in",(0,r.kt)("inlineCode",{parentName:"li"},"UNBOUND FOLLOWING")," ROWS mode.The last value of ORDER BY expression in RANGE mode.")),(0,r.kt)("h3",{id:"restrictions-on-usage"},"Restrictions on Usage"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Window functions can only appear in SELECT statements."),(0,r.kt)("li",{parentName:"ul"},"Window functions and aggregate functions cannot be nested in window functions.\u3002")),(0,r.kt)("h2",{id:"window-function-list"},"Window Function List"),(0,r.kt)("p",null,"Include ",(0,r.kt)("a",{parentName:"p",href:"#aggregate-function"},"Aggregate functions"),"."),(0,r.kt)("h3",{id:"row_number"},(0,r.kt)("strong",{parentName:"h3"},"ROW_NUMBER")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ROW_NUMBER() OVER([partition_clause] [orderby_clause])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aAssign a unique sequence number (starting from 1) to each row according to the row order in the window partition."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNone"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT temperature, station, \n       ROW_NUMBER() OVER (PARTITION BY station) \nFROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+-------------+--------------+\n| temperature | station     | ROW_NUMBER() |\n+-------------+-------------+--------------+\n| 69          | LianYunGang | 1            |\n| 80          | LianYunGang | 2            |\n| 74          | LianYunGang | 3            |\n| 70          | LianYunGang | 4            |\n| 70          | LianYunGang | 5            |\n| 70          | LianYunGang | 6            |\n| 69          | XiaoMaiDao  | 1            |\n| 78          | XiaoMaiDao  | 2            |\n| 62          | XiaoMaiDao  | 3            |\n| 79          | XiaoMaiDao  | 4            |\n| 53          | XiaoMaiDao  | 5            |\n| 72          | XiaoMaiDao  | 6            |\n| 71          | XiaoMaiDao  | 7            |\n+-------------+-------------+--------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"rank"},(0,r.kt)("strong",{parentName:"h3"},"RANK")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"RANK() OVER([partition_clause] [orderby_clause])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturns the rank (jump rank) of a value relative to all values in the partition."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNone"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station, temperature, \n       RANK() OVER (PARTITION BY station ORDER BY temperature) \nFROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+-------------+--------+\n| station     | temperature | RANK() |\n+-------------+-------------+--------+\n| LianYunGang | 69          | 1      |\n| LianYunGang | 70          | 2      |\n| LianYunGang | 70          | 2      |\n| LianYunGang | 70          | 2      |\n| LianYunGang | 74          | 5      |\n| LianYunGang | 80          | 6      |\n| XiaoMaiDao  | 53          | 1      |\n| XiaoMaiDao  | 62          | 2      |\n| XiaoMaiDao  | 69          | 3      |\n| XiaoMaiDao  | 71          | 4      |\n| XiaoMaiDao  | 72          | 5      |\n| XiaoMaiDao  | 78          | 6      |\n| XiaoMaiDao  | 79          | 7      |\n+-------------+-------------+--------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"dense_rank"},(0,r.kt)("strong",{parentName:"h3"},"DENSE_RANK")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"DENSE_RANK() OVER([partition_clause] [orderby_clause])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturns the rank (consecutive rank) of a value relative to all values in the partition."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNone"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aBIGINT"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station, temperature, \n       DENSE_RANK() OVER (PARTITION BY station ORDER BY temperature) \nFROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+-------------+--------------+\n| station     | temperature | DENSE_RANK() |\n+-------------+-------------+--------------+\n| LianYunGang | 69          | 1            |\n| LianYunGang | 70          | 2            |\n| LianYunGang | 70          | 2            |\n| LianYunGang | 70          | 2            |\n| LianYunGang | 74          | 3            |\n| LianYunGang | 80          | 4            |\n| XiaoMaiDao  | 53          | 1            |\n| XiaoMaiDao  | 62          | 2            |\n| XiaoMaiDao  | 69          | 3            |\n| XiaoMaiDao  | 71          | 4            |\n| XiaoMaiDao  | 72          | 5            |\n| XiaoMaiDao  | 78          | 6            |\n| XiaoMaiDao  | 79          | 7            |\n+-------------+-------------+--------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"percent_rank"},(0,r.kt)("strong",{parentName:"h3"},"PERCENT_RANK")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"PERCENT_RANK() OVER([partition_clause] [orderby_clause])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Calculate the percentage ranking of a value in the partition."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNone"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"}," SELECT station, temperature, \n        PERCENT_RANK() OVER (PARTITION BY station ORDER BY temperature) \n FROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+-------------+---------------------+\n| station     | temperature | PERCENT_RANK()      |\n+-------------+-------------+---------------------+\n| LianYunGang | 69          | 0                   |\n| LianYunGang | 70          | 0.2                 |\n| LianYunGang | 70          | 0.2                 |\n| LianYunGang | 70          | 0.2                 |\n| LianYunGang | 74          | 0.8                 |\n| LianYunGang | 80          | 1                   |\n| XiaoMaiDao  | 53          | 0                   |\n| XiaoMaiDao  | 62          | 0.16666666666666666 |\n| XiaoMaiDao  | 69          | 0.3333333333333333  |\n| XiaoMaiDao  | 71          | 0.5                 |\n| XiaoMaiDao  | 72          | 0.6666666666666666  |\n| XiaoMaiDao  | 78          | 0.8333333333333334  |\n| XiaoMaiDao  | 79          | 1                   |\n+-------------+-------------+---------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"cume_dist"},(0,r.kt)("strong",{parentName:"h3"},"CUME_DIST")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CUME_DIST() OVER ([partition_clause] [orderby_clause])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturns the position of a value relative to all values in the partition."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aNone"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aDOUBLE"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station, temperature, \n       CUME_DIST() OVER (PARTITION BY station ORDER BY temperature) \nFROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+-------------+---------------------+\n| station     | temperature | CUME_DIST()         |\n+-------------+-------------+---------------------+\n| LianYunGang | 69          | 0.16666666666666666 |\n| LianYunGang | 70          | 0.6666666666666666  |\n| LianYunGang | 70          | 0.6666666666666666  |\n| LianYunGang | 70          | 0.6666666666666666  |\n| LianYunGang | 74          | 0.8333333333333334  |\n| LianYunGang | 80          | 1                   |\n| XiaoMaiDao  | 53          | 0.14285714285714285 |\n| XiaoMaiDao  | 62          | 0.2857142857142857  |\n| XiaoMaiDao  | 69          | 0.42857142857142855 |\n| XiaoMaiDao  | 71          | 0.5714285714285714  |\n| XiaoMaiDao  | 72          | 0.7142857142857143  |\n| XiaoMaiDao  | 78          | 0.8571428571428571  |\n| XiaoMaiDao  | 79          | 1                   |\n+-------------+-------------+---------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"lag"},(0,r.kt)("strong",{parentName:"h3"},"LAG")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"lag( expr [, offset [, default] ] ) OVER([partition_clause] orderby_clause)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturns the expr values of the offset rows before the current row in the partition."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aexpr type is any type."),(0,r.kt)("p",null,"offset type is BIGINT. When offset is negative, the values are returned from the last offset lines, defaults to 1."),(0,r.kt)("p",null,"The type of default should be the consistent with that of expr, defaults to NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aConsistent with expr."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station, temperature, \n       LAG(temperature, 2) OVER (PARTITION BY station ORDER BY temperature) \nFROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+-------------+-------------------------------+\n| station     | temperature | LAG(air.temperature,Int64(2)) |\n+-------------+-------------+-------------------------------+\n| LianYunGang | 69          |                               |\n| LianYunGang | 70          |                               |\n| LianYunGang | 70          | 69                            |\n| LianYunGang | 70          | 70                            |\n| LianYunGang | 74          | 70                            |\n| LianYunGang | 80          | 70                            |\n| XiaoMaiDao  | 53          |                               |\n| XiaoMaiDao  | 62          |                               |\n| XiaoMaiDao  | 69          | 53                            |\n| XiaoMaiDao  | 71          | 62                            |\n| XiaoMaiDao  | 72          | 69                            |\n| XiaoMaiDao  | 78          | 71                            |\n| XiaoMaiDao  | 79          | 72                            |\n+-------------+-------------+-------------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"lead"},(0,r.kt)("strong",{parentName:"h3"},"LEAD")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"lead(expr [, offset [, default] ] ) OVER ([partition_clause] orderby_clause)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1aReturns the expr values of the offset rows after the current row in the partition."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aexpr type is any type."),(0,r.kt)("p",null,"offset type is BIGINT. When offset is negative, the values are returned from the first offset lines, defaults to 1."),(0,r.kt)("p",null,"The type of default should be the consistent with that of expr, defaults to NULL."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aConsistent with expr."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station, temperature, \n       LEAD(temperature, 2) OVER (PARTITION BY station ORDER BY temperature) \nFROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+-------------+--------------------------------+\n| station     | temperature | LEAD(air.temperature,Int64(2)) |\n+-------------+-------------+--------------------------------+\n| LianYunGang | 69          | 70                             |\n| LianYunGang | 70          | 70                             |\n| LianYunGang | 70          | 74                             |\n| LianYunGang | 70          | 80                             |\n| LianYunGang | 74          |                                |\n| LianYunGang | 80          |                                |\n| XiaoMaiDao  | 53          | 69                             |\n| XiaoMaiDao  | 62          | 71                             |\n| XiaoMaiDao  | 69          | 72                             |\n| XiaoMaiDao  | 71          | 78                             |\n| XiaoMaiDao  | 72          | 79                             |\n| XiaoMaiDao  | 78          |                                |\n| XiaoMaiDao  | 79          |                                |\n+-------------+-------------+--------------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"first_value"},(0,r.kt)("strong",{parentName:"h3"},"FIRST_VALUE")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"FIRST_VALUE(expr) OVER ([partition_clause] [orderby_clause])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Returns the first value in a set of values, usually an ordered set."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aexpr type is any type, ignore_ nulls type is BOOLEAN, defaults to false."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aConsistent with expr."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station, temperature, \n       FIRST_VALUE(temperature) OVER (PARTITION BY station ORDER BY temperature) \nFROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+-------------+------------------------------+\n| station     | temperature | FIRST_VALUE(air.temperature) |\n+-------------+-------------+------------------------------+\n| LianYunGang | 69          | 69                           |\n| LianYunGang | 70          | 69                           |\n| LianYunGang | 70          | 69                           |\n| LianYunGang | 70          | 69                           |\n| LianYunGang | 74          | 69                           |\n| LianYunGang | 80          | 69                           |\n| XiaoMaiDao  | 53          | 53                           |\n| XiaoMaiDao  | 62          | 53                           |\n| XiaoMaiDao  | 69          | 53                           |\n| XiaoMaiDao  | 71          | 53                           |\n| XiaoMaiDao  | 72          | 53                           |\n| XiaoMaiDao  | 78          | 53                           |\n| XiaoMaiDao  | 79          | 53                           |\n+-------------+-------------+------------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"last_value"},(0,r.kt)("strong",{parentName:"h3"},"LAST_VALUE")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"LAST_VALUE(expr) OVER ([partition_clause] [orderby_clause])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Returns the last value in the current window."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aexpr type is any type, ignore_ nulls type is BOOLEAN, defaults to false."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aConsistent with expr."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station, temperature, \n       LAST_VALUE(temperature) OVER (PARTITION BY station ORDER BY temperature) \nFROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+-------------+-----------------------------+\n| station     | temperature | LAST_VALUE(air.temperature) |\n+-------------+-------------+-----------------------------+\n| LianYunGang | 69          | 69                          |\n| LianYunGang | 70          | 70                          |\n| LianYunGang | 70          | 70                          |\n| LianYunGang | 70          | 70                          |\n| LianYunGang | 74          | 74                          |\n| LianYunGang | 80          | 80                          |\n| XiaoMaiDao  | 53          | 53                          |\n| XiaoMaiDao  | 62          | 62                          |\n| XiaoMaiDao  | 69          | 69                          |\n| XiaoMaiDao  | 71          | 71                          |\n| XiaoMaiDao  | 72          | 72                          |\n| XiaoMaiDao  | 78          | 78                          |\n| XiaoMaiDao  | 79          | 79                          |\n+-------------+-------------+-----------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"nth_value"},(0,r.kt)("strong",{parentName:"h3"},"NTH_VALUE")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"NTH_VALUE(expr, number) OVER ([partition_clause] [orderby_clause])\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Function"),"\uff1a Returns the expression value of the specified row of the window frame relative to the first row of the window."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameter Type"),"\uff1aexpr type is any type, number type is BIGINT."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Return Type"),"\uff1aConsistent with expr."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station, temperature, \n       NTH_VALUE(temperature, 2) OVER (PARTITION BY station ORDER BY temperature) \nFROM air;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+-------------+-------------------------------------+\n| station     | temperature | NTH_VALUE(air.temperature,Int64(2)) |\n+-------------+-------------+-------------------------------------+\n| LianYunGang | 69          |                                     |\n| LianYunGang | 70          | 70                                  |\n| LianYunGang | 70          | 70                                  |\n| LianYunGang | 70          | 70                                  |\n| LianYunGang | 74          | 70                                  |\n| LianYunGang | 80          | 70                                  |\n| XiaoMaiDao  | 53          |                                     |\n| XiaoMaiDao  | 62          | 62                                  |\n| XiaoMaiDao  | 69          | 62                                  |\n| XiaoMaiDao  | 71          | 62                                  |\n| XiaoMaiDao  | 72          | 62                                  |\n| XiaoMaiDao  | 78          | 62                                  |\n| XiaoMaiDao  | 79          | 62                                  |\n+-------------+-------------+-------------------------------------+\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"system-schema"},"System Schema"),(0,r.kt)("p",null,"CnosDB provides the system to check the status and information of CnosDB clusters. The system schema is a read-only schema. You can query the system schema using the SQL statement."),(0,r.kt)("p",null,"CnosDB store the shema information in two specific databases\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"CLUSTER_SCHEMA : The information of the cluster."),(0,r.kt)("li",{parentName:"ul"},"INFORMATION_SCHEMA : The information of the tenant.")),(0,r.kt)("h3",{id:"cluster_schema"},"CLUSTER_SCHEMA"),(0,r.kt)("p",null,"The CLUSTER_SCHEMA database belongs to the cluster, only the administrator users have the access to the database."),(0,r.kt)("p",null,"The database contains metadata information about the cluster, such as tenant information and user information."),(0,r.kt)("h3",{id:"tenants"},"TENANTS"),(0,r.kt)("p",null,"This schema can be used to query information about all tenants in the cluster."),(0,r.kt)("h4",{id:"schema-definition"},"Schema Definition"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TENANT_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"tenant name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TENANT_OPTIONS"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Configure of tenant in json")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cluster_schema.tenants;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+-------------+---------------------------------------------------+\n| tenant_name | tenant_options                                    |\n+-------------+---------------------------------------------------+\n| cnosdb      | {"comment":"system tenant","limiter_config":null} |\n+-------------+---------------------------------------------------+\n')),(0,r.kt)("h3",{id:"users"},"USERS"),(0,r.kt)("h4",{id:"schema-definition-1"},"Schema Definition"),(0,r.kt)("p",null,"This schema allows you to query information about all users in the cluster."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"USER_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"User name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IS_ADMIN"),(0,r.kt)("td",{parentName:"tr",align:null},"BOOLEAN"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether administrator")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"USER_OPTIONS"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Configure of users in json")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cluster_schema.users;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'+-----------+----------+-------------------------------------------------------------------------------------------------+\n| user_name | is_admin | user_options                                                                                    |\n+-----------+----------+-------------------------------------------------------------------------------------------------+\n| root      | true     | {"password":"*****","must_change_password":true,"rsa_public_key":null,"comment":"system admin"} |\n+-----------+----------+-------------------------------------------------------------------------------------------------+\n')),(0,r.kt)("h3",{id:"information_schema"},"INFORMATION_SCHEMA"),(0,r.kt)("p",null,"The database belongs to a tenant. When a tenant is created, the database is automatically created and visible to all members under the tenant."),(0,r.kt)("h3",{id:"databases"},"DATABASES"),(0,r.kt)("p",null,"This schema stores tenant database information."),(0,r.kt)("h4",{id:"schema-definition-2"},"Schema Definition"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TENANT_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Tenant name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DATABASE_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Database name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TTL"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Time the data file saved")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SHARD"),(0,r.kt)("td",{parentName:"tr",align:null},"BIGINT UNSIGNED"),(0,r.kt)("td",{parentName:"tr",align:null},"Nmuber of shards")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"VNODE_DURATION"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Time range of data in shard")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PREPLICA"),(0,r.kt)("td",{parentName:"tr",align:null},"BIGINT UNSIGNED"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of replica")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PERCISION"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Percision of database")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM information_schema.databases;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+---------------+----------+-------+----------------+---------+-----------+\n| tenant_name | database_name | ttl      | shard | vnode_duration | replica | percision |\n+-------------+---------------+----------+-------+----------------+---------+-----------+\n| cnosdb      | public        | 365 Days | 1     | 365 Days       | 1       | NS        |\n+-------------+---------------+----------+-------+----------------+---------+-----------+\n")),(0,r.kt)("h3",{id:"tables"},"TABLES"),(0,r.kt)("p",null,"This schema stores information about all tables under the tenant."),(0,r.kt)("h4",{id:"schema-definition-3"},"Schema Definition"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TABLE_TENANT"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Tenant name of the table")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TABLE_DATABASE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Database name of the table")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TABLE_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Table name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TABLE_TYPE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Table type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TABLE_ENGINE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Table storage engine. External and internal tskv tables supported now")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TABLE_OPTION"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"A JSON string that records all parameters of the table")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM information_schema.tables;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+--------------+----------------+------------+------------+--------------+---------------+\n| table_tenant | table_database | table_name | table_type | table_engine | table_options |\n+--------------+----------------+------------+------------+--------------+---------------+\n| cnosdb       | public         | wind       | BASE TABLE | TSKV         | TODO          |\n| cnosdb       | public         | air        | BASE TABLE | TSKV         | TODO          |\n| cnosdb       | public         | sea        | BASE TABLE | TSKV         | TODO          |\n+--------------+----------------+------------+------------+--------------+---------------+\n")),(0,r.kt)("h3",{id:"columns"},"COLUMNS"),(0,r.kt)("p",null,"This schema stores the definitions of all columns under the tenant."),(0,r.kt)("h4",{id:"schema-definition-4"},"Schema Definition"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TABLE_TENANT"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Tenant name of the table")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TABLE_DATABASE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Database name of the table")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TABLE_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Table name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"COLUMN_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Column name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ORDINAL_POSITION"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Order of the column in table")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"COLUMN_TYPE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Column type, unique to the tskv table, supports TIME, TAG, FIELD, and usually Field")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IS_NULLABLE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},'"YES" if the column may contain NULL, "NO" otherwise')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DATA_TYPE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Data type of the column")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"COMPRESSION_CODEC"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Compression algorithm that the column uses")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM information_schema.columns;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+---------------+------------+-------------+-------------+------------------+----------------+-------------+-----------+-------------------+\n| tenant_name | database_name | table_name | column_name | column_type | ordinal_position | column_default | is_nullable | data_type | compression_codec |\n+-------------+---------------+------------+-------------+-------------+------------------+----------------+-------------+-----------+-------------------+\n| cnosdb      | public        | wind       | time        | TIME        | 0                | NULL           | false       | TIMESTAMP | DEFAULT           |\n| cnosdb      | public        | wind       | station     | TAG         | 1                | NULL           | true        | STRING    | DEFAULT           |\n| cnosdb      | public        | wind       | speed       | FIELD       | 2                | NULL           | true        | DOUBLE    | DEFAULT           |\n| cnosdb      | public        | wind       | direction   | FIELD       | 3                | NULL           | true        | DOUBLE    | DEFAULT           |\n| cnosdb      | public        | air        | time        | TIME        | 0                | NULL           | false       | TIMESTAMP | DEFAULT           |\n| cnosdb      | public        | air        | station     | TAG         | 1                | NULL           | true        | STRING    | DEFAULT           |\n| cnosdb      | public        | air        | visibility  | FIELD       | 2                | NULL           | true        | DOUBLE    | DEFAULT           |\n| cnosdb      | public        | air        | temperature | FIELD       | 3                | NULL           | true        | DOUBLE    | DEFAULT           |\n| cnosdb      | public        | air        | pressure    | FIELD       | 4                | NULL           | true        | DOUBLE    | DEFAULT           |\n| cnosdb      | public        | sea        | time        | TIME        | 0                | NULL           | false       | TIMESTAMP | DEFAULT           |\n| cnosdb      | public        | sea        | station     | TAG         | 1                | NULL           | true        | STRING    | DEFAULT           |\n| cnosdb      | public        | sea        | temperature | FIELD       | 2                | NULL           | true        | DOUBLE    | DEFAULT           |\n+-------------+---------------+------------+-------------+-------------+------------------+----------------+-------------+-----------+-------------------+\n")),(0,r.kt)("h3",{id:"enabled_roles"},"ENABLED_ROLES"),(0,r.kt)("p",null,"This schema displays information about the role of the current user under the current tenant."),(0,r.kt)("h4",{id:"schema-definition-5"},"Schema Definition"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ROLE_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Role name")))),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM information_schema.enabled_roles;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-----------+\n| role_name |\n+-----------+\n| owner     |\n+-----------+\n")),(0,r.kt)("h3",{id:"roles"},"ROLES"),(0,r.kt)("p",null,"This schema shows all available roles (including system and custom roles) under the current tenant."),(0,r.kt)("p",null,"This schema is only visible to the Owner of the current tenant."),(0,r.kt)("h4",{id:"schema-definition-6"},"Schema Definition"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ROLE_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Role name under the tenant")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ROLE_TYPE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Role type, custom role or system role")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"INHERIT_ROLE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the system role that the custom role inherits from, or NULL if it is a system role")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM information_schema.roles;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-----------+-----------+--------------+\n| role_name | role_type | inherit_role |\n+-----------+-----------+--------------+\n| owner     | system    |              |\n| member    | system    |              |\n+-----------+-----------+--------------+\n")),(0,r.kt)("h3",{id:"database_privileges"},"DATABASE_PRIVILEGES"),(0,r.kt)("h4",{id:"schema-definition-7"},"Schema Definition"),(0,r.kt)("p",null,"This schema shows all permissions on db that have been granted to the specified role under the tenant."),(0,r.kt)("p",null,"All records of this schema are visible to the Owner of the current tenant."),(0,r.kt)("p",null,"For non-owner elements, only the records for the corresponding role are displayed."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TENANT_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Tenant name of the database to which the permission is granted")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DATABASE_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the database to which the permission was granted")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PRIVILEGE_TYPE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Type of permission granted, READ/WRITE/ALL")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ROLE_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the role granted")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE ROLE rrr INHERIT member;\nGRANT READ ON DATABASE air TO ROLE rrr;\nSELECT * FROM information_schema.database_privileges;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-------------+---------------+----------------+-----------+\n| tenant_name | database_name | privilege_type | role_name |\n+-------------+---------------+----------------+-----------+\n| cnosdb      | air           | Read           | rrr       |\n+-------------+---------------+----------------+-----------+\n")),(0,r.kt)("h3",{id:"members"},"MEMBERS"),(0,r.kt)("p",null,"This schema shows the membership information under the tenant."),(0,r.kt)("p",null,"All records of this schema are visible to all members of the current tenant."),(0,r.kt)("h4",{id:"schema-definition-8"},"Schema Definition"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"USER_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"User name under tenant")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ROLE_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Role name")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM information_schema.members;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+-----------+-----------+\n| user_name | role_name |\n+-----------+-----------+\n| root      | owner     |\n+-----------+-----------+\n")),(0,r.kt)("h3",{id:"queriesinformation_schema"},"QUERIES(INFORMATION_SCHEMA)"),(0,r.kt)("p",null,"This schema shows a real-time snapshot of SQL statements, which is used to monitor SQL jobs in real time."),(0,r.kt)("p",null,"All records of this schema are visible to the owner of the current tenant."),(0,r.kt)("p",null,"For non-owner members, only the SQL submitted by the current member is displayed."),(0,r.kt)("h4",{id:"schema-definition-9"},"Schema Definition"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"QUERY_ID"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of SQL")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"QUERY_TEXT"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Content of SQL")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"USER_ID"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of user which commit the SQL")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"USER_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of user which commit the SQL")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TENANT_ID"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Tenant ID")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TENANT_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Tenant name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"STATE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Status of SQL, including: ACCEPTING,DISPATCHING,ANALYZING,OPTMIZING,SCHEDULING")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DURATION"),(0,r.kt)("td",{parentName:"tr",align:null},"BIGINT UNSIGNED"),(0,r.kt)("td",{parentName:"tr",align:null},"Time that SQL costs")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM information_schema.queries;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------+------------------------------------------------------------------+-----------------------------------------+-----------+----------------------------------------+-------------+------------+--------------+\n| query_id | query_text                                                       | user_id                                 | user_name | tenant_id                              | tenant_name | state      | duration     |\n+----------+------------------------------------------------------------------+-----------------------------------------+-----------+----------------------------------------+-------------+------------+--------------+\n| 36       | select * FROM air join sea ON air.temperature = sea.temperature; | 108709109615072923019194003831375742761 | root      | 13215126763611749424716665303609634152 | cnosdb      | SCHEDULING | 12.693345666 |\n+----------+------------------------------------------------------------------+-----------------------------------------+-----------+----------------------------------------+-------------+------------+--------------+\n")),(0,r.kt)("h4",{id:"show-queries"},"SHOW QUERIES"),(0,r.kt)("p",null,"You can also see the executing SQL statements using the 'SHOW QUERIES' statement, which is a wrapper around the QUERIES schema."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SHOW QUERIES;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------+------------------------------------------------------------------+-----------------------------------------+-----------+----------------------------------------+-------------+------------+--------------+\n| query_id | query_text                                                       | user_id                                 | user_name | tenant_id                              | tenant_name | state      | duration     |\n+----------+------------------------------------------------------------------+-----------------------------------------+-----------+----------------------------------------+-------------+------------+--------------+\n| 36       | select * FROM air join sea ON air.temperature = sea.temperature; | 108709109615072923019194003831375742761 | root      | 13215126763611749424716665303609634152 | cnosdb      | SCHEDULING | 12.693345666 |\n+----------+------------------------------------------------------------------+-----------------------------------------+-----------+----------------------------------------+-------------+------------+--------------+\n")),(0,r.kt)("h2",{id:"usage_schema"},"USAGE_SCHEMA"),(0,r.kt)("p",null,"This database, which belongs to a Tenant, is automatically created when a tenant is created and is visible to all members under the tenant."),(0,r.kt)("p",null,"For regular users, only the part of the table in USAGE_SCHEMA that belongs to the current user tenant will be visible."),(0,r.kt)("p",null,"For system administrators, the entire table in USAGE_SCHEMA is visible."),(0,r.kt)("h3",{id:"disk_storage"},"DISK_STORAGE"),(0,r.kt)("p",null,"This schema records the amount of disk space, in bytes, occupied by each vnode in the cluster."),(0,r.kt)("h4",{id:"schema-definition-10"},"Schema Definition"),(0,r.kt)("p",null,"The definition of the schema seen by the administrator:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TIME"),(0,r.kt)("td",{parentName:"tr",align:null},"TIMESTAMP"),(0,r.kt)("td",{parentName:"tr",align:null},"Count the disk storage time")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DATABASE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"The database to which the vnode belongs")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NODE_ID"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of data node")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TENANT"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"The tenant to which the vnode belongs")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"VNODE_ID"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of vnode")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"VALUE"),(0,r.kt)("td",{parentName:"tr",align:null},"BIGINT UNSIGNED"),(0,r.kt)("td",{parentName:"tr",align:null},"Disk size occupied by the vnode")))),(0,r.kt)("p",null,"Common users can access only the tenant information of the current session."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TIME"),(0,r.kt)("td",{parentName:"tr",align:null},"TIMESTAMP"),(0,r.kt)("td",{parentName:"tr",align:null},"Count the disk storage time")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DATABASE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"The database to which the vnode belongs")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NODE_ID"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of data node")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TENANT"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"The tenant to which the vnode belongs")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"VNODE_ID"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of vnode")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"VALUE"),(0,r.kt)("td",{parentName:"tr",align:null},"BIGINT UNSIGNED"),(0,r.kt)("td",{parentName:"tr",align:null},"Disk size occupied by the vnode")))),(0,r.kt)("h4",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"\nadministator:\n\n```sql\nselect * from usage_schmea.disk_storage order by time desc limit 2;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------------+--------------+---------+--------+----------+-------+\n| time                       | database     | node_id | tenant | vnode_id | value |\n+----------------------------+--------------+---------+--------+----------+-------+\n| 2023-02-23T03:57:52.566487 | usage_schema | 1001    | cnosdb | 3        | 0     |\n| 2023-02-23T03:57:42.566642 | usage_schema | 1001    | cnosdb | 3        | 0     |\n+----------------------------+--------------+---------+--------+----------+-------+\n")),(0,r.kt)("p",null,"common user:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from usage_schema.disk_storage order by time desc limit 2;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------------+--------------+---------+----------+-------+\n| time                       | database     | node_id | vnode_id | value |\n+----------------------------+--------------+---------+----------+-------+\n| 2023-02-23T06:34:36.578458 | usage_schema | 1001    | 3        | 0     |\n| 2023-02-23T06:34:26.577871 | usage_schema | 1001    | 3        | 0     |\n+----------------------------+--------------+---------+----------+-------+\n")),(0,r.kt)("h3",{id:"data_in"},"DATA_IN"),(0,r.kt)("p",null,"This schema records the approximate total volume of read traffic when data is written to the DB."),(0,r.kt)("h4",{id:"schema-definition-11"},"Schema definition"),(0,r.kt)("p",null,"The definition of the schema seen by the administrator:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TIME"),(0,r.kt)("td",{parentName:"tr",align:null},"TIMESTAMP"),(0,r.kt)("td",{parentName:"tr",align:null},"Time of writes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DATABASE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Database name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NODE_ID"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of data node")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TENANT"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"The tenant of the database")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"USER"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"User name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"VALUE"),(0,r.kt)("td",{parentName:"tr",align:null},"BIGINT UNSIGNED"),(0,r.kt)("td",{parentName:"tr",align:null},"Total write traffic size")))),(0,r.kt)("p",null,"Common users can access only the tenant information of the current session."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TIME"),(0,r.kt)("td",{parentName:"tr",align:null},"TIMESTAMP"),(0,r.kt)("td",{parentName:"tr",align:null},"Time of writes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DATABASE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Database name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NODE_ID"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of data node")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"USER"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"User name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"VALUE"),(0,r.kt)("td",{parentName:"tr",align:null},"BIGINT UNSIGNED"),(0,r.kt)("td",{parentName:"tr",align:null},"Total write traffic size")))),(0,r.kt)("h4",{id:"example-2"},"Example"),(0,r.kt)("p",null,"administrator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from usage_schema.data_in order by time desc limit 2;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------------+--------------+---------+--------+--------+\n| time                       | database     | node_id | tenant | value  |\n+----------------------------+--------------+---------+--------+--------+\n| 2023-02-23T06:50:36.578641 | usage_schema | 1001    | cnosdb | 741552 |\n| 2023-02-23T06:50:26.577544 | usage_schema | 1001    | cnosdb | 739612 |\n+----------------------------+--------------+---------+--------+--------+\n")),(0,r.kt)("p",null,"common user:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from usage_schema.data_in order by time desc limit 2;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------------+--------------+---------+--------+\n| time                       | database     | node_id | value  |\n+----------------------------+--------------+---------+--------+\n| 2023-02-23T06:43:46.587023 | usage_schema | 1001    | 662012 |\n| 2023-02-23T06:43:36.586154 | usage_schema | 1001    | 660072 |\n+----------------------------+--------------+---------+--------+\n")),(0,r.kt)("h3",{id:"data_out"},"DATA_OUT"),(0,r.kt)("p",null,"This schema records the approximate total volume of read traffic when data is queried from the DB."),(0,r.kt)("h4",{id:"schema-definition-12"},"Schema definition"),(0,r.kt)("p",null,"The definition of the schema seen by the administrator:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TIME"),(0,r.kt)("td",{parentName:"tr",align:null},"TIMESTAMP"),(0,r.kt)("td",{parentName:"tr",align:null},"Time of writes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DATABASE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Database name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NODE_ID"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of data node")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TENANT"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"The tenant of the database")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"USER"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"User name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"VALUE"),(0,r.kt)("td",{parentName:"tr",align:null},"BIGINT UNSIGNED"),(0,r.kt)("td",{parentName:"tr",align:null},"Total read traffic size")))),(0,r.kt)("p",null,"Common users can access only the tenant information of the current session."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TIME"),(0,r.kt)("td",{parentName:"tr",align:null},"TIMESTAMP"),(0,r.kt)("td",{parentName:"tr",align:null},"Time of writes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DATABASE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Database name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NODE_ID"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of data node")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"USER"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"User name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"VALUE"),(0,r.kt)("td",{parentName:"tr",align:null},"BIGINT UNSIGNED"),(0,r.kt)("td",{parentName:"tr",align:null},"Total read traffic size")))),(0,r.kt)("h4",{id:"example-3"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from usage_schema.data_out order by time desc limit 2;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------------+--------------+---------+--------+----------+\n| time                       | database     | node_id | tenant | value    |\n+----------------------------+--------------+---------+--------+----------+\n| 2023-02-23T06:51:16.577110 | usage_schema | 1001    | cnosdb | 15156112 |\n| 2023-02-23T06:51:06.577132 | usage_schema | 1001    | cnosdb | 15156112 |\n+----------------------------+--------------+---------+--------+----------+\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from usage_schema.data_out order by time desc limit 2;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------------+--------------+---------+----------+\n| time                       | database     | node_id | value    |\n+----------------------------+--------------+---------+----------+\n| 2023-02-23T06:51:46.576451 | usage_schema | 1001    | 16173128 |\n| 2023-02-23T06:51:36.576904 | usage_schema | 1001    | 16173128 |\n+----------------------------+--------------+---------+----------+\n")),(0,r.kt)("h3",{id:"queries-usage_schema"},"QUERIES (USAGE_SCHEMA)"),(0,r.kt)("p",null,"This schema records the number of queries to the database."),(0,r.kt)("h4",{id:"schema-definition-13"},"Schema definition"),(0,r.kt)("p",null,"The definition of the schema seen by the administrator:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TIME"),(0,r.kt)("td",{parentName:"tr",align:null},"TIMESTAMP"),(0,r.kt)("td",{parentName:"tr",align:null},"Time of writes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DATABASE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Database name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NODE_ID"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of data node")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TENANT"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"The tenant of the database")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"USER"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"User name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"VALUE"),(0,r.kt)("td",{parentName:"tr",align:null},"BIGINT UNSIGNED"),(0,r.kt)("td",{parentName:"tr",align:null},"User writes times")))),(0,r.kt)("p",null,"Common users can access only the tenant information of the current session."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TIME"),(0,r.kt)("td",{parentName:"tr",align:null},"TIMESTAMP"),(0,r.kt)("td",{parentName:"tr",align:null},"Time of writes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DATABASE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Database name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NODE_ID"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of data node")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"USER"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"User name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"VALUE"),(0,r.kt)("td",{parentName:"tr",align:null},"BIGINT UNSIGNED"),(0,r.kt)("td",{parentName:"tr",align:null},"User queries times")))),(0,r.kt)("h4",{id:"example-4"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from usage_schema.queries order by time desc limit 2;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------------+--------------+---------+--------+-------+-------+\n| time                       | database     | node_id | tenant | user  | value |\n+----------------------------+--------------+---------+--------+-------+-------+\n| 2023-02-23T06:53:16.575193 | usage_schema | 1001    | cnosdb | usage | 9     |\n| 2023-02-23T06:53:16.575193 | usage_schema | 1001    | cnosdb | root  | 17    |\n+----------------------------+--------------+---------+--------+-------+-------+\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from usage_schema.queries order by time desc limit 2;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------------+--------------+---------+-------+-------+\n| time                       | database     | node_id | user  | value |\n+----------------------------+--------------+---------+-------+-------+\n| 2023-02-23T06:52:36.576098 | usage_schema | 1001    | usage | 9     |\n| 2023-02-23T06:52:36.576097 | usage_schema | 1001    | root  | 17    |\n+----------------------------+--------------+---------+-------+-------+\n")),(0,r.kt)("h3",{id:"writes"},"WRITES"),(0,r.kt)("p",null,"This schema records the number of writes to the database."),(0,r.kt)("p",null,"Notice: The schema will only be created when we write in ",(0,r.kt)("a",{parentName:"p",href:"./rest_api.md"},"lineprotocol"),"/",(0,r.kt)("a",{parentName:"p",href:"./ecosystem.md#remote-write"},"Prometheus remote write")," successfully."),(0,r.kt)("h4",{id:"schema-definition-14"},"Schema definition"),(0,r.kt)("p",null,"The definition of the schema seen by the administrator:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TIME"),(0,r.kt)("td",{parentName:"tr",align:null},"TIMESTAMP"),(0,r.kt)("td",{parentName:"tr",align:null},"Time of writes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DATABASE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Database name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NODE_ID"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of data node")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TENANT"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"The tenant of the database")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"USER"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"User name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"VALUE"),(0,r.kt)("td",{parentName:"tr",align:null},"BIGINT UNSIGNED"),(0,r.kt)("td",{parentName:"tr",align:null},"User writes times")))),(0,r.kt)("p",null,"Common users can access only the tenant information of the current session."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TIME"),(0,r.kt)("td",{parentName:"tr",align:null},"TIMESTAMP"),(0,r.kt)("td",{parentName:"tr",align:null},"Time of writes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DATABASE"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Database name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NODE_ID"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of data node")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"USER"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"User name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"VALUE"),(0,r.kt)("td",{parentName:"tr",align:null},"BIGINT UNSIGNED"),(0,r.kt)("td",{parentName:"tr",align:null},"User writes times")))),(0,r.kt)("h4",{id:"example-5"},"Example"),(0,r.kt)("p",null,"administrator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from usage_schema.writes order by time desc limit 2;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------------+----------+---------+--------+------+-------+\n| time                       | database | node_id | tenant | user | value |\n+----------------------------+----------+---------+--------+------+-------+\n| 2023-02-23T07:05:56.549282 | public   | 1001    | cnosdb | root | 2     |\n| 2023-02-23T07:05:46.549188 | public   | 1001    | cnosdb | root | 2     |\n+----------------------------+----------+---------+--------+------+-------+\n")),(0,r.kt)("p",null,"common users:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from usage_schema.writes order by time desc limit 2;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------------------------+----------+---------+------+-------+\n| time                       | database | node_id | user | value |\n+----------------------------+----------+---------+------+-------+\n| 2023-02-23T07:06:56.547905 | public   | 1001    | root | 2     |\n| 2023-02-23T07:06:46.547673 | public   | 1001    | root | 2     |\n+----------------------------+----------+---------+------+-------+\n")),(0,r.kt)("h2",{id:"kill-query"},"KILL QUERY"),(0,r.kt)("h4",{id:"syntax-1"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"KILL [QUERY] query_id;\n")),(0,r.kt)("p",null,"We can get the ",(0,r.kt)("inlineCode",{parentName:"p"},"query_id")," through ",(0,r.kt)("a",{parentName:"p",href:"#show-queries"},(0,r.kt)("inlineCode",{parentName:"a"},"SHOW QUERIES")),"."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SHOW QUERIES;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"+----------+------+------------------------------------------------------------------+------------+----------+\n| query_id | user | query                                                            | state      | duration |\n+----------+------+------------------------------------------------------------------+------------+----------+\n| 4        | root | select * from air join sea on air.temperature = sea.temperature; | SCHEDULING | 2703     |\n| 5        | root | show queries;                                                    | SCHEDULING | 0        |\n+----------+------+------------------------------------------------------------------+------------+----------+\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"KILL 4;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Query took 0.016 seconds.\n")))}k.isMDXComponent=!0}}]);