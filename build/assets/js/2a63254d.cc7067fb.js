"use strict";(self.webpackChunkCnosDB=self.webpackChunkCnosDB||[]).push([[7754],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,k=u["".concat(p,".").concat(m)]||u[m]||d[m]||l;return n?r.createElement(k,o(o({ref:t},c),{},{components:n})):r.createElement(k,o({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3281:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var r=n(7462),a=(n(7294),n(4137));const l={sidebar_position:1},o="Single",i={unversionedId:"deploy/single",id:"deploy/single",title:"Single",description:"Docker",source:"@site/docs/deploy/single.md",sourceDirName:"deploy",slug:"/deploy/single",permalink:"/docs/deploy/single",draft:!1,editUrl:"https://github.com/cnosdb/docs/docs/deploy/single.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Deploy",permalink:"/docs/category/deploy"},next:{title:"Distributed",permalink:"/docs/deploy/distributed"}},p={},s=[{value:"Docker",id:"docker",level:2},{value:"Kubernetes",id:"kubernetes",level:2},{value:"Helm",id:"helm",level:3},{value:"Terraform",id:"terraform",level:3},{value:"Source Code Installation",id:"source-code-installation",level:2},{value:"Supported Platforms",id:"supported-platforms",level:3},{value:"Compilation Environment",id:"compilation-environment",level:3},{value:"Compile",id:"compile",level:3},{value:"Run",id:"run",level:3},{value:"Run database services",id:"run-database-services",level:4},{value:"Run CLI",id:"run-cli",level:4}],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"single"},"Single"),(0,a.kt)("h2",{id:"docker"},"Docker"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Install ",(0,a.kt)("a",{parentName:"p",href:"https://www.docker.com/products/docker-desktop/"},"Docker"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Start containers with Docker"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"docker run --name cnosdb -d  --env cpu=2 --env memory=4 -p 31007:31007 cnosdb/cnosdb:v2.0.1\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Enter the container"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"}," docker exec -it cnosdb sh\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Run cnosdb-cli"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"}," cnosdb-cli\n")),(0,a.kt)("p",{parentName:"li"},"The following will be displayed:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},' CnosDB CLI v2.0.0\n Input arguments: Args { host: "0.0.0.0", port: 31007, user: "cnosdb", password: None, database: "public", target_partitions: Some(1), data_path: None, file: [], rc: None, format: Table, quiet: false }\n public \u276f\n')),(0,a.kt)("p",{parentName:"li"},"::: tip\nPlease enter \\q to exit"),(0,a.kt)("p",{parentName:"li"},"To view help please enter ","\\","?"),(0,a.kt)("p",{parentName:"li"},":::"))),(0,a.kt)("h2",{id:"kubernetes"},"Kubernetes"),(0,a.kt)("h3",{id:"helm"},"Helm"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Prepare the Kubernetes environment")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Execute the following command:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"}," git clone https://github.com/cnosdb/cloud-deploy.git\n cd helm-chart\n helm install cnosdb .\n")))),(0,a.kt)("h3",{id:"terraform"},"Terraform"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Clone Deployment Warehouse"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"}," git clone https://github.com/cnosdb/cloud-deploy.git\n cd terraform\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"}," terraform init\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Deploy"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"}," terraform apply\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Login; The third step will give you the public IP of CnosDB")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-shell"}," chmod 400 /root/.ssh/id_rsa\n ssh ubuntu@<cnosdb-public-ip>\n")))),(0,a.kt)("p",null,"Ports 22 and 31007 are open, you could add IP whitelist in main.tf file."),(0,a.kt)("h2",{id:"source-code-installation"},"Source Code Installation"),(0,a.kt)("h3",{id:"supported-platforms"},"Supported Platforms"),(0,a.kt)("p",null,"We support the following platforms, please ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cnosdb/cnosdb/issues"},"report")," to us if you find it works on platforms other than those listed."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Linux x86(",(0,a.kt)("inlineCode",{parentName:"p"},"x86_64-unknown-linux-gnu"),")")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Darwin arm(",(0,a.kt)("inlineCode",{parentName:"p"},"aarch64-apple-darwin"),")"))),(0,a.kt)("h3",{id:"compilation-environment"},"Compilation Environment"),(0,a.kt)("p",null,"i. Install Rust, you can go to the ",(0,a.kt)("a",{parentName:"p",href:"https://www.rust-lang.org/learn/get-started"},"official website")," to download and install."),(0,a.kt)("p",null,"ii. Install Cmake"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    # Debian or Ubuntu\n    apt-get install cmake\n    # Arch Linux\n    pacman -S cmake\n    # CentOS\n    yum install cmake\n    # Fedora\n    dnf install cmake\n    # macOS\n    brew install cmake\n")),(0,a.kt)("p",null,"For Windows, you can also download and install Cmake from the ",(0,a.kt)("a",{parentName:"p",href:"https://cmake.org/download/"},"official website"),"."),(0,a.kt)("p",null,"iii. Install Flatbuffers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    # Arch Linux\n    pacman -S flatbuffers\n    # Fedora\n    dnf install flatbuffers\n    # Ubuntu\n    snap install flatbuffers\n    # macOS\n    brew install flatbuffers\n")),(0,a.kt)("p",null,"If your system is not listed here, you can install FlatBuffers as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'    $ git clone -b v22.9.29 --depth 1 https://github.com/google/flatbuffers.git && cd flatbuffers\n    \n    # Select one of the following commands depending on the operating system\n    $ cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release\n    $ cmake -G "Visual Studio 10" -DCMAKE_BUILD_TYPE=Release\n    $ cmake -G "Xcode" -DCMAKE_BUILD_TYPE=Release\n    \n    $ sudo make install\n')),(0,a.kt)("h3",{id:"compile"},"Compile"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"}," git clone https://github.com/cnosdb/cnosdb.git && cd cnosdb\n cargo build\n")),(0,a.kt)("h3",{id:"run"},"Run"),(0,a.kt)("h4",{id:"run-database-services"},"Run database services"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cargo run -- run --cpu 4 --memory 64\n")),(0,a.kt)("h4",{id:"run-cli"},"Run CLI"),(0,a.kt)("p",null,"In another terminal, in the same directory, run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cargo run --package client --bin client\n")))}d.isMDXComponent=!0}}]);