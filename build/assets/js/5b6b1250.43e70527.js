"use strict";(self.webpackChunkCnosDB=self.webpackChunkCnosDB||[]).push([[580],{4137:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>k});var t=n(7294);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,i=function(e,a){if(null==e)return{};var n,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=t.createContext({}),p=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},u=function(e){var a=p(e.components);return t.createElement(s.Provider,{value:a},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,k=m["".concat(s,".").concat(d)]||m[d]||c[d]||r;return n?t.createElement(k,l(l({ref:a},u),{},{components:n})):t.createElement(k,l({ref:a},u))}));function k(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[m]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2358:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var t=n(7462),i=(n(7294),n(4137));const r={sidebar_position:2},l="Quick Start",o={unversionedId:"start/quick_start",id:"start/quick_start",title:"Quick Start",description:"CnosDBSQL is inspired by DataFusion\uff0cWe support most of the SQL syntax of DataFusion.",source:"@site/docs/start/quick_start.md",sourceDirName:"start",slug:"/start/quick_start",permalink:"/docs/start/quick_start",draft:!1,editUrl:"https://github.com/cnosdb/docs/docs/start/quick_start.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Install",permalink:"/docs/start/install"},next:{title:"Develop",permalink:"/docs/category/develop"}},s={},p=[{value:"Sample Data",id:"sample-data",level:2},{value:"Download Data",id:"download-data",level:3},{value:"Import Data",id:"import-data",level:3},{value:"<strong>Syntax</strong>",id:"syntax",level:2},{value:"<strong>SELECT Clause</strong>",id:"select-clause",level:2},{value:"SELECT *",id:"select-",level:3},{value:"ALL/DISTINCT",id:"alldistinct",level:3},{value:"Alias",id:"alias",level:2},{value:"Alias Column Expression",id:"alias-column-expression",level:3},{value:"Alias Table",id:"alias-table",level:3},{value:"SELECT Limitation",id:"select-limitation",level:3},{value:"LIMIT Clause",id:"limit-clause",level:2},{value:"<strong>OFFSET Clause</strong>",id:"offset-clause",level:2},{value:"<strong>WITH Clause</strong>",id:"with-clause",level:2},{value:"<strong>UNION Clause</strong>",id:"union-clause",level:2},{value:"ORDER BY Clause",id:"order-by-clause",level:2},{value:"<strong>IN</strong>",id:"in",level:2},{value:"<strong>SHOW</strong>",id:"show",level:2},{value:"<strong>EXPLAIN</strong>",id:"explain",level:2},{value:"<strong>DESCRIBE</strong>",id:"describe",level:2}],u={toc:p},m="wrapper";function c(e){let{components:a,...n}=e;return(0,i.kt)(m,(0,t.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"quick-start"},"Quick Start"),(0,i.kt)("p",null,"CnosDBSQL is inspired by ",(0,i.kt)("a",{parentName:"p",href:"https://arrow.apache.org/datafusion/user-guide/introduction.html"},"DataFusion"),"\uff0cWe support most of the SQL syntax of DataFusion."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note"),"\uff1aIn order to query more efficiently, the order of each row may not be the same for queries without specified sorting"),(0,i.kt)("h2",{id:"sample-data"},"Sample Data"),(0,i.kt)("p",null,"To further study CnosDB, this section will provide sample data for you to download and teach you how to import data into the database. The data sources referenced in the following chapters are all from this sample data."),(0,i.kt)("h3",{id:"download-data"},"Download Data"),(0,i.kt)("p",null,"If in cnosdb cli, enter ",(0,i.kt)("inlineCode",{parentName:"p"},"\\q")," to exit."),(0,i.kt)("p",null,"Executing the following command in the shell will generate a local data file named oceanic_station in Line Protocol format."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"wget https://fastdl.cnosdb.com/cpizkpfk/oceanic_station.txt\n")),(0,i.kt)("h3",{id:"import-data"},"Import Data"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Start the CLI")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cnosdb-cli\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Create the database")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"create database oceanic_station;\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Switch to the specified database")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"\\c oceanic_station\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Import data")),(0,i.kt)("p",{parentName:"li"},"Execute the \\w command, followed by the absolute path of the data file or the working path relative to cnosdb-cli."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"\\w oceanic_station.txt\n")))),(0,i.kt)("h2",{id:"syntax"},(0,i.kt)("strong",{parentName:"h2"},"Syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"[ WITH with_query [, ...] ]\nSELECT [ ALL | DISTINCT ] select_expression [, ...]\n    [ FROM from_item [, ...] ]\n    [ WHERE condition ]\n    [ GROUP BY [ ALL | DISTINCT ] grouping_element [, ...] ]\n    [ HAVING condition ]\n    [ { UNION | INTERSECT | EXCEPT } [ ALL | DISTINCT ] select ]\n    [ ORDER BY expression [ ASC | DESC ] [, ...] ]\n    [ OFFSET count ]\n    [ LIMIT { count | ALL } ];\n\n-- from_item\n-- 1.\n    tb_name [ [ AS ] alias [ ( column_alias [, ...] ) ] ]\n-- 2.\n    from_item join_type from_item\n    { ON join_condition | USING ( join_column [, ...] ) }\n\n-- join_type\n    [ INNER ] JOIN\n    LEFT [ OUTER ] JOIN\n    RIGHT [ OUTER ] JOIN\n    FULL [ OUTER ] JOIN\n    CROSS JOIN\n\n-- grouping_element\n    ()\n")),(0,i.kt)("h2",{id:"select-clause"},(0,i.kt)("strong",{parentName:"h2"},"SELECT Clause")),(0,i.kt)("h3",{id:"select-"},"SELECT ","*"),(0,i.kt)("p",null,"The wildcard * can be used to refer to all columns."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM air;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+---------------------+-------------+------------+-------------+----------+\n| time                | station     | visibility | temperature | pressure |\n+---------------------+-------------+------------+-------------+----------+\n| 2022-01-28 13:21:00 | XiaoMaiDao  | 56         | 69          | 77       |\n| 2022-01-28 13:24:00 | XiaoMaiDao  | 50         | 78          | 66       |\n| 2022-01-28 13:27:00 | XiaoMaiDao  | 67         | 62          | 59       |\n| 2022-01-28 13:30:00 | XiaoMaiDao  | 65         | 79          | 77       |\n| 2022-01-28 13:33:00 | XiaoMaiDao  | 53         | 53          | 68       |\n| 2022-01-28 13:36:00 | XiaoMaiDao  | 74         | 72          | 68       |\n| 2022-01-28 13:39:00 | XiaoMaiDao  | 71         | 71          | 80       |\n| 2022-01-28 13:21:00 | LianYunGang | 78         | 69          | 71       |\n| 2022-01-28 13:24:00 | LianYunGang | 79         | 80          | 51       |\n| 2022-01-28 13:27:00 | LianYunGang | 59         | 74          | 59       |\n| 2022-01-28 13:30:00 | LianYunGang | 67         | 70          | 72       |\n| 2022-01-28 13:33:00 | LianYunGang | 80         | 70          | 68       |\n| 2022-01-28 13:36:00 | LianYunGang | 59         | 70          | 54       |\n+---------------------+-------------+------------+-------------+----------+\n")),(0,i.kt)("h3",{id:"alldistinct"},"ALL/DISTINCT"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT [ ALL | DISTINCT ] select_expression [, ...];\n")),(0,i.kt)("p",null,"After the keyword ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT"),", you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"DISTINCT"),"to remove duplicate fields and return only the values after duplicate removal. Using ALL returns all duplicate values in the field. When this option is not specified, the default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"ALL"),"\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DISTINCT station, visibility FROM air;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+-------------+------------+\n| station     | visibility |\n+-------------+------------+\n| XiaoMaiDao  | 56         |\n| XiaoMaiDao  | 50         |\n| XiaoMaiDao  | 67         |\n| XiaoMaiDao  | 65         |\n| XiaoMaiDao  | 53         |\n| XiaoMaiDao  | 74         |\n| XiaoMaiDao  | 71         |\n| LianYunGang | 78         |\n| LianYunGang | 79         |\n| LianYunGang | 59         |\n| LianYunGang | 67         |\n| LianYunGang | 80         |\n+-------------+------------+\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station, visibility FROM air;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+-------------+------------+\n| station     | visibility |\n+-------------+------------+\n| XiaoMaiDao  | 56         |\n| XiaoMaiDao  | 50         |\n| XiaoMaiDao  | 67         |\n| XiaoMaiDao  | 65         |\n| XiaoMaiDao  | 53         |\n| XiaoMaiDao  | 74         |\n| XiaoMaiDao  | 71         |\n| LianYunGang | 78         |\n| LianYunGang | 79         |\n| LianYunGang | 59         |\n| LianYunGang | 67         |\n| LianYunGang | 80         |\n| LianYunGang | 59         |\n+-------------+------------+\n")),(0,i.kt)("h2",{id:"alias"},"Alias"),(0,i.kt)("p",null,"You can use the keyword",(0,i.kt)("inlineCode",{parentName:"p"},"AS"),"to alias a column expression or table."),(0,i.kt)("h3",{id:"alias-column-expression"},"Alias Column Expression"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"expression [ [ AS ] column_alias ]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station s, visibility AS v FROM air;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+-------------+----+\n| s           | v  |\n+-------------+----+\n| XiaoMaiDao  | 56 |\n| XiaoMaiDao  | 50 |\n| XiaoMaiDao  | 67 |\n| XiaoMaiDao  | 65 |\n| XiaoMaiDao  | 53 |\n| XiaoMaiDao  | 74 |\n| XiaoMaiDao  | 71 |\n| LianYunGang | 78 |\n| LianYunGang | 79 |\n| LianYunGang | 59 |\n| LianYunGang | 67 |\n| LianYunGang | 80 |\n| LianYunGang | 59 |\n+-------------+----+\n")),(0,i.kt)("h3",{id:"alias-table"},"Alias Table"),(0,i.kt)("p",null,"You can also use the keyword AS to alias the table."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"FROM tb_name [AS] alias_name\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT a.visibility, s.temperature\nFROM air AS a JOIN sea s ON a.temperature = s.temperature;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+------------+-------------+\n| visibility | temperature |\n+------------+-------------+\n| 67         | 62          |\n| 50         | 78          |\n| 50         | 78          |\n| 65         | 79          |\n+------------+-------------+\n")),(0,i.kt)("h3",{id:"select-limitation"},"SELECT Limitation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If the SELECT clause contains a Time column, it must contain at least one Field column."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Only the time column cannot be queried\nSELECT time FROM air;\n")),(0,i.kt)("p",{parentName:"li"},"ERROR\uff1a"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'"{\\"error_code\\":\\"0100000\\",\\"error_message\\":\\"Error executiong query: Failed to do execute statement, err:Failed to do physical plan. err: External error: Invalid schema: If the projection contains the time column, it must contain the field column.\\"}"\n')))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- temperature is a field column\uff0ctime column accompanied by at least one field can be queried.\nSELECT time, temperature FROM air;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"  +---------------------+-------------+\n  | time                | temperature |\n  +---------------------+-------------+\n  | 2022-01-28T13:21:00 | 69          |\n  | 2022-01-28T13:24:00 | 78          |\n  | 2022-01-28T13:27:00 | 62          |\n  | 2022-01-28T13:30:00 | 79          |\n  | 2022-01-28T13:33:00 | 53          |\n  | 2022-01-28T13:36:00 | 72          |\n  | 2022-01-28T13:39:00 | 71          |\n  | 2022-01-28T13:21:00 | 69          |\n  | 2022-01-28T13:24:00 | 80          |\n  | 2022-01-28T13:27:00 | 74          |\n  | 2022-01-28T13:30:00 | 70          |\n  | 2022-01-28T13:33:00 | 70          |\n  | 2022-01-28T13:36:00 | 70          |\n  +---------------------+-------------+\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If the SELECT clause contains only the Tag column, it is equivalent to the SELECT DISTINCT Tag column."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- station is a Tag column\uff0ctemperature is a Field column.\nSELECT station, temperature FROM air;\n")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+-------------+-------------+\n| station     | temperature |\n+-------------+-------------+\n| XiaoMaiDao  | 69          |\n| XiaoMaiDao  | 78          |\n| XiaoMaiDao  | 62          |\n| XiaoMaiDao  | 79          |\n| XiaoMaiDao  | 53          |\n| XiaoMaiDao  | 72          |\n| XiaoMaiDao  | 71          |\n| LianYunGang | 69          |\n| LianYunGang | 80          |\n| LianYunGang | 74          |\n| LianYunGang | 70          |\n| LianYunGang | 70          |\n| LianYunGang | 70          |\n+-------------+-------------+\n")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- station is a Tag column\nSELECT station FROM air;\n")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+-------------+\n| station     |\n+-------------+\n| XiaoMaiDao  |\n| LianYunGang |\n+-------------+ \n")))),(0,i.kt)("h2",{id:"limit-clause"},"LIMIT Clause"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"LIMIT n\n")),(0,i.kt)("p",null,"Limit the number of rows returned from the result set to n, and n must be non-negative."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM air LIMIT 10;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+---------------------+-------------+------------+-------------+----------+\n| time                | station     | visibility | temperature | pressure |\n+---------------------+-------------+------------+-------------+----------+\n| 2022-01-28 13:21:00 | XiaoMaiDao  | 56         | 69          | 77       |\n| 2022-01-28 13:24:00 | XiaoMaiDao  | 50         | 78          | 66       |\n| 2022-01-28 13:27:00 | XiaoMaiDao  | 67         | 62          | 59       |\n| 2022-01-28 13:30:00 | XiaoMaiDao  | 65         | 79          | 77       |\n| 2022-01-28 13:33:00 | XiaoMaiDao  | 53         | 53          | 68       |\n| 2022-01-28 13:36:00 | XiaoMaiDao  | 74         | 72          | 68       |\n| 2022-01-28 13:39:00 | XiaoMaiDao  | 71         | 71          | 80       |\n| 2022-01-28 13:21:00 | LianYunGang | 78         | 69          | 71       |\n| 2022-01-28 13:24:00 | LianYunGang | 79         | 80          | 51       |\n| 2022-01-28 13:27:00 | LianYunGang | 59         | 74          | 59       |\n+---------------------+-------------+------------+-------------+----------+\n")),(0,i.kt)("h2",{id:"offset-clause"},(0,i.kt)("strong",{parentName:"h2"},"OFFSET Clause")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"OFFSET m\n")),(0,i.kt)("p",null,"The returned result set skips m records. default m=0."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM air OFFSET 10;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+---------------------+-------------+------------+-------------+----------+\n| time                | station     | visibility | temperature | pressure |\n+---------------------+-------------+------------+-------------+----------+\n| 2022-01-28 13:30:00 | LianYunGang | 67         | 70          | 72       |\n| 2022-01-28 13:33:00 | LianYunGang | 80         | 70          | 68       |\n| 2022-01-28 13:36:00 | LianYunGang | 59         | 70          | 54       |\n+---------------------+-------------+------------+-------------+----------+\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"OFFSET"),"can be used with the",(0,i.kt)("inlineCode",{parentName:"p"},"LIMIT"),"statement to specify the number of lines to skip.The format is ",(0,i.kt)("inlineCode",{parentName:"p"},"LIMIT n OFFSET m"),"\uff0cor it can be abbreviated as LIMIT n, m. LIMIT n controls the output of n rows of data, and OFFSET m indicates the number of rows skipped before starting to return data. OFFSET 0 has the same effect as omitting the OFFSET clause."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT *\nFROM air LIMIT 3 OFFSET 3;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+---------------------+------------+------------+-------------+----------+\n| time                | station    | visibility | temperature | pressure |\n+---------------------+------------+------------+-------------+----------+\n| 2022-01-28 13:30:00 | XiaoMaiDao | 65         | 79          | 77       |\n| 2022-01-28 13:33:00 | XiaoMaiDao | 53         | 53          | 68       |\n| 2022-01-28 13:36:00 | XiaoMaiDao | 74         | 72          | 68       |\n+---------------------+------------+------------+-------------+----------+\n")),(0,i.kt)("h2",{id:"with-clause"},(0,i.kt)("strong",{parentName:"h2"},"WITH Clause")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"WITH cte AS cte_query_definiton [, ...] query\n")),(0,i.kt)("p",null,"Optional. The WITH clause contains one or more commonly used expressions CTE (Common Table Expression). CTE acts as a temporary table in the current running environment, which you can refer to in subsequent queries.The rules for using CTE are as follows\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"CTE in the same WITH clause must have a unique name."),(0,i.kt)("li",{parentName:"ul"},"The CTE defined in the WITH clause can only be used for other CTEs in the same WITH clause defined later. Suppose A is the first CTE in the clause and B is the second CTE in the clause\uff1a")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station, avg \nFROM (  SELECT station, AVG(visibility) AS avg \n        FROM air \n        GROUP BY station) AS x;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+-------------+--------------------+\n| station     | avg                |\n+-------------+--------------------+\n| XiaoMaiDao  | 62.285714285714285 |\n| LianYunGang | 70.33333333333333  |\n+-------------+--------------------+\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"WITH x AS \n    (SELECT station, AVG(visibility) AS avg FROM air GROUP BY station)\nSELECT station, avg\nFROM x;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+-------------+--------------------+\n| station     | avg                |\n+-------------+--------------------+\n| XiaoMaiDao  | 62.285714285714285 |\n| LianYunGang | 70.33333333333333  |\n+-------------+--------------------+\n")),(0,i.kt)("h2",{id:"union-clause"},(0,i.kt)("strong",{parentName:"h2"},"UNION Clause")),(0,i.kt)("p",null,"The UNION clause is used to combine the analysis results of multiple SELECT statements."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"select_clause_set_left\n[ UNION | UNION ALL| EXCEPT | INTERSECT]\nselect_clause_set_right\n[sort_list_columns] [limit_clause]\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"UNION"),"will de-duplicate the merged result set.\n",(0,i.kt)("inlineCode",{parentName:"p"},"UNION ALL"),"will retain the same data in the merged result set.\n",(0,i.kt)("inlineCode",{parentName:"p"},"EXCEPT")," will make the difference between the two result sets, return all non-duplicate values not found in the right query from the left query.\n",(0,i.kt)("inlineCode",{parentName:"p"},"INTERSECT")," returns the intersection of the two result sets (that means, all non-duplicate values are returned by both queries)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note")),(0,i.kt)("p",null,"Each SELECT clause in the UNION must have the same number of columns, and the corresponding columns have the same data type."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"UNION ALL")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT visibility FROM air WHERE temperature < 60\nUNION ALL\nSELECT visibility FROM air WHERE temperature > 50 LIMIT 10;\n")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+------------+\n| visibility |\n+------------+\n| 53         |\n| 56         |\n| 50         |\n| 67         |\n| 65         |\n| 53         |\n| 74         |\n| 71         |\n| 78         |\n| 79         |\n+------------+\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"UNION")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT visibility FROM air WHERE temperature < 60\nUNION\nSELECT visibility FROM air WHERE temperature > 50 LIMIT 10;\n")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+------------+\n| visibility |\n+------------+\n| 53         |\n| 56         |\n| 50         |\n| 67         |\n| 65         |\n| 74         |\n| 71         |\n| 78         |\n| 79         |\n| 59         |\n+------------+\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"EXCEPT")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT visibility FROM air\nEXCEPT\nSELECT visibility FROM air WHERE temperature < 50 LIMIT 10;\n")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+------------+\n| visibility |\n+------------+\n| 56         |\n| 50         |\n| 67         |\n| 65         |\n| 53         |\n| 74         |\n| 71         |\n| 78         |\n| 79         |\n| 59         |\n+------------+\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"INTERSECT")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT visibility FROM air\nINTERSECT\nSELECT visibility FROM air WHERE temperature > 50 LIMIT 10;\n")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+------------+\n| visibility |\n+------------+\n| 56         |\n| 50         |\n| 67         |\n| 65         |\n| 53         |\n| 74         |\n| 71         |\n| 78         |\n| 79         |\n| 59         |\n+------------+\n")))),(0,i.kt)("h2",{id:"order-by-clause"},"ORDER BY Clause"),(0,i.kt)("p",null,"Sort the results by the referenced expression. Ascending (ASC) is used by default. Sort in descending order by adding DESC after the expression of ORDER BY."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM air ORDER BY temperature;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+---------------------+-------------+------------+-------------+----------+\n| time                | station     | visibility | temperature | pressure |\n+---------------------+-------------+------------+-------------+----------+\n| 2022-01-28 13:33:00 | XiaoMaiDao  | 53         | 53          | 68       |\n| 2022-01-28 13:27:00 | XiaoMaiDao  | 67         | 62          | 59       |\n| 2022-01-28 13:21:00 | XiaoMaiDao  | 56         | 69          | 77       |\n| 2022-01-28 13:21:00 | LianYunGang | 78         | 69          | 71       |\n| 2022-01-28 13:30:00 | LianYunGang | 67         | 70          | 72       |\n| 2022-01-28 13:33:00 | LianYunGang | 80         | 70          | 68       |\n| 2022-01-28 13:36:00 | LianYunGang | 59         | 70          | 54       |\n| 2022-01-28 13:39:00 | XiaoMaiDao  | 71         | 71          | 80       |\n| 2022-01-28 13:36:00 | XiaoMaiDao  | 74         | 72          | 68       |\n| 2022-01-28 13:27:00 | LianYunGang | 59         | 74          | 59       |\n| 2022-01-28 13:24:00 | XiaoMaiDao  | 50         | 78          | 66       |\n| 2022-01-28 13:30:00 | XiaoMaiDao  | 65         | 79          | 77       |\n| 2022-01-28 13:24:00 | LianYunGang | 79         | 80          | 51       |\n+---------------------+-------------+------------+-------------+----------+\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM air ORDER BY temperature DESC;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+---------------------+-------------+------------+-------------+----------+\n| time                | station     | visibility | temperature | pressure |\n+---------------------+-------------+------------+-------------+----------+\n| 2022-01-28 13:24:00 | LianYunGang | 79         | 80          | 51       |\n| 2022-01-28 13:30:00 | XiaoMaiDao  | 65         | 79          | 77       |\n| 2022-01-28 13:24:00 | XiaoMaiDao  | 50         | 78          | 66       |\n| 2022-01-28 13:27:00 | LianYunGang | 59         | 74          | 59       |\n| 2022-01-28 13:36:00 | XiaoMaiDao  | 74         | 72          | 68       |\n| 2022-01-28 13:39:00 | XiaoMaiDao  | 71         | 71          | 80       |\n| 2022-01-28 13:30:00 | LianYunGang | 67         | 70          | 72       |\n| 2022-01-28 13:33:00 | LianYunGang | 80         | 70          | 68       |\n| 2022-01-28 13:36:00 | LianYunGang | 59         | 70          | 54       |\n| 2022-01-28 13:21:00 | XiaoMaiDao  | 56         | 69          | 77       |\n| 2022-01-28 13:21:00 | LianYunGang | 78         | 69          | 71       |\n| 2022-01-28 13:27:00 | XiaoMaiDao  | 67         | 62          | 59       |\n| 2022-01-28 13:33:00 | XiaoMaiDao  | 53         | 53          | 68       |\n+---------------------+-------------+------------+-------------+----------+\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM air ORDER BY station, temperature;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+---------------------+-------------+------------+-------------+----------+\n| time                | station     | visibility | temperature | pressure |\n+---------------------+-------------+------------+-------------+----------+\n| 2022-01-28 13:21:00 | LianYunGang | 78         | 69          | 71       |\n| 2022-01-28 13:30:00 | LianYunGang | 67         | 70          | 72       |\n| 2022-01-28 13:33:00 | LianYunGang | 80         | 70          | 68       |\n| 2022-01-28 13:36:00 | LianYunGang | 59         | 70          | 54       |\n| 2022-01-28 13:27:00 | LianYunGang | 59         | 74          | 59       |\n| 2022-01-28 13:24:00 | LianYunGang | 79         | 80          | 51       |\n| 2022-01-28 13:33:00 | XiaoMaiDao  | 53         | 53          | 68       |\n| 2022-01-28 13:27:00 | XiaoMaiDao  | 67         | 62          | 59       |\n| 2022-01-28 13:21:00 | XiaoMaiDao  | 56         | 69          | 77       |\n| 2022-01-28 13:39:00 | XiaoMaiDao  | 71         | 71          | 80       |\n| 2022-01-28 13:36:00 | XiaoMaiDao  | 74         | 72          | 68       |\n| 2022-01-28 13:24:00 | XiaoMaiDao  | 50         | 78          | 66       |\n| 2022-01-28 13:30:00 | XiaoMaiDao  | 65         | 79          | 77       |\n+---------------------+-------------+------------+-------------+----------+\n")),(0,i.kt)("h2",{id:"in"},(0,i.kt)("strong",{parentName:"h2"},"IN")),(0,i.kt)("p",null,"The IN operator allows you to specify multiple values in the WHERE clause."),(0,i.kt)("p",null,"*",(0,i.kt)("em",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT station, temperature, visibility FROM air WHERE temperature  IN (68, 69);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+-------------+-------------+------------+\n| station     | temperature | visibility |\n+-------------+-------------+------------+\n| XiaoMaiDao  | 69          | 56         |\n| LianYunGang | 69          | 78         |\n+-------------+-------------+------------+\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note")),(0,i.kt)("p",null,"The IN list does not support expressions currently, but only constants."),(0,i.kt)("h2",{id:"show"},(0,i.kt)("strong",{parentName:"h2"},"SHOW")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SHOW {DATABASES | TABLES}\n")),(0,i.kt)("p",null,"Show all databases or all tables."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SHOW DATABASES;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+----------+\n| Database |\n+----------+\n| public   |\n+----------+\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SHOW TABLES;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+-------+\n| Table |\n+-------+\n| sea   |\n| air   |\n| wind  |\n+-------+\n")),(0,i.kt)("h2",{id:"explain"},(0,i.kt)("strong",{parentName:"h2"},"EXPLAIN")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"EXPLAIN [ ANALYZE ] [ VERBOSE ] <statement>;\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Explanation")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"EXPLAIN")," is only used to display the execution plan of a query, and does not execute the query."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"EXPLAIN ANALYZE")," executes the query and displays the execution plan of the query."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"EXPLAIN ANALYZE VERBOSE")," executes the query and displays a more detailed execution plan, including the number of rows read."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"EXPLAIN SELECT station, temperature, visibility FROM air;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+---------------+-----------------------------------------------------------------------------------------------------------------------------+\n| plan_type     | plan                                                                                                                        |\n+---------------+-----------------------------------------------------------------------------------------------------------------------------+\n| logical_plan  | Projection: #air.station, #air.temperature, #air.visibility                                                                 |\n|               |   TableScan: air projection=[station, visibility, temperature]                                                              |\n| physical_plan | ProjectionExec: expr=[station@0 as station, temperature@2 as temperature, visibility@1 as visibility]                       |\n|               |   TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({}) }, projection=[station,visibility,temperature] |\n|               |                                                                                                                             |\n+---------------+-----------------------------------------------------------------------------------------------------------------------------+\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"EXPLAIN ANALYZE SELECT station, temperature, visibility FROM air;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type         | plan                                                                                                                                                                                                                                                                                                                                    |\n+-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Plan with Metrics | ProjectionExec: expr=[station@0 as station, temperature@2 as temperature, visibility@1 as visibility], metrics=[output_rows=13, elapsed_compute=20.375\xb5s, spill_count=0, spilled_bytes=0, mem_used=0]                                                                                                                                   |\n|                   |   TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({}) }, projection=[station,visibility,temperature], metrics=[output_rows=13, elapsed_compute=15.929624ms, spill_count=0, spilled_bytes=0, mem_used=0, elapsed_series_scan=1.698791ms, elapsed_point_to_record_batch=4.572954ms, elapsed_field_scan=5.119076ms] |\n|                   |                                                                                                                                                                                                                                                                                                                                         |\n+-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"EXPLAIN ANALYZE SELECT station, temperature, visibility FROM air;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| plan_type         | plan                                                                                                                                                                                                                                                                                                                                    |\n+-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Plan with Metrics | ProjectionExec: expr=[station@0 as station, temperature@2 as temperature, visibility@1 as visibility], metrics=[output_rows=13, elapsed_compute=20.375\xb5s, spill_count=0, spilled_bytes=0, mem_used=0]                                                                                                                                   |\n|                   |   TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({}) }, projection=[station,visibility,temperature], metrics=[output_rows=13, elapsed_compute=15.929624ms, spill_count=0, spilled_bytes=0, mem_used=0, elapsed_series_scan=1.698791ms, elapsed_point_to_record_batch=4.572954ms, elapsed_field_scan=5.119076ms] |\n|                   |                                                                                                                                                                                                                                                                                                                                         |\n+-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"EXPLAIN ANALYZE VERBOSE SELECT station, temperature, visibility FROM air;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}n| plan_type              | plan|\nn| Plan with Metrics      | ProjectionExec: expr=[station@0 as station, temperature@2 as temperature, visibility@1 as visibility], metrics=[output_rows=13, elapsed_compute=26.75\xb5s, spill_count=0, spilled_bytes=0, mem_used=0]                                                                                                                                                                                                                                                                                                                                                                    |\n|                        |   TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({}) }, projection=[station,visibility,temperature], metrics=[output_rows=13, elapsed_compute=13.225875ms, spill_count=0, spilled_bytes=0, mem_used=0, elapsed_point_to_record_batch=3.918163ms, elapsed_field_scan=3.992161ms, elapsed_series_scan=1.657416ms]                                                                                                                                                                                                                                 |\n|                        ||\n| Plan with Full Metrics | ProjectionExec: expr=[station@0 as station, temperature@2 as temperature, visibility@1 as visibility], metrics=[start_timestamp{partition=0}=2022-10-25 03:00:14.865034 UTC, end_timestamp{partition=0}=2022-10-25 03:00:14.879596 UTC, elapsed_compute{partition=0}=26.75\xb5s, spill_count{partition=0}=0, spilled_bytes{partition=0}=0, mem_used{partition=0}=0, output_rows{partition=0}=13]                                                                                                                                                                           |\n|                        |   TskvExec: limit=None, predicate=ColumnDomains { column_to_domain: Some({}) }, projection=[station,visibility,temperature], metrics=[start_timestamp{partition=0}=2022-10-25 03:00:14.864225 UTC, end_timestamp{partition=0}=2022-10-25 03:00:14.879596 UTC, elapsed_compute{partition=0}=13.225875ms, spill_count{partition=0}=0, spilled_bytes{partition=0}=0, mem_used{partition=0}=0, output_rows{partition=0}=13, elapsed_point_to_record_batch{partition=0}=3.918163ms, elapsed_field_scan{partition=0}=3.992161ms, elapsed_series_scan{partition=0}=1.657416ms] |\n|                        ||\n| Output Rows            ||\n| Duration               | 13.307708ms|\nn")),(0,i.kt)("h2",{id:"describe"},(0,i.kt)("strong",{parentName:"h2"},"DESCRIBE")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"DESCRIBE {DATABASE db_name | TABLE tb_name};\n")),(0,i.kt)("p",null,"Describe the parameters of the database and the pattern of the table."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"DESCRIBE TABLE air;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+-------------+-----------+-------+-------------+\n| FIELDNAME   | TYPE      | ISTAG | COMPRESSION |\n+-------------+-----------+-------+-------------+\n| time        | TIMESTAMP | false | Default     |\n| station     | STRING    | true  | Default     |\n| visibility  | DOUBLE    | false | Default     |\n| temperature | DOUBLE    | false | Default     |\n| pressure    | DOUBLE    | false | Default     |\n+-------------+-----------+-------+-------------+\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"DESCRIBE DATABASE public;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"+----------+-------+----------------+---------+-----------+\n| TTL      | SHARD | VNODE_DURATION | REPLICA | PRECISION |\n+----------+-------+----------------+---------+-----------+\n| 365 Days | 1     | 365 Days       | 1       | NS        |\n+----------+-------+----------------+---------+-----------+\n")))}c.isMDXComponent=!0}}]);