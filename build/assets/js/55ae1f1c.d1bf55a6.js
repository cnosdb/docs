"use strict";(self.webpackChunkCnosDB=self.webpackChunkCnosDB||[]).push([[8714],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),h=a,m=c["".concat(i,".").concat(h)]||c[h]||d[h]||s;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=h;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<s;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4294:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(4137));const s={sidebar_position:1},o="Connect to CnosDB",l={unversionedId:"develop/api",id:"develop/api",title:"Connect to CnosDB",description:"Rust",source:"@site/docs/develop/api.md",sourceDirName:"develop",slug:"/develop/api",permalink:"/docs/develop/api",draft:!1,editUrl:"https://github.com/cnosdb/docs/docs/develop/api.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Develop",permalink:"/docs/category/develop"},next:{title:"Wirte Data",permalink:"/docs/develop/write"}},i={},p=[{value:"Rust",id:"rust",level:2},{value:"Golang",id:"golang",level:2},{value:"Java",id:"java",level:2},{value:"HTTP API",id:"http-api",level:2},{value:"Syntax",id:"syntax",level:4},{value:"Example",id:"example",level:4}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"connect-to-cnosdb"},"Connect to CnosDB"),(0,a.kt)("h2",{id:"rust"},"Rust"),(0,a.kt)("p",null,"The sample code uses ",(0,a.kt)("a",{parentName:"p",href:"https://crates.io/crates/reqwest"},"reqwest")," to build Http requests."),(0,a.kt)("p",null,"Http request needs to specify the database to be operated on, written in the url query as db=database_name."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'let url = Url::parse("http://127.0.0.1:31007/api/v1/sql?db=public&pretty=true").unwrap();\nlet sql = r#"\nCREATE TABLE air (\nvisibility DOUBLE,\ntemperature DOUBLE,\npressure DOUBLE,\nTAGS(station)\n);"#.to_string();\n')),(0,a.kt)("p",null,"Set the SQL requested for execution into the body of the http."),(0,a.kt)("p",null,"Encode the username and password in BASIC code to the Authorization Header."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'let user_name = "cnosdb";\nlet password = "";\nlet http_client = reqwest::Client::new();\nlet request = http_client\n.request(Method::POST, url)\n//username and password\n.basic_auth::<&str, &str>(user_name, Some(password))\n.body(sql)\n.build().unwrap();\n')),(0,a.kt)("p",null,"The status code of the response will indicate whether the SQL is executed successfully, 200 representing success."),(0,a.kt)("p",null,"The error messages or the result of the correct execution will be in the text() of the response."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"let response = http_client.execute(request).await.unwrap();\nlet success = response.status().is_success();\nlet result = response.text().await.unwrap();\n")),(0,a.kt)("h2",{id:"golang"},"Golang"),(0,a.kt)("p",null,"The sample code uses ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/valyala/fasthttp"},"fasthttp")," as a dependency."),(0,a.kt)("p",null,"Following are the parameters required to construct the http request."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'user := "cnosdb"\npwd := ""\n// db means database, we use default db \'public\'\nurl := "http://127.0.0.1:31007/" + "api/v1/sql?db=public&pretty=true"\nquery1 := "CREATE TABLE air (\nvisibility DOUBLE,\ntemperature DOUBLE,\npressure DOUBLE,\nTAGS(station)\n);"\n')),(0,a.kt)("p",null,"Construct the http request\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func basicAuth(username, password string) string {\nauth := username + ":" + password\nreturn "Basic " + base64.StdEncoding.EncodeToString([]byte(auth))\n}\n\nreq := fasthttp.AcquireRequest()\nreq.Header.SetMethod("POST")\nreq.Header.Set("Authorization", basicAuth(user, pwd))\nreq.SetBody([]byte(query1))\nreq.SetRequestURI(url)\n')),(0,a.kt)("p",null,"Send the http request:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"cli := fasthttp.Client{}\nresp := fasthttp.Response{}\nerr := cli.Do(req, &resp)\nif err != nil {\nreturn\n}\nfmt.Println(resp.StatusCode())\n")),(0,a.kt)("p",null,"The status code of the response will indicate whether the SQL is executed successfully, 200 representing success."),(0,a.kt)("h2",{id:"java"},"Java"),(0,a.kt)("p",null,"Use ",(0,a.kt)("a",{parentName:"p",href:"https://hc.apache.org/"},"Apache Http Components Apache")," as a dependency."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public static void main(String[] args) {\n        String database = "public";\n        String name = "cnosdb";\n        String pwd = "";\n        String query = "CREATE TABLE air (\n        visibility DOUBLE,\n        temperature DOUBLE,\n        pressure DOUBLE,\n        TAGS(station)\n        );";\n        String url = "http://127.0.0.1:31007/";\n\n        try {\n        CloseableHttpClient client = HttpClients.createDefault();\n        URIBuilder builder = new URIBuilder(url + "api/v1/sql");\n\n        // Set the query db on the url parameter\n        builder.setParameter("db", database);\n        HttpPost httpPost = new HttpPost(builder.build());\n\n\n        //Encode username and password into Authorization Header\n        String nameAndPwd = name + ":" + pwd;\n        byte[] encodedAuth = Base64.encodeBase64(\n        nameAndPwd.getBytes(StandardCharsets.ISO_8859_1));\n        String auth = "Basic " + new String(encodedAuth);\n        httpPost.setHeader(HttpHeaders.AUTHORIZATION, auth);\n\n        // Set statement on the body\n        StringEntity stringEntity = new StringEntity(query);\n        httpPost.setEntity(stringEntity);\n\n        CloseableHttpResponse resp = client.execute(httpPost);\n        // Status code is not 200--execution failed\n        if (resp.getStatusLine().getStatusCode() != 200) {\n        System.out.println("Request Fail");\n        }\n        // Get error messages or return results\n        String res = IOUtils.toString(resp.getEntity().getContent());\n        System.out.println(res);\n        } catch (Exception e) {\n\n        }\n}\n')),(0,a.kt)("h2",{id:"http-api"},"HTTP API"),(0,a.kt)("p",null,"The HTTP API query command is as follows, which you can refer to when implementing HTTP API requests in code."),(0,a.kt)("h4",{id:"syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'curl -X POST "http://<cnosdb_url>:<cnosdb_port>/api/v1/sql?db=<database_name>&pretty=true" \\\n-H "Authorization: Basic $(echo -n <username>:<password> | base64)" \\\n-H "Content-Type: application/x-www-form-urlencoded" \\\n-d "<your SQL statement>"\n')),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'curl -X POST "http://127.0.0.1:31007/api/v1/sql?db=public&pretty=true" \\\n-H "Authorization: Basic $(echo -n cnosdb: | base64)" \\\n-H "Content-Type: application/x-www-form-urlencoded" \\\n-d "CREATE TABLE air (\nvisibility DOUBLE,\ntemperature DOUBLE,\npressure DOUBLE,\nTAGS(station)\n);"\n')))}d.isMDXComponent=!0}}]);