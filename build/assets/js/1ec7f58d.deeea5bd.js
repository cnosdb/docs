"use strict";(self.webpackChunkCnosDB=self.webpackChunkCnosDB||[]).push([[2073],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),d=o,m=p["".concat(c,".").concat(d)]||p[d]||f[d]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8250:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7462),o=(n(7294),n(4137));const a={sidebar_position:6},i="CnosDB Tools",l={unversionedId:"reference/tools",id:"reference/tools",title:"CnosDB Tools",description:"Client CLI",source:"@site/docs/reference/tools.md",sourceDirName:"reference",slug:"/reference/tools",permalink:"/docs/reference/tools",draft:!1,editUrl:"https://github.com/cnosdb/docs/docs/reference/tools.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"SQL Reference",permalink:"/docs/reference/sql"},next:{title:"Configuration",permalink:"/docs/reference/config"}},c={},s=[{value:"Client CLI",id:"client-cli",level:2}],u={toc:s},p="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cnosdb-tools"},"CnosDB Tools"),(0,o.kt)("h2",{id:"client-cli"},"Client CLI"),(0,o.kt)("p",null,"Run the following command to start the CLI program in the root directory of CnosDB source code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    cargo run --package client --bin client\n")),(0,o.kt)("p",null,"The parameters of CLI program are as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    -h --host CnosDB            Host of the service. The default is "0.0.0.0".\n    -p --port CnosDB            Port of the service. The default is 31007.\n    -u --user                   Username. The default value is "CnosDB".\n    -p --password               Password. None by default.\n    -d --database               Connected database. The default value is "public".\n    -t --target-partitions      Optional; the number of slices to execute the query, increasing which can increase concurrency. Not specified by default.\n    --data-path                 Data storage location of CLI program. The default is the directory where the client is executed.\n    -f --file                   Optional; it executse multiple command scripts and exits.\n    --rc                        Optional; profile.\n    --format                    Output format. The default is "Table" format.\n    --quiet                     To run in quiet mode, output only the result, not execution time.\n')),(0,o.kt)("p",null,"After entering the program you can run the command or SQL:."),(0,o.kt)("p",null,"Run an SQL example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    \u276f CREATE DATABASE test;\n    Query took 0.050 seconds.\n    \u276f\n")),(0,o.kt)("p",null,"Run a command example:"),(0,o.kt)("p",null,"The commands for the program are as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'    \\?          Command Help\n    \\q          Exit CLI\n    \\c <db>     Connect the database "db_name"\n    \\d <table>  Describe the table "table"\n    \\quiet     Switch to quiet mode, output only the result, not execution time\n    \\w <path>   Read a file in Line Protocol format and write it to the database\n')))}f.isMDXComponent=!0}}]);