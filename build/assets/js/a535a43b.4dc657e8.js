"use strict";(self.webpackChunkCnosDB=self.webpackChunkCnosDB||[]).push([[1427],{4137:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>y});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),i=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=i(e.components);return r.createElement(u.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=i(t),m=a,y=c["".concat(u,".").concat(m)]||c[m]||p[m]||o;return t?r.createElement(y,s(s({ref:n},d),{},{components:t})):r.createElement(y,s({ref:n},d))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=m;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[c]="string"==typeof e?e:a,s[1]=l;for(var i=2;i<o;i++)s[i]=t[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1320:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var r=t(7462),a=(t(7294),t(4137));const o={sidebar_position:3},s="Query Data",l={unversionedId:"develop/query",id:"develop/query",title:"Query Data",description:"CnosDB supports a variety of query methods, including: direct query with SQL from the command line, query using HTTP API.",source:"@site/docs/develop/query.md",sourceDirName:"develop",slug:"/develop/query",permalink:"/docs/develop/query",draft:!1,editUrl:"https://github.com/cnosdb/docs/docs/develop/query.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Wirte Data",permalink:"/docs/develop/write"},next:{title:"Deploy",permalink:"/docs/category/deploy"}},u={},i=[{value:"SQL",id:"sql",level:2},{value:"Data Query",id:"data-query",level:3},{value:"HTTP API",id:"http-api",level:2},{value:"Data Query",id:"data-query-1",level:3},{value:"Syntax",id:"syntax",level:4},{value:"Example",id:"example",level:4},{value:"Golang",id:"golang",level:2},{value:"Code",id:"code",level:4},{value:"Python",id:"python",level:2},{value:"Code",id:"code-1",level:4},{value:"Java",id:"java",level:2},{value:"Code",id:"code-2",level:4},{value:"Rust",id:"rust",level:2},{value:"Code",id:"code-3",level:4},{value:"C++",id:"c",level:2},{value:"Code",id:"code-4",level:4}],d={toc:i},c="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"query-data"},"Query Data"),(0,a.kt)("p",null,"CnosDB supports a variety of query methods, including: direct query with SQL from the command line, query using HTTP API."),(0,a.kt)("h2",{id:"sql"},"SQL"),(0,a.kt)("p",null,"CnosDB supports data queries using SQL."),(0,a.kt)("h3",{id:"data-query"},"Data Query"),(0,a.kt)("p",null,"You can see ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/sql#data-query"},"Data Query"),"."),(0,a.kt)("h2",{id:"http-api"},"HTTP API"),(0,a.kt)("h3",{id:"data-query-1"},"Data Query"),(0,a.kt)("h4",{id:"syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i -u "<username>:<password>" -H "Accept: application/json" \\\n-XPOST "http://<cnosdb_url>:<cnosdb_port>/api/v1/sql?db=<database_name>&pretty=true" \\\n-d "<your SQL statement>"\n')),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'curl -i -u "cnosdb:" -H "Accept: application/json" \\\n-XPOST "http://127.0.0.1:31007/api/v1/sql?db=oceanic_station" \\\n-d "SELECT * FROM air LIMIT 10;"\n')),(0,a.kt)("h2",{id:"golang"},"Golang"),(0,a.kt)("h4",{id:"code"},"Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "net/http"\n    "bytes"\n    "encoding/base64"\n)\n\nfunc main() {\n    username := "<username>"\n    password := "<password>"\n    url := "http://<cnosdb_url>:<cnosdb_port>/api/v1/sql?db=<database_name>&pretty=true"\n    sqlStatement := "<your SQL statement>"\n\n    client := &http.Client{}\n    req, err := http.NewRequest("POST", url, bytes.NewBufferString(sqlStatement))\n    if err != nil {\n        panic(err)\n    }\n\n    // add Authorization header\n    authStr := username + ":" + password\n    encodedAuth := base64.StdEncoding.EncodeToString([]byte(authStr))\n    req.Header.Set("Authorization", "Basic "+encodedAuth)\n\n    // add Accept header\n    req.Header.Set("Accept", "application/json")\n\n    resp, err := client.Do(req)\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    // print response\n    fmt.Println("Status Code:", resp.StatusCode)\n    fmt.Println("Response Body:")\n    buf := new(bytes.Buffer)\n    buf.ReadFrom(resp.Body)\n    fmt.Println(buf.String())\n}\n')),(0,a.kt)("h2",{id:"python"},"Python"),(0,a.kt)("h4",{id:"code-1"},"Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import requests\n\nusername = "<username>"\npassword = "<password>"\ncnosdb_url = "<cnosdb_url>"\ncnosdb_port = "<cnosdb_port>"\ndatabase_name = "<database_name>"\nsql_statement = "<your SQL statement>"\n\nurl = f"http://{cnosdb_url}:{cnosdb_port}/api/v1/sql?db={database_name}&pretty=true"\nheaders = {"Accept": "application/json"}\ndata = {"query": sql_statement}\n\nresponse = requests.post(url, auth=(username, password), headers=headers, json=data)\n\nprint(response.text)\n')),(0,a.kt)("h2",{id:"java"},"Java"),(0,a.kt)("h4",{id:"code-2"},"Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Base64;\n\npublic class CurlToJava {\n\n    public static void main(String[] args) throws Exception {\n        String username = "<username>";\n        String password = "<password>";\n        String cnosdbUrl = "<cnosdb_url>";\n        String cnosdbPort = "<cnosdb_port>";\n        String dbName = "<database_name>";\n        String sqlStatement = "<your SQL statement>";\n        \n        String apiUrl = "http://" + cnosdbUrl + ":" + cnosdbPort + "/api/v1/sql?db=" + dbName + "&pretty=true";\n        String auth = username + ":" + password;\n        byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes());\n        String authHeaderValue = "Basic " + new String(encodedAuth);\n        \n        URL url = new URL(apiUrl);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod("POST");\n        connection.setRequestProperty("Accept", "application/json");\n        connection.setRequestProperty("Authorization", authHeaderValue);\n        connection.setDoOutput(true);\n\n        String requestBody = sqlStatement;\n        connection.getOutputStream().write(requestBody.getBytes());\n\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n        String line;\n        while ((line = bufferedReader.readLine()) != null) {\n            System.out.println(line);\n        }\n        bufferedReader.close();\n        connection.disconnect();\n    }\n}\n')),(0,a.kt)("h2",{id:"rust"},"Rust"),(0,a.kt)("h4",{id:"code-3"},"Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use reqwest::header::{Authorization, HeaderValue, ACCEPT};\nuse std::error::Error;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn Error>> {\n    let username = "<username>";\n    let password = "<password>";\n    let cdb_url = "<cnosdb_url>";\n    let cdb_port = "<cnosdb_port>";\n    let database_name = "<database_name>";\n    let sql_statement = "<your SQL statement>";\n\n    let url = format!(\n        "http://{}:{}/api/v1/sql?db={}&pretty=true",\n        cdb_url, cdb_port, database_name\n    );\n    \n    let client = reqwest::Client::new();\n    let res = client\n        .post(&url)\n        .header(ACCEPT, "application/json")\n        .header(\n            Authorization(format!("Basic {}", base64::encode(format!("{}:{}", username, password))))\n        )\n        .body(sql_statement)\n        .send()\n        .await?;\n\n    println!("{}", res.text().await?);\n\n    Ok(())\n}\n')),(0,a.kt)("h2",{id:"c"},"C++"),(0,a.kt)("h4",{id:"code-4"},"Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <curl/curl.h>\n\nint main() {\n  CURL *curl;\n  CURLcode res;\n\n  std::string username = "your_username";\n  std::string password = "your_password";\n  std::string cnosdb_url = "your_cnosdb_url";\n  int cnosdb_port = 1234;\n  std::string database_name = "your_database_name";\n  std::string sql_statement = "your_sql_statement";\n\n  std::string url = "http://" + cnosdb_url + ":" + std::to_string(cnosdb_port) + "/api/v1/sql?db=" + database_name + "&pretty=true";\n\n  curl_global_init(CURL_GLOBAL_DEFAULT);\n  curl = curl_easy_init();\n  if (curl) {\n    curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n    curl_easy_setopt(curl, CURLOPT_USERNAME, username.c_str());\n    curl_easy_setopt(curl, CURLOPT_PASSWORD, password.c_str());\n    curl_easy_setopt(curl, CURLOPT_HTTPHEADER, "Accept: application/json");\n    curl_easy_setopt(curl, CURLOPT_POSTFIELDS, sql_statement.c_str());\n    curl_easy_setopt(curl, CURLOPT_POST, 1L);\n    res = curl_easy_perform(curl);\n\n    if (res != CURLE_OK) {\n      std::cerr << "curl_easy_perform() failed: " << curl_easy_strerror(res) << std::endl;\n    }\n\n    curl_easy_cleanup(curl);\n  }\n\n  curl_global_cleanup();\n  return 0;\n}\n')))}p.isMDXComponent=!0}}]);